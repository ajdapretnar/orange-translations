Orange/widgets/widget.py:
    OWWidget:
        ? "\"\"\n    :class:`~orangewidget.widget.OWBaseWidget` extended with `Orange.data.Table`\n\
            \    related report methods (:class:`.Report`)\n    \"\""
        : null
    Input: null
    Output: null
    MultiInput: null
    AttributeList: null
    Message: null
    Msg: null
    StateInfo: null
    InputSignal: null
    OutputSignal: null
    Default: null
    NonDefault: null
    Single: null
    Multiple: null
    Dynamic: null
    Explicit: null
Orange/widgets/credentials.py:
    Orange3 - {}: null
    CredentialManager:
        ? "\"\"\n    Class for storage of passwords in the system keyring service.\n\
            \    All attributes of this class are safely stored.\n\n    Args:\n  \
            \      service_name (str): service name used for storing in keyring.\n\
            \n    Examples:\n        >>> cm = CredentialManager('Widget Name')\n \
            \       >>> cm.some_secret = 'api-key-1234'\n        >>> cm.some_secret\n\
            \        'api-key-1234'\n        >>> del cm.some_secret\n        >>> cm.some_secret\n\
            \    \"\""
        : null
        __init__:
            __service_name: null
        service_name:
            __service_name: null
        __setattr__:
            Failed to set secret '%s' of '%r'.: null
        __getattr__:
            Failed to get secret '%s' of '%r'.: null
        __delattr__:
            Failed to delete secret '%s' of '%r'.: null
Orange/widgets/widgetTemplate.py:
    OWWidgetName:
        Widget Name: null
        orange.widgets.widget_category.widget_name: null
        icons/Unknown.svg: null
        list: null
        of: null
        keywords: null
        Name: null
        handler: null
Orange/widgets/io.py:
    ImgFormat: null
    PngFormat: null
    SvgFormat: null
    ClipboardFormat: null
    PdfFormat: null
    MatplotlibFormat: null
    MatplotlibPDFFormat: null
Orange/widgets/__init__.py:
    ? '""


        ""'
    : null
    widget_discovery:
        Orange3: null
        Orange.widgets.data: null
        Orange.widgets.visualize: null
        Orange.widgets.model: null
        Orange.widgets.evaluate: null
        Orange.widgets.unsupervised: null
        Transform: null
        '#FF9D5E': null
        data/icons/Transform.svg: null
    '{DEVELOP_ROOT}/doc/visual-programming/build/htmlhelp/index.html': null
    data: null
    share/help/en/orange3/htmlhelp/index.html: null
    https://docs.biolab.si/orange/3/visual-programming/: null
Orange/widgets/settings.py:
    ? '""Widget Settings and Settings Handlers


        Settings are used to declare widget attributes that persist through sessions.

        When widget is removed or saved to a schema file, its settings are packed,

        serialized and stored. When a new widget is created, values of attributes

        marked as settings are read from disk. When schema is loaded, attribute values

        are set to one stored in schema.


        Each widget has its own SettingsHandler that takes care of serializing and

        storing of settings and SettingProvider that is incharge of reading and

        writing the setting values.


        All widgets extending from OWWidget use SettingsHandler, unless they

        declare otherwise. SettingsHandler ensures that setting attributes

        are replaced with default (last used) setting values when the widget is

        initialized and stored when the widget is removed.


        Widgets with settings whose values depend on the widget inputs use

        settings handlers based on ContextHandler. These handlers have two

        additional methods, open_context and close_context.


        open_context is called when widgets receives new data. It finds a suitable

        context and sets the widget attributes to the values stored in context.

        If no suitable context exists, a new one is created and values from widget

        are copied to it.


        close_context stores values that were last used on the widget to the context

        so they can be used alter. It should be called before widget starts modifying

        (initializing) the value of the setting attributes.

        ""'
    : null
    Setting: null
    SettingsHandler: null
    SettingProvider: null
    ContextSetting: null
    Context: null
    ContextHandler: null
    IncompatibleContext: null
    rename_setting: null
    widget_settings_dir: null
    DomainContextHandler:
        ? "\"\"Context handler for widgets with settings that depend on\n    the input\
            \ dataset. Suitable settings are selected based on the\n    data domain.\"\
            \""
        : null
        __init__:
            '{} is not a valid parameter for DomainContextHandler': null
        encode_domain:
            ? "\"\"\n        domain: Orange.data.domain to encode\n        return:\
                \ dict mapping attribute name to type or list of values\n        \
                \        (based on the value of self.match_values attribute)\n   \
                \     \"\""
            : null
        encode_variables:
            ? "\"\"Encode variables to a list mapping name to variable type\n    \
                \    or a list of values.\"\""
            : null
        new_context:
            '""Create a new context.""': null
        encode_setting:
            'Variables must be stored as ContextSettings; ': null
            change {setting.name} to ContextSetting.: null
        decode_setting:
            get_var:
                Cannot decode variable without domain: null
        match_list:
            ? "\"\"Match a list of values with the given context.\n        returns\
                \ a tuple containing number of matched and all values.\n        \"\
                \""
            : null
        match_value:
            '""Match a single value ""': null
        is_valid_item:
            ? "\"\"Return True if given item can be used with attrs and metas\n\n\
                \        Subclasses can override this method to checks data in alternative\n\
                \        representations.\n        \"\""
            : null
    PerfectDomainContextHandler:
        ? "\"\"Context handler that matches a context only when\n    the same domain\
            \ is available.\n\n    It uses a different encoding than the DomainContextHandler.\n\
            \    \"\""
        : null
        new_context:
            '""Same as DomainContextHandler, but also store class_vars""': null
        clone_context:
            ? "\"\"Copy of context is always valid, since widgets are using\n    \
                \    the same domain.\"\""
            : null
        encode_domain:
            ? "\"\"Encode domain into tuples (name, type)\n        A tuple is returned\
                \ for each of attributes, class_vars and metas.\n        \"\""
            : null
        match:
            '""Context only matches when domains are the same""': null
        encode_setting:
            ? "\"\"Same as is domain context handler, but handles separately stored\n\
                \        class_vars.\"\""
            : null
    ClassValuesContextHandler:
        ? "\"\"Context handler used for widgets that work with\n    a single discrete\
            \ variable\"\""
        : null
    SettingsPrinter: null
    migrate_str_to_variable:
        ? "\"\"\n    Change variables stored as `(str, int)` to `(Variable, int)`.\n\
            \n    Args:\n        settings (Context): context that is being migrated\n\
            \        names (sequence): names of settings to be migrated. If omitted,\n\
            \            all settings with values `(str, int)` are migrated.\n   \
            \ \"\""
        : null
Orange/widgets/gui.py:
    ? '""

        Wrappers for controls used in widgets

        ""'
    : null
    OWComponent: null
    OrangeUserRole: null
    TableView: null
    resource_filename: null
    miscellanea: null
    setLayout: null
    separator: null
    rubber: null
    widgetBox: null
    hBox: null
    vBox: null
    indentedBox: null
    widgetLabel: null
    label: null
    spin: null
    doubleSpin: null
    checkBox: null
    lineEdit: null
    button: null
    toolButton: null
    comboBox:
        valueType: null
        Argument 'valueType' is deprecated and ignored: null
    radioButtons: null
    radioButtonsInBox: null
    appendRadioButton: null
    hSlider: null
    labeledSlider: null
    valueSlider: null
    auto_commit: null
    auto_send: null
    auto_apply: null
    ProgressBar: null
    VerticalLabel: null
    tabWidget: null
    createTabPage: null
    table: null
    tableItem: null
    VisibleHeaderSectionContextEventFilter: null
    checkButtonOffsetHint: null
    toolButtonSizeHint: null
    FloatSlider: null
    ControlGetter: null
    VerticalScrollArea: null
    CalendarWidgetWithTime: null
    DateTimeEditWCalendarTime: null
    BarRatioRole: null
    BarBrushRole: null
    SortOrderRole: null
    LinkRole: null
    BarItemDelegate: null
    IndicatorItemDelegate: null
    LinkStyledItemDelegate: null
    ColoredBarItemDelegate: null
    HorizontalGridDelegate: null
    VerticalItemDelegate: null
    ValueCallback: null
    is_macstyle: null
    createAttributePixmap:
        ? "\"\"\n    Create a QIcon with a given character. The icon is 13 pixels\
            \ high and wide.\n\n    :param char: The character that is printed in\
            \ the icon\n    :type char: str\n    :param background: the background\
            \ color (default: black)\n    :type background: QColor\n    :param color:\
            \ the character color (default: white)\n    :type color: QColor\n    :rtype:\
            \ QIcon\n    \"\""
        : null
    attributeIconDict: null
    attributeItem:
        ? "\"\"\n    Construct a pair (icon, name) for inserting a variable into a\
            \ combo or\n    list box\n\n    :param var: variable\n    :type var: Orange.data.Variable\n\
            \    :rtype: tuple with QIcon and str\n    \"\""
        : null
    listView:
        uniformItemSizes: null
    ListViewWithSizeHint: null
    listBox:
        ? "\"\"\n    Insert a list box.\n\n    The value with which the box's value\
            \ synchronizes (`master.<value>`)\n    is a list of indices of selected\
            \ items.\n\n    :param widget: the widget into which the box is inserted\n\
            \    :type widget: QWidget or None\n    :param master: master widget\n\
            \    :type master: OWWidget or OWComponent\n    :param value: the name\
            \ of the master's attribute with which the value is\n        synchronized\
            \ (list of ints - indices of selected items)\n    :type value: str\n \
            \   :param labels: the name of the master's attribute with the list of\
            \ items\n        (as strings or tuples with icon and string)\n    :type\
            \ labels: str\n    :param box: tells whether the widget has a border,\
            \ and its label\n    :type box: int or str or None\n    :param callback:\
            \ a function that is called when the selection state is\n        changed\n\
            \    :type callback: function\n    :param selectionMode: selection mode\
            \ - single, multiple etc\n    :type selectionMode: QAbstractItemView.SelectionMode\n\
            \    :param enableDragDrop: flag telling whether drag and drop is available\n\
            \    :type enableDragDrop: bool\n    :param dragDropCallback: callback\
            \ function on drop event\n    :type dragDropCallback: function\n    :param\
            \ dataValidityCallback: function that check the validity on enter\n  \
            \      and move event; it should return either `ev.accept()` or `ev.ignore()`.\n\
            \    :type dataValidityCallback: function\n    :param sizeHint: size hint\n\
            \    :type sizeHint: QSize\n    :rtype: OrangeListBox\n    \"\""
        : null
    OrangeListBox:
        ? "\"\"\n    List box with drag and drop functionality. Function :obj:`listBox`\n\
            \    constructs instances of this class; do not use the class directly.\n\
            \n    .. attribute:: master\n\n        The widget into which the listbox\
            \ is inserted.\n\n    .. attribute:: ogLabels\n\n        The name of the\
            \ master's attribute that holds the strings with items\n        in the\
            \ list box.\n\n    .. attribute:: ogValue\n\n        The name of the master's\
            \ attribute that holds the indices of selected\n        items.\n\n   \
            \ .. attribute:: enableDragDrop\n\n        A flag telling whether drag-and-drop\
            \ is enabled.\n\n    .. attribute:: dragDropCallback\n\n        A callback\
            \ that is called at the end of drop event.\n\n    .. attribute:: dataValidityCallback\n\
            \n        A callback that is called on dragEnter and dragMove events and\
            \ returns\n        either `ev.accept()` or `ev.ignore()`.\n\n    .. attribute::\
            \ defaultSizeHint\n\n        The size returned by the `sizeHint` method.\n\
            \    \"\""
        : null
        __init__:
            ? "\"\"\n        :param master: the master widget\n        :type master:\
                \ OWWidget or OWComponent\n        :param enableDragDrop: flag telling\
                \ whether drag and drop is enabled\n        :type enableDragDrop:\
                \ bool\n        :param dragDropCallback: callback for the end of drop\
                \ event\n        :type dragDropCallback: function\n        :param\
                \ dataValidityCallback: callback that accepts or ignores dragEnter\n\
                \            and dragMove events\n        :type dataValidityCallback:\
                \ function with one argument (event)\n        :param sizeHint: size\
                \ hint\n        :type sizeHint: QSize\n        :param args: optional\
                \ arguments for the inherited constructor\n        \"\""
            : null
        updateGeometries:
            _updatingGeometriesNow: null
    TableValueRole: null
    TableClassValueRole: null
    TableDistribution: null
    TableVariable: null
    TableBarItem:
        color_schema: null
        __init__:
            ? "\"\"\n        :param QObject parent: Parent object.\n        :param\
                \ QColor color: Default color of the distribution bar.\n        :param\
                \ color_schema:\n            If not None it must be an instance of\n\
                \            :class:`OWColorPalette.ColorPaletteGenerator` (note:\
                \ this\n            parameter, if set, overrides the ``color``)\n\
                \        :type color_schema: :class:`OWColorPalette.ColorPaletteGenerator`\n\
                \        \"\""
            : null
    palette_combo_box: null
    __AttributeIconDict:
        __getitem__:
            c: null
            N: null
            d: null
            C: null
            s: null
            S: null
            t: null
            T: null
            '?': null
    ControlledList:
        ? "\"\"\n    A class derived from a list that is connected to a\n    :obj:`QListBox`:\
            \ the list contains indices of items that are\n    selected in the list\
            \ box. Changing the list content changes the\n    selection in the list\
            \ box.\n    \"\""
        : null
    HScrollStepMixin:
        ? "\"\"\n    Overrides default TableView horizontal behavior (scrolls 1 page\
            \ at a time)\n    to a friendlier scroll speed akin to that of vertical\
            \ scrolling.\n    \"\""
        : null
        wheelEvent:
            darwin: null
Orange/widgets/unsupervised/owdistancefile.py:
    OWDistanceFile:
        Distance File: null
        orange.widgets.unsupervised.distancefile: null
        Read distances from a file.: null
        icons/DistanceFile.svg: null
        load: null
        read: null
        open: null
        Outputs:
            Distances: null
        __init__:
            Distance File: null
            '...': null
            Reload: null
            Info: null
            No data loaded.: null
            ' ': null
            Browse documentation datasets: null
        browse_file:
            File: null
            Cannot find the directory with documentation datasets: null
            ~/: null
            Open Distance File: null
            (*.dst): null
        open_file:
            .: null
            Loading '{}' from the current directory.: null
            (none): null
            No data loaded: null
            Invalid file format: null
            Data was not loaded due to an error.: null
            '{} points(s), ': null
            unlabelled: null
            labelled: null
        send_report:
            No data was loaded.: null
            File name: null
    OWDistanceFileDropHandler:
        parametersFromFile:
            recent_paths: null
        canDropFile:
            .dst: null
    __main__: null
Orange/widgets/unsupervised/owlouvainclustering.py:
    Euclidean: null
    l2: null
    Manhattan: null
    l1: null
    Cosine: null
    cosine: null
    OWLouvainClustering:
        Louvain Clustering: null
        Detects communities in a network of nearest neighbors.: null
        icons/LouvainClustering.svg: null
        Inputs:
            Data: null
        Outputs:
            Network: null
        Information:
            Press commit to recompute clusters and send new data: null
        Error:
            No features in data: null
        __init__:
            Info: null
            No data on input.: null
            Preprocessing: null
            normalize: null
            Normalize data: null
            apply_pca: null
            Apply PCA preprocessing: null
            pca_components: null
            'PCA Components: ': null
            Graph parameters: null
            metric_idx: null
            Distance metric: null
            k_neighbors: null
            k neighbors: null
            resolution: null
            Resolution: null
            '%.1f': null
            'The resolution parameter affects the number of clusters to find. ': null
            'Smaller values tend to produce more clusters and larger values ': null
            retrieve less clusters.: null
            auto_commit: null
        _set_modified:
            ? "\"\"\n        Mark the widget (GUI) as containing modified state.\n\
                \        \"\""
            : null
        cancel:
            '""Cancel any running jobs.""': null
        commit:
            Running...: null
        __set_partial_results:
            pca_projection: null
            graph: null
            partition: null
        __set_results:
            '%d clusters found.': null
        _send_data:
            Cluster: null
            C%d: null
        set_data:
            Clustering not yet run.: null
        clear:
            No data on input.: null
        send_report:
            ', {number} component{s}': null
            Normalize data: null
            PCA preprocessing: null
            Metric: null
            k neighbors: null
            Resolution: null
        migrate_settings:
            context_settings: null
            apply_pca: null
            k_neighbors: null
            metric_idx: null
            normalize: null
            pca_components: null
            resolution: null
    run_on_data:
        ? "\"\"\n    Run the louvain clustering on `data`.\n\n    state is used to\
            \ report progress and partial results. Returns early if\n    `task.is_interuption_requested()`\
            \ returns true.\n\n    Parameters\n    ----------\n    data : Table\n\
            \        Data table\n    normalize : bool\n        If `True`, the data\
            \ is first normalized before computing PCA.\n    pca_components : Optional[int]\n\
            \        If not `None` then the data is first projected onto first\n \
            \       `pca_components` principal components.\n    k_neighbors : int\n\
            \        Passed to `table_to_knn_graph`\n    metric : str\n        Passed\
            \ to `table_to_knn_graph`\n    resolution : float\n        Passed to `Louvain`\n\
            \    state : TaskState\n\n    Returns\n    -------\n    res : Results\n\
            \    \"\""
        : null
        Computing PCA...: null
        pca_projection: null
        Building graph...: null
        graph: null
        Detecting communities...: null
        partition: null
    run_on_graph:
        ? "\"\"\n    Run the louvain clustering on `graph`.\n    \"\""
        : null
        Detecting communities...: null
        partition: null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owdistances.py:
    Euclidean: null
    Manhattan: null
    Cosine: null
    Jaccard: null
    Spearman: null
    Absolute Spearman: null
    Pearson: null
    Absolute Pearson: null
    Hamming: null
    Mahalanobis: null
    Bhattacharyya: null
    DistanceRunner:
        run:
            Calculating...: null
            axis: null
            impute: null
            callback: null
            normalize: null
    OWDistances:
        Distances: null
        Compute a matrix of pairwise distances.: null
        icons/Distance.svg: null
        Inputs:
            Data: null
        Outputs:
            Distances: null
        Error:
            No numeric features: null
            No binary features: null
            '{} requires dense data.': null
            Not enough memory: null
            Problem in calculation:\n{}: null
            Mahalanobis handles up to 1000 {}.: null
        Warning:
            Ignoring categorical features: null
            Ignoring non-binary features: null
            Missing values were imputed: null
        __init__:
            axis: null
            Rows: null
            Columns: null
            Distances between: null
            Distance Metric: null
            metric_idx: null
            normalized_dist: null
            Normalized: null
            All dimensions are (implicitly) scaled to a common: null
            scale to normalize the influence across the domain.: null
            autocommit: null
        compute_distances:
            _fix_discrete:
                fallback: null
            _check_tractability:
                rows: null
                columns: null
        send_report:
            Distances Between: null
            Rows: null
            Columns: null
            Metric: null
        migrate_settings:
            normalized_dist: null
            metric_idx: null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owsavedistances.py:
    OWSaveDistances:
        Save Distance Matrix: null
        Save distance matrix to an output file.: null
        icons/SaveDistances.svg: null
        distance matrix: null
        save: null
        Distance File (*.dst): null
        Warning:
            Associated data was not saved.: null
            Data associated with {} was not saved.: null
        Inputs:
            Distances: null
        do_save:
            columns: null
            rows: null
        send_report:
            'Input:': null
            none: null
            File name: null
            not set: null
        _description:
            ' and ': null
            row: null
            column: null
            ; {labels} labels: null
            '{len(dist)}-dimensional matrix{labels}': null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owkmeans.py:
    ClusterTableModel:
        data:
            '{:.3f}': null
            NA: null
    OWKMeans:
        k-Means: null
        'k-Means clustering algorithm with silhouette-based ': null
        quality estimation.: null
        icons/KMeans.svg: null
        kmeans: null
        clustering: null
        Inputs:
            Data: null
        Outputs:
            Annotated Data: null
            Centroids: null
        Error:
            'Clustering failed\nError: {}': null
            Too few ({}) unique data instances for {} clusters: null
            Data is missing features.: null
        Warning:
            Silhouette scores are not computed for >{} samples: null
            Too few ({}) unique data instances for {} clusters: null
            Sparse data cannot be normalized: null
        Initialize with KMeans++: null
        k-means++: null
        Random initialization: null
        random: null
        migrate_settings:
            auto_apply: null
            auto_commit: null
        __init__:
            optimize_k: null
            Number of Clusters: null
            'Fixed:': null
            k: null
            From: null
            k_from: null
            to: null
            k_to: null
            Preprocessing: null
            normalize: null
            Normalize columns: null
            Initialization: null
            smart_init: null
            'Re-runs: ': null
            n_init: null
            'Maximum iterations: ': null
            max_iterations: null
            Silhouette Scores: null
            auto_commit: null
        enough_data_instances:
            '""k cannot be larger than the number of data instances.""': null
        __launch_tasks:
            '""Execute clustering in separate threads for all given ks.""': null
        send_data:
            Cluster: null
            C%d: null
            Silhouette: null
            centroids: null
            '{self.data.name} centroids': null
        send_report:
            Number of clusters: null
            Optimization: null
            '{}, {} re-runs limited to {} steps': null
            Data: null
            Silhouette scores for different numbers of clusters: null
    __main__: null
    heart_disease: null
Orange/widgets/unsupervised/owpca.py:
    component variance: null
    cumulative variance: null
    OWPCA:
        PCA: null
        Principal component analysis with a scree-diagram.: null
        icons/PCA.svg: null
        principal component analysis: null
        linear transformation: null
        Inputs:
            Data: null
        Outputs:
            Transformed Data: null
            Transformed data: null
            Data: null
            Components: null
            PCA: null
        plot.plotItem: null
        Warning:
            'All components of the PCA are trivial (explain 0 variance). ': null
            Input data is constant (or near constant).: null
        Error:
            At least 1 feature is required: null
            At least 1 data instance is required: null
        __init__:
            Components Selection: null
            ncomponents: null
            All: null
            variance_covered: null
            '%': null
            'Components:': null
            'Explained variance:': null
            Options: null
            normalize: null
            Normalize variables: null
            maxp: null
            Show only first: null
            auto_commit: null
            Principal Components: null
            Proportion of variance: null
        set_data:
            Data has been sampled: null
        _nselected_components:
            '""Return the number of selected components.""': null
        _update_axis:
            bottom: null
        commit:
            variance: null
            components: null
            PC{}: null
        send_report:
            Normalize data: null
            Selected components: null
            Explained variance: null
            '{:.3f} %': null
        migrate_settings:
            variance_covered: null
            ncomponents: null
            decomposition_idx: null
            batch_size: null
            address: null
            auto_update: null
    __main__: null
    housing: null
Orange/widgets/unsupervised/__init__.py:
    ? '""

        ============

        Unsupervised

        ============


        Unsupervised learning.


        ""'
    : null
    Unsupervised: null
    Unsupervised learning.: null
    '#CAE1EF': null
    icons/Category-Unsupervised.svg: null
Orange/widgets/unsupervised/owtsne.py:
    Task:
        '""Completely determines the t-SNE task spec and intermediate results.""': null
    prepare_tsne_obj:
        '""Automatically determine the best parameters for the given data set.""': null
        approx: null
        fft: null
        exact: null
        bh: null
    TSNERunner:
        compute_pca:
            Computing PCA...: null
            pca_projection: null
        compute_initialization:
            Preparing initialization...: null
            initialization: null
        compute_affinities:
            Finding nearest neighbors...: null
            affinities: null
        compute_tsne:
            Running optimization...: null
            tsne_embedding: null
            run_optimization:
                ? "\"\"Run t-SNE optimization phase. Return value indicates whether\
                    \ or\n            not the optimization was interrupted.\"\""
                : null
                tsne_embedding: null
        run:
            pca: null
            init: null
            aff: null
            tsne: null
    invalidated:
        __str__:
            '%s(%s)': null
            ', ': null
            '=': null
            pca_projection: null
            affinities: null
            tsne_embedding: null
    OWtSNE:
        t-SNE: null
        Two-dimensional data projection with t-SNE.: null
        icons/TSNE.svg: null
        tsne: null
        t-SNE-x: null
        t-SNE-y: null
        Information:
            'The parameter settings have been changed. Press ': null
            \"Start\" to rerun with the new settings.: null
        Error:
            Input data needs at least 2 rows: null
            Input data needs at least 2 attributes: null
            Input data is constant: null
            No projection due to no valid data: null
        _add_controls_start_box:
            Optimize: null
            perplexity: null
            'Perplexity:': null
            multiscale: null
            Preserve global structure: null
            exaggeration: null
            'Exaggeration:': null
            pca_components: null
            'PCA components:': null
            normalize: null
            Normalize data: null
            Start: null
        _stop_running_task:
            Start: null
        _set_modified:
            '""Mark the widget (GUI) as containing modified state.""': null
        check_data:
            ignore: null
            Degrees of freedom .*: null
        _toggle_run:
            Resume: null
        enable_controls:
            Data normalization is not supported on sparse matrices.: null
        run:
            Stop: null
        on_partial_result:
            pca_projection: null
            initialization: null
            affinities: null
            tsne_embedding: null
            Unrecognized partial result called with `%s`: null
        on_done:
            Start: null
        clear:
            '""Clear widget state. Note that this doesn''t clear the data.""': null
            Start: null
        migrate_settings:
            selection_indices: null
            selection: null
            max_iter: null
        migrate_context:
            attr_color: null
            graph: null
            attr_size: null
            attr_shape: null
            attr_label: null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owdistancematrix.py:
    OWDistanceMatrix:
        Distance Matrix: null
        View distance matrix.: null
        icons/DistanceMatrix.svg: null
        Inputs:
            Distances: null
        Outputs:
            Distances: null
            Selected Data: null
            Table: null
        __init__:
            annotation_idx: null
            'Labels: ': null
            None: null
            Enumeration: null
            auto_commit: null
        set_distances:
            None: null
            Enumerate: null
            Attribute names: null
            Name: null
        _update_labels:
            Attribute names: null
        send_report:
            _rgb:
                rgb({}, {}, {}): null
            <table style="border-collapse:collapse">: null
            <tr><td></td>: null
            '<td style="background-color: {}">{}</td>': null
            </tr>: null
            <tr>: null
            '<td style="background-color: {};': null
            border-top:1px solid {}; border-left:1px solid {};">: null
            '{:.3f}</td>': null
            </table>: null
            <table>: null
            '<td style="background-color: {}">{:.3f}</td>': null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owdistancetransformation.py:
    OWDistanceTransformation:
        Distance Transformation: null
        Transform distances according to selected criteria.: null
        icons/DistancesTransformation.svg: null
        Inputs:
            Distances: null
        Outputs:
            Distances: null
        No normalization: null
        To interval [0, 1]: null
        To interval [-1, 1]: null
        'Sigmoid function: 1/(1+exp(-X))': null
        No inversion: null
        -X: null
        1 - X: null
        max(X) - X: null
        1/X: null
        __init__:
            normalization_method: null
            Normalization: null
            inversion_method: null
            Inversion: null
            autocommit: null
        send_report:
            inversion ({}): null
            normalization ({}): null
            Model parameters: null
            Transformation: null
            ', ': null
            None: null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owmanifoldlearning.py:
    ManifoldParametersEditor:
        _create_spin_parameter:
            '0': null
        _create_combo_parameter:
            _values: null
            _index: null
        __combo_parameter_update:
            _index: null
            _values: null
        _create_radio_parameter:
            _values: null
            _index: null
        __radio_parameter_update:
            _index: null
            _values: null
    TSNEParametersEditor:
        euclidean: null
        manhattan: null
        chebyshev: null
        jaccard: null
        pca: null
        PCA: null
        random: null
        Random: null
        __init__:
            metric: null
            'Metric:': null
            perplexity: null
            'Perplexity:': null
            early_exaggeration: null
            'Early exaggeration:': null
            learning_rate: null
            'Learning rate:': null
            n_iter: null
            'Max iterations:': null
            initialization: null
            'Initialization:': null
    MDSParametersEditor:
        PCA: null
        PCA (Torgerson): null
        random: null
        Random: null
        __init__:
            max_iter: null
            'Max iterations:': null
            init_type: null
            'Initialization:': null
        get_parameters:
            n_init: null
    IsomapParametersEditor:
        __init__:
            n_neighbors: null
            'Neighbors:': null
    LocallyLinearEmbeddingParametersEditor:
        standard: null
        Standard: null
        modified: null
        Modified: null
        hessian: null
        Hessian eigenmap: null
        ltsa: null
        Local: null
        __init__:
            method: null
            'Method:': null
            n_neighbors: null
            'Neighbors:': null
            max_iter: null
            'Max iterations:': null
    SpectralEmbeddingParametersEditor:
        nearest_neighbors: null
        Nearest neighbors: null
        rbf: null
        RBF kernel: null
        __init__:
            affinity: null
            'Affinity:': null
    OWManifoldLearning:
        Manifold Learning: null
        Nonlinear dimensionality reduction.: null
        icons/Manifold.svg: null
        Inputs:
            Data: null
        Outputs:
            Transformed Data: null
            Transformed data: null
        Error:
            'For chosen method and components, ': null
            neighbors must be greater than {}: null
            '{}': null
            Sparse data is not supported.: null
            Out of memory: null
        Warning:
            Disconnected graph, embedding may not work: null
        migrate_settings:
            tsne_editor: null
            init_index: null
            initialization_index: null
            metric_index: null
        __init__:
            Method: null
            manifold_method_index: null
            Output: null
            n_components: null
            'Components:': null
            '0': null
        commit:
            _handle_disconnected_graph_warning:
                Graph is not fully connected: null
            C{}: null
            'for method=''hessian'', n_neighbors ': null
            must be greater than [n_components: null
            ' * (n_components + 3) / 2]': null
            '{}': null
        send_report:
            Method: null
            Method parameters: null
            Data: null
    __main__: null
    brown-selected: null
Orange/widgets/unsupervised/owmds.py:
    stress:
        euclidean: null
    run_mds:
        Running...: null
        precomputed: null
        eps: null
    OWMDSGraph:
        update_pairs:
            pairs: null
    OWMDS:
        MDS: null
        'Two-dimensional data projection by multidimensional ': null
        scaling constructed from a distance matrix.: null
        icons/MDS.svg: null
        multidimensional scaling: null
        multi dimensional scaling: null
        Inputs:
            Distances: null
        Every iteration: null
        Every 5 steps: null
        Every 10 steps: null
        Every 25 steps: null
        Every 50 steps: null
        None: null
        mds-x: null
        mds-y: null
        Error:
            Input data needs at least 2 rows: null
            Input matrix must be at least 2x2: null
            Data has no attributes: null
            Data and distances dimensions do not match.: null
            Out of memory: null
            Error during optimization\n{}: null
        __init__:
            Stress: null
        _add_controls:
            'Show similar pairs:': null
            connected_pairs: null
        _add_controls_optimization:
            Optimize: null
            PCA: null
            Randomize: null
            Jitter: null
            refresh_rate: null
            'Refresh: ': null
            Start: null
        set_data:
            ? "\"\"Set the input dataset.\n\n        Parameters\n        ----------\n\
                \        data : Optional[Table]\n        \"\""
            : null
        set_disimilarity:
            ? "\"\"Set the dissimilarity (distance) matrix.\n\n        Parameters\n\
                \        ----------\n        matrix : Optional[Orange.misc.DistMatrix]\n\
                \        \"\""
            : null
        _initialize:
            labels: null
        init_attr_values:
            labels: null
        _toggle_run:
            Resume: null
        _run:
            Stop: null
            PCA: null
            random: null
        on_done:
            Start: null
        on_exception:
            Start: null
        do_initialization:
            Start: null
        get_size_data:
            Stress: null
        migrate_settings:
            label_only_selected: null
            symbol_opacity: null
            alpha_value: null
            symbol_size: null
            point_width: null
            jitter: null
            jitter_size: null
            graph: null
            auto_commit: null
            autocommit: null
            connected_pairs: null
        migrate_context:
            color_value: null
            attr_color: null
            shape_value: null
            attr_shape: null
            size_value: null
            attr_size: null
            label_value: null
            attr_label: null
            Stress: null
            graph: null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owhierarchicalclustering.py:
    OWHierarchicalClustering:
        Hierarchical Clustering: null
        'Display a dendrogram of a hierarchical clustering ': null
        constructed from the input distance matrix.: null
        icons/HierarchicalClustering.svg: null
        Inputs:
            Distances: null
        Outputs:
            Selected Data: null
        Enumeration: null
        Name: null
        Enumerate: null
        scene: null
        None: null
        Error:
            Some distances are infinite: null
        __init__:
            linkage: null
            Linkage: null
            Annotations: null
            annotation: null
            pruning: null
            Pruning: null
            None: null
            max_depth: null
            'Max depth:': null
            selection_method: null
            Selection: null
            Manual: null
            'Height ratio:': null
            cut_ratio: null
            '%': null
            'Top N:': null
            top_n: null
            zoom_factor: null
            Zoom: null
            Zoom in: null
            Zoom out: null
            Reset zoom: null
            autocommit: null
            top: null
            bottom: null
        set_distances:
            Empty distance matrix: null
        _set_items:
            Enumeration: null
            Name: null
        _update_labels:
            None: null
            Enumeration: null
            Name: null
            ', ': null
        _restore_selection:
            ? "\"\"\n        Restore the (manual) node selection state.\n\n      \
                \  Return True if successful; False otherwise.\n        \"\""
            : null
        _set_selected_nodes:
            ? "\"\"\n        Set the nodes in `selection` to be the current selected\
                \ nodes.\n\n        The selection nodes must be subtrees of the current\
                \ `_displayed_root`.\n        \"\""
            : null
        commit:
            items: null
            Cluster: null
            C{i + 1}: null
            Other: null
            cluster: null
        _activate_cut_line:
            '""Activate cut line selection an set cut value to `pos.x()`.""': null
        save_state:
            ? "\"\"\n        Save state for `set_restore_state`\n        \"\""
            : null
            version: null
            selection_state: null
        set_restore_state:
            ? "\"\"\n        Restore session data from a saved state.\n\n        Parameters\n\
                \        ----------\n        state : Dict[str, Any]\n\n        NOTE\n\
                \        ----\n        This is method called while the instance (self)\
                \ is being constructed,\n        even before its `__init__` is called.\
                \ Consider `self` to be only a\n        `QObject` at this stage.\n\
                \        \"\""
            : null
            selection_state: null
        send_report:
            manual: null
            at {:.1f} of height: null
            top {} clusters: null
            Linkage: null
            Annotation: null
            Prunning: null
            '{} levels': null
            Selection: null
    Single: null
    Average: null
    Weighted: null
    Complete: null
    Ward: null
    SaveStateSettingsHandler:
        ? "\"\"\n    A settings handler that delegates session data store/restore\
            \ to the\n    OWWidget instance.\n\n    The OWWidget subclass must implement\
            \ `save_state() -> Dict[str, Any]` and\n    `set_restore_state(state:\
            \ Dict[str, Any])` methods.\n    \"\""
        : null
        initialize:
            __session_state_data: null
        pack_data:
            __session_state_data: null
    SliderLine:
        '""A movable slider line.""': null
    clusters_at_height:
        ? "\"\"Return a list of clusters by cutting the clustering at `height`.\n\
            \    \"\""
        : null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owcorrespondence.py:
    OWCorrespondenceAnalysis:
        Correspondence Analysis: null
        Correspondence analysis for categorical multivariate data.: null
        icons/CorrespondenceAnalysis.svg: null
        Inputs:
            Data: null
        Outputs:
            Coordinates: null
        plot.plotItem: null
        Error:
            Empty dataset: null
            No categorical data: null
        __init__:
            Variables: null
            Axes: null
            component_x: null
            'X:': null
            component_y: null
            'Y:': null
            Contribution to Inertia: null
            \n: null
            auto_commit: null
        set_data:
            ignore: null
            combo box 'component_[xy]' .*: null
        commit:
            Component {i + 1}: null
            Variable: null
            Value: null
        _update_CA:
            ignore: null
            combo box 'component_[xy]' .*: null
        update_XY:
            '{}': null
        _setup_plot:
            get_minmax:
                inf: null
                -inf: null
            bottom: null
            Component {} ({:.1f}%): null
            left: null
        _update_info:
            \n\n: null
            'Axis 1: {:.2f}\n': null
            'Axis 2: {:.2f}': null
        send_report:
            Data instances: null
            Selected variable: null
            Selected variables: null
            '{} and {}': null
            ', ': null
    burt_table:
        ? "\"\"\n    Construct a 'Burt table' (all values cross-tabulation) for variables.\n\
            \n    Return and ordered list of (variable, value) pairs and a\n    numpy.ndarray\
            \ contingency\n\n    :param Orange.data.Table data: Data table.\n    :param\
            \ variables: List of variables (discrete).\n    :type variables: list\
            \ of Orange.data.DiscreteVariable\n\n    \"\""
        : null
    correspondence:
        ? "\"\"\n    :param numpy.ndarray A:\n    \"\""
        : null
        ignore: null
    CA: null
    U: null
    D: null
    V: null
    row_factors: null
    col_factors: null
    row_sums: null
    column_sums: null
    __main__: null
    titanic: null
Orange/widgets/unsupervised/owsom.py:
    OWSOM:
        Self-Organizing Map: null
        Computation of self-organizing map.: null
        icons/SOM.svg: null
        SOM: null
        Inputs:
            Data: null
        Outputs:
            Selected Data: null
        view: null
        OptControls: null
        shape: null
        auto_dim: null
        spin_x: null
        spin_y: null
        initialization: null
        start: null
        Warning:
            SOM ignores categorical variables.: null
            Some data instances have undefined value of '{}'.: null
            '{} data instance{} with undefined value(s) {} not shown.': null
            Data contains a single numeric column.: null
        Error:
            Data contains no numeric columns.: null
            All rows contain at least one undefined value.: null
        __init__:
            SOM: null
            Hexagonal grid: null
            Square grid: null
            auto_dimension: null
            Set dimensions automatically: null
            ×: null
            initialization: null
            Initialize with PCA: null
            Random initialization: null
            Replicable random: null
            Restart: null
            Color: null
            attr_color: null
            (Same color): null
            pie_charts: null
            Show pie charts: null
            size_by_instances: null
            Size by number of instances: null
        set_data:
            set_warnings:
                is: null
                s: null
                are: null
        enable_controls:
            Start: null
            Stop: null
        _draw_same_color:
            '{n} instances': null
        _get_color_column:
            ignore: null
        _tooltip:
            \N{NON-BREAKING HYPHEN}: null
            '<table style="white-space: nowrap">': null
            ? "\"\"\n            <tr>\n                <td>\n                    <font\
                \ color={color.name()}>■</font>\n                    <b>{escape(val).replace(\"\
                -\", nbhp)}</b>:\n                </td>\n                <td>\n  \
                \                  {n} ({n / tot * 100:.1f}&nbsp;%)\n            \
                \    </td>\n            </tr>\n            \"\""
            : null
            </table>: null
        update_output:
            Group: null
        _bin_names:
            < {labels[0]}: null
            '{x} - {y}': null
            ≥ {labels[-1]}: null
        send_report:
            Self-organizing map colored by '{self.attr_color.name}': null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owdistancemap.py:
    DistanceMapItem:
        ? "\"\"A distance matrix image with user selectable regions.\n    \"\""
        : null
        _cellAt:
            '""Return the i, j cell index at `pos` in local coordinates.""': null
        _cellCloseTo:
            '""Return the i, j cell index closest to `pos` in local coordinates.""': null
        hoverMoveEvent:
            '{}, {}: {:.3f}': null
    OWDistanceMap:
        Distance Map: null
        Visualize a distance matrix.: null
        icons/DistanceMap.svg: null
        Inputs:
            Distances: null
        Outputs:
            Selected Data: null
            Features: null
        grid_widget: null
        __init__:
            sorting: null
            Element Sorting: null
            None: null
            Clustering: null
            Clustering with ordered leaves: null
            Colors: null
            annotation_idx: null
            Annotations: null
            Enumeration: null
            autocommit: null
        set_distances:
            Empty distance matrix.: null
            'Cluster ordering was disabled due to the input ': null
            matrix being to big: null
            'Clustering was disabled due to the input ': null
        set_items:
            None: null
            Enumeration: null
            Attribute names: null
            Name: null
        _update_labels:
            Attribute names: null
        send_report:
            Sorting: null
            Annotations: null
    __main__: null
    iris: null
Orange/widgets/unsupervised/owdbscan.py:
    get_kth_distances:
        ? "\"\"\n    The function computes the epsilon parameter for DBSCAN through\
            \ method\n    proposed in the paper.\n    Parameters\n    ----------\n\
            \    data : Orange.data.Table\n        Visualisation coordinates - embeddings\n\
            \    metric : callable or str\n        The metric to compute the distance.\n\
            \    k : int\n        Number kth observed neighbour\n\n    Returns\n \
            \   -------\n    np.ndarray\n        Epsilon parameter for DBSCAN\n  \
            \  \"\""
        : null
    OWDBSCAN:
        DBSCAN: null
        Density-based spatial clustering.: null
        icons/DBSCAN.svg: null
        Inputs:
            Data: null
        Error:
            'Not enough unique data instances. ': null
            At least two are required.: null
        Euclidean: null
        euclidean: null
        Manhattan: null
        cityblock: null
        Cosine: null
        cosine: null
        __init__:
            Parameters: null
            min_samples: null
            Core point neighbors: null
            eps: null
            Neighborhood distance: null
            Distance Metric: null
            metric_idx: null
            normalize: null
            Normalize features: null
            auto_commit: null
            Data items sorted by score: null
            Distance to the k-th nearest neighbour: null
        _plot_graph:
            red: null
        send_data:
            Cluster: null
            C%d: null
            DBSCAN Core: null
            '0': null
            '1': null
    __main__: null
    iris.tab: null
Orange/widgets/tests/__init__.py:
    load_tests:
        _in_load_tests: null
        test*.py: null
Orange/widgets/tests/utils.py:
    EventSpy:
        ? "\"\"\n    A testing utility class (similar to QSignalSpy) to record events\n\
            \    delivered to a QObject instance.\n\n    Note\n    ----\n    Only\
            \ event types can be recorded (as QEvent instances are deleted\n    on\
            \ delivery).\n\n    Note\n    ----\n    Can only be used with a QCoreApplication\
            \ running.\n\n    Parameters\n    ----------\n    object : QObject\n \
            \       An object whose events need to be recorded.\n    etype : Union[QEvent.Type,\
            \ Sequence[QEvent.Type]\n        A event type (or types) that should be\
            \ recorded\n    \"\""
        : null
        wait:
            ? "\"\"\n        Start an event loop that runs until a spied event or\
                \ a timeout occurred.\n\n        Parameters\n        ----------\n\
                \        timeout : int\n            Timeout in milliseconds.\n\n \
                \       Returns\n        -------\n        res : bool\n           \
                \ True if the event occurred and False otherwise.\n\n        Example\n\
                \        -------\n        >>> app = QCoreApplication.instance() or\
                \ QCoreApplication([])\n        >>> obj = QObject()\n        >>> spy\
                \ = EventSpy(obj, QEvent.User)\n        >>> app.postEvent(obj, QEvent(QEvent.User))\n\
                \        >>> spy.wait()\n        True\n        >>> print(spy.events())\n\
                \        [1000]\n        \"\""
            : null
        events:
            ? "\"\"\n        Return a list of all (listened to) event types that occurred.\n\
                \n        Returns\n        -------\n        events : List[QEvent.Type]\n\
                \        \"\""
            : null
    excepthook_catch:
        ? "\"\"\n    Override `sys.excepthook` with a custom handler to record unhandled\n\
            \    exceptions.\n\n    Use this to capture or note exceptions that are\
            \ raised and\n    unhandled within PyQt slots or virtual function overrides.\n\
            \n    Note\n    ----\n    The exceptions are still dispatched to the original\
            \ `sys.excepthook`\n\n    Parameters\n    ----------\n    raise_on_exit\
            \ : bool\n        If True then the (first) exception that was captured\
            \ will be\n        reraised on context exit\n\n    Returns\n    -------\n\
            \    ctx : ContextManager\n        A context manager\n\n    Example\n\
            \    -------\n    >>> class Obj(QObject):\n    ...     signal = pyqtSignal()\n\
            \    ...\n    >>> o = Obj()\n    >>> o.signal.connect(lambda : 1/0)\n\
            \    >>> with excepthook_catch(raise_on_exit=False) as exc_list:\n   \
            \ ...    o.signal.emit()\n    ...\n    >>> print(exc_list)  # doctest:\
            \ +ELLIPSIS\n    [(<class 'ZeroDivisionError'>, ZeroDivisionError('division\
            \ by zero',), ...\n    \"\""
        : null
        'The sys.excepthook that was installed by ': null
        '''excepthook_catch'' context at enter is not ': null
        the one present at exit.: null
    simulate:
        ? "\"\"\n    Utility functions for simulating user interactions with Qt widgets.\n\
            \    \"\""
        : null
        combobox_run_through_all:
            ? "\"\"\n        Run through all items in a given combo box, simulating\
                \ the user\n        focusing the combo box and pressing the Down arrow\
                \ key activating\n        all the items on the way.\n\n        Unhandled\
                \ exceptions from invoked PyQt slots/virtual function overrides\n\
                \        are captured and reraised.\n\n        Parameters\n      \
                \  ----------\n        cbox : QComboBox\n        delay : int\n   \
                \         Run the event loop after the simulated key press (-1, the\
                \ default,\n            means no delay)\n        callback : callable\n\
                \            A callback that will be executed after every item change.\
                \ Takes no\n            parameters.\n\n        See Also\n        --------\n\
                \        QTest.keyClick\n        \"\""
            : null
        combobox_activate_index:
            ? "\"\"\n        Activate an item at `index` in a given combo box.\n\n\
                \        The item at index **must** be enabled and selectable.\n\n\
                \        Parameters\n        ----------\n        cbox : QComboBox\n\
                \        index : int\n        delay : int\n            Run the event\
                \ loop after the signals are emitted for `delay`\n            milliseconds\
                \ (-1, the default, means no delay).\n        \"\""
            : null
        combobox_index_of:
            ? "\"\"\n        Find the index of an **selectable** item in a combo box\
                \ whose `role`\n        data contains the given `value`.\n\n     \
                \   Parameters\n        ----------\n        cbox : QComboBox\n   \
                \     value : Any\n        role : Qt.ItemDataRole\n\n        Returns\n\
                \        -------\n        index : int\n            An index such that\
                \ `cbox.itemData(index, role) == value` **and**\n            the item\
                \ is enabled for selection or -1 if such an index could\n        \
                \    not be found.\n        \"\""
            : null
        combobox_activate_item:
            ? "\"\"\n        Find an **selectable** item in a combo box whose `role`\
                \ data\n        contains the given value and activate it.\n\n    \
                \    Raise an ValueError if the item could not be found.\n\n     \
                \   Parameters\n        ----------\n        cbox : QComboBox\n   \
                \     value : Any\n        role : Qt.ItemDataRole\n        delay :\
                \ int\n            Run the event loop after the signals are emitted\
                \ for `delay`\n            milliseconds (-1, the default, means no\
                \ delay).\n        \"\""
            : null
            '{!r} not in {}': null
    override_locale:
        '""Execute the wrapped code with a different locale.""': null
    contextMenu:
        ? "\"\"\n    Simulate a context menu event on `widget`.\n\n    `pos` is the\
            \ event origin specified in widget's local coordinates. If not\n    specified.\
            \ Then widget.rect().center() is used instead.\n    \"\""
        : null
    table_dense_sparse:
        ? "\"\"Run a single test case on both dense and sparse Orange tables.\n\n\
            \    Examples\n    --------\n    >>> @table_dense_sparse\n    ... def\
            \ test_something(self, prepare_table):\n    ...     data: Table  # The\
            \ table you want to test on\n    ...     data = prepare_table(data)  #\
            \ This converts the table to dense/sparse\n\n    \"\""
        : null
    possible_duplicate_table:
        iris: null
        ? "\"\"\n    Used for checking whether widget resolves possible domain duplicates.\n\
            \    If the programmer inputs name that will create duplicates and it\
            \ later fails,\n    that's on them.\n    \"\""
        : null
Orange/widgets/tests/base.py:
    WidgetTest:
        assert_domain_equal:
            ? "\"\"\n        Test domains for equality.\n\n        Unlike in domain1\
                \ == domain2 uses `Variable.__eq__`, which in case of\n        DiscreteVariable\
                \ ignores `values`, this method also checks that both\n        domain\
                \ have equal `values`.\n        \"\""
            : null
    TestWidgetTest:
        '""Meta tests for widget test helpers""': null
    BaseParameterMapping:
        ? "\"\"Base class for mapping between gui components and learner's parameters\n\
            \    when testing learner widgets.\n\n    Parameters\n    ----------\n\
            \    name : str\n        Name of learner's parameter.\n\n    gui_element\
            \ : QWidget\n        Gui component who's corresponding parameter is to\
            \ be tested.\n\n    values: list\n        List of values to be tested.\n\
            \n    getter: function\n        It gets component's value.\n\n    setter:\
            \ function\n        It sets component's value.\n    \"\""
        : null
        __init__:
            both: null
        __str__:
            both: null
            '%s (%s)': null
    DefaultParameterMapping:
        ? "\"\"Class for mapping between gui components and learner's parameters\n\
            \    when testing unchecked properties and therefore default parameters\n\
            \    should be used.\n\n    Parameters\n    ----------\n    name : str\n\
            \        Name of learner's parameter.\n\n    default_value: str, int,\n\
            \        Value that should be used by default.\n    \"\""
        : null
    ParameterMapping:
        ? "\"\"Class for mapping between gui components and learner parameters\n \
            \   when testing learner widgets\n\n    Parameters\n    ----------\n \
            \   name : str\n        Name of learner's parameter.\n\n    gui_element\
            \ : QWidget\n        Gui component who's corresponding parameter is to\
            \ be tested.\n\n    values: list, mandatory for ComboBox, optional otherwise\n\
            \        List of values to be tested. When None, it is set according to\n\
            \        component's type.\n\n    getter: function, optional\n       \
            \ It gets component's value. When None, it is set according to\n     \
            \   component's type.\n\n    setter: function, optional\n        It sets\
            \ component's value. When None, it is set according to\n        component's\
            \ type.\n    \"\""
        : null
        _default_values:
            '{} is not supported': null
        _default_get_value:
            '{} is not supported': null
        _default_set_value:
            '{} is not supported': null
    WidgetLearnerTestMixin:
        ? "\"\"Base class for widget learner tests.\n\n    Contains init method to\
            \ set up testing parameters and test methods.\n\n    All widget learner\
            \ tests should extend it (beside extending WidgetTest\n    class as well).\
            \ Learners with extra parameters, which can be set on the\n    widget,\
            \ should override self.parameters list in the setUp method. The\n    list\
            \ should contain mapping: learner parameter - gui component.\n    \"\""
        : null
        init:
            testing_dataset_cls: null
            testing_dataset_reg: null
            Model: null
            Classifier: null
            Predictor: null
        test_has_unconditional_apply:
            unconditional_apply: null
        test_input_data:
            '""Check widget''s data with data on the input""': null
            Data: null
        test_input_data_disconnect:
            '""Check widget''s data and model after disconnecting data from input""': null
            Data: null
        test_input_data_learner_adequacy:
            '""Check if error message is shown with inadequate data on input""': null
            Data: null
        test_input_preprocessor:
            '""Check learner''s preprocessors with an extra pp on input""': null
            Preprocessor: null
            Preprocessor not added to widget preprocessors: null
            Preprocessors were not passed to the learner: null
        test_input_preprocessors:
            '""Check multiple preprocessors on input""': null
            Preprocessor: null
            '`PreprocessorList` was not added to preprocessors': null
        test_input_preprocessor_disconnect:
            '""Check learner''s preprocessors after disconnecting pp from input""': null
            Preprocessor: null
            Preprocessors not removed on disconnect.: null
        test_output_learner:
            '""Check if learner is on output after apply""': null
            Learner: null
            Does not initialize the learner output: null
            Does not send a new learner instance on `Apply`.: null
        test_output_model:
            '""Check if model is on output after sending data and apply""': null
            Data: null
        test_output_learner_name:
            '""Check if learner''s name properly changes""': null
            Learner Name: null
            Learner: null
        test_output_model_name:
            '""Check if model''s name properly changes""': null
            Model Name: null
            Data: null
        test_output_model_picklable:
            '""Check if model can be pickled""': null
            Data: null
        _get_param_value:
            both: null
        test_parameters_default:
            ? "\"\"Check if learner's parameters are set to default (widget's) values\n\
                \        \"\""
            : null
            Data: null
        test_parameters:
            '""Check learner and model for various values of all parameters""': null
            Data: null
            Mismatching setting for parameter '%s': null
            Learner: null
        test_params_trigger_settings_changed:
            '""Check that the learner gets updated whenever a param is changed.""': null
            Data: null
            apply(%s): null
        _should_check_parameter:
            '""Should the param be passed into the learner given the data""': null
            classification: null
            regression: null
            both: null
        test_send_report:
            '""Test report""': null
    WidgetOutputsTestMixin:
        ? "\"\"Class for widget's outputs testing.\n\n    Contains init method to\
            \ set up testing parameters and a test method, which\n    checks Selected\
            \ Data and (Annotated) Data outputs.\n\n    Since widgets have different\
            \ ways of selecting data instances, _select_data\n    method should be\
            \ implemented when subclassed. The method should assign\n    value to\
            \ selected_indices parameter.\n\n    If output's expected domain differs\
            \ from input's domain, parameter\n    same_input_output_domain should\
            \ be set to False.\n\n    If Selected Data and Data domains differ, override\
            \ method\n    _compare_selected_annotated_domains.\n    \"\""
        : null
        init:
            iris: null
        test_outputs:
            Selected Data: null
        _select_data:
            Subclasses should implement select_data: null
    ProjectionWidgetTestMixin:
        '""Class for projection widget testing""': null
        init:
            iris: null
        test_setup_graph:
            ? "\"\"Plot should exist after data has been sent in order to be\n   \
                \     properly set/updated\"\""
            : null
            Did not finish in the specified {timeout}ms timeout: null
        test_default_attrs:
            '""Check default values for ''Color'', ''Shape'', ''Size'' and ''Label''""': null
        test_attr_models:
            '""Check possible values for ''Color'', ''Shape'', ''Size'' and ''Label''""': null
        test_attr_label_metas:
            '""Set ''Label'' from string meta attribute""': null
            zoo: null
        test_handle_primitive_metas:
            '""Set ''Color'' from continuous meta attribute""': null
        test_datasets:
            '""Test widget for datasets with missing values and constant features""': null
        test_none_data:
            '""Test widget for empty dataset""': null
        test_plot_once:
            '""Test if data is plotted only once but committed on every input change""': null
            heart_disease: null
        test_subset_data_color:
            Did not finish in the specified {timeout}ms timeout: null
            '#46befa': null
            brush: null
            '#000000': null
        test_class_density:
            '""Check class density update""': null
        test_dragging_tooltip:
            '""Dragging tooltip depends on data being jittered""': null
            heart_disease: null
        test_sparse_data:
            '""Test widget for sparse data""': null
            iris: null
        test_invalidated_embedding:
            '""Check if graph has been replotted when sending same data""': null
        test_saved_selection:
            Did not finish in the specified {timeout}ms timeout: null
        test_send_report:
            '""Test report ""': null
        test_hidden_effective_variables:
            c1: null
            hidden: null
            c2: null
            cls: null
            a: null
            b: null
        test_visual_settings:
            Helvetica: null
            Fonts: null
            Font family: null
            Title: null
            Font size: null
            Italic: null
            Label: null
            Categorical legend: null
            Numerical legend: null
            Annotations: null
            Foo: null
    AnchorProjectionWidgetTestMixin:
        test_embedding_missing_values:
            heart_disease: null
        test_sparse_data:
            iris: null
        test_visual_settings:
            Helvetica: null
            Fonts: null
            Anchor: null
            Font size: null
            Italic: null
    datasets:
        path:
            datasets: null
        missing_data_1:
            ? "\"\"\n        Dataset with 3 continuous features (X{1,2,3}) where all\
                \ the columns\n        and rows contain at least one NaN value.\n\n\
                \        One discrete class D with NaN values\n        Mixed continuous/discrete/string\
                \ metas ({X,D,S}M)\n\n        Returns\n        -------\n        data\
                \ : Orange.data.Table\n        \"\""
            : null
            missing_data_1.tab: null
        missing_data_2:
            ? "\"\"\n        Dataset with 3 continuous features (X{1,2,3}) where all\
                \ the columns\n        and rows contain at least one NaN value and\
                \ X1, X2 are constant.\n\n        One discrete constant class D with\
                \ NaN values.\n        Mixed continuous/discrete/string class metas\
                \ ({X,D,S}M)\n\n        Returns\n        -------\n        data : Orange.data.Table\n\
                \        \"\""
            : null
            missing_data_2.tab: null
        missing_data_3:
            ? "\"\"\n        Dataset with 3 discrete features D{1,2,3} where all the\
                \ columns and\n        rows contain at least one NaN value\n\n   \
                \     One discrete class D with NaN values\n        Mixes continuous/discrete/string\
                \ metas ({X,D,S}M)\n\n        Returns\n        -------\n        data\
                \ : Orange.data.Table\n        \"\""
            : null
            missing_data_3.tab: null
        data_one_column_vals:
            ? "\"\"\n        Dataset with two continuous features and one discrete.\
                \ One continuous\n        columns has custom set values (default nan).\n\
                \n        Returns\n        -------\n        data : Orange.data.Table\n\
                \        \"\""
            : null
            a: null
            b: null
            c: null
            y: null
            n: null
            ynyn: null
        data_one_column_nans:
            ? "\"\"\n        Dataset with two continuous features and one discrete.\
                \ One continuous\n        columns has missing values (NaN).\n\n  \
                \      Returns\n        -------\n        data : Orange.data.Table\n\
                \        \"\""
            : null
        datasets:
            ? "\"\"\n        Yields multiple datasets.\n\n        Returns\n      \
                \  -------\n        data : Generator of Orange.data.Table\n      \
                \  \"\""
            : null
            testing_dataset_cls: null
            testing_dataset_reg: null
    open_widget_classes:
        __init_subclass__: null
Orange/widgets/utils/colorgradientselection.py:
    ColorGradientSelection:
        __init__:
            gradient-combo-box: null
            Centered at: null
            threshold-low-slider: null
            Low gradient threshold: null
            'Applying a low threshold will squeeze the ': null
            gradient from the lower end: null
            High gradient threshold: null
            'Applying a high threshold will squeeze the ': null
            gradient from the higher end: null
            'Low:': null
            'High:': null
Orange/widgets/utils/colorpalettes.py:
    Palette:
        ? "\"\"\n    Base class for enumerable named categorized palettes used for\
            \ visualization\n    of discrete and numeric data\n\n    Attributes:\n\
            \        name (str): unique name\n        friendly_name (str): name to\
            \ be shown in user interfaces\n        category (str): category for user\
            \ interfaces\n        palette (np.ndarray): palette; an array of shape\
            \ (n, 3)\n        nan_color (np.ndarray): an array of shape (1, 3) storing\
            \ the colors used\n            for missing values\n        flags (Palette.Flags):\
            \ flags describing palettes properties\n            - ColorBlindSafe:\
            \ palette is color-blind safe\n            - Diverging: palette passes\
            \ through some neutral color (white,\n              black) which appears\
            \ in the middle. For binned continuous\n              palettes the pure\
            \ neutral color does not need to appear in a bin\n            - Discrete:\
            \ palette contains a small number of colors, like\n              palettes\
            \ for discrete values and binned palettes\n    \"\""
        : null
        PaletteFlags: null
        Palette.Flags: null
        __init__:
            _: null
        qcolors:
            '""An array of QColors in the palette""': null
        qcolors_w_nan:
            '""An array of QColors in the palette + the color for nan values""': null
    IndexedPalette: null
    DiscretePalette:
        from_colors:
            ? "\"\"\n        Create a palette from an (n x 3) array of ints in range\
                \ (0, 255)\n        \"\""
            : null
            Custom: null
        values_to_colors:
            ? "\"\"\n        Map values x to colors; values may include nan's\n\n\
                \        Args:\n            x (np.ndarray): an array of values between\
                \ 0 and len(palette) - 1\n\n        Returns:\n            An array\
                \ of ubytes of shape (len(x), 3), representing RGB triplets\n    \
                \    \"\""
            : null
        values_to_qcolors:
            ? "\"\"\n        Map values x to QColors; values may include nan's\n\n\
                \        Args:\n            x (np.ndarray): an array of values between\
                \ 0 and len(palette) - 1\n\n        Returns:\n            An array\
                \ of len(x) QColors\n        \"\""
            : null
        value_to_color:
            ? "\"\"\n        Return an RGB triplet (as np.ndarray) corresponding to\
                \ value x.\n        x may also be nan.\n        \"\""
            : null
        value_to_qcolor:
            ? "\"\"\n        Return a QColor corresponding to value x. x may also\
                \ be nan.\n        \"\""
            : null
    LimitedDiscretePalette:
        ? "\"\"\n    A palette derived from DiscretePalette that has the prescribed\
            \ number of\n    colors.\n\n    If the number of requested colors is small\
            \ enough, they are taken from\n    DefaultRGBColors (the default discrete\
            \ palette), otherwise from Glasbey.\n    \"\""
        : null
        __init__:
            'LimitedDiscretePalette: argument ''force_hsv'' is deprecated; ': null
            use 'force_glasbey' instead: null
            custom: null
    DiscretePalettes: null
    DefaultDiscretePalette: null
    DefaultDiscretePaletteName: null
    HuePalette:
        ? "\"\"\n    A palette derived from DiscretePalette that generates the given\
            \ number of\n    color by making a circle theough the HSV space.\n   \
            \ \"\""
        : null
        __init__:
            custom: null
    DefaultRGBColors: null
    Dark2Colors: null
    Glasbey: null
    ContinuousPalette:
        ? "\"\"\n    Palette for continuous values\n    \"\""
        : null
        values_to_colors:
            ? "\"\"\n        Return an array of colors assigned to given values by\
                \ the palette\n\n        Args:\n            x (np.array): colors to\
                \ be mapped\n            low (float or None): minimal value; if None,\
                \ determined from data\n            high (float or None): maximal\
                \ value; if None, determined from data\n\n        Returns:\n     \
                \       an array of shape (len(x), 3) with RGB values for each point\n\
                \        \"\""
            : null
        values_to_qcolors:
            ? "\"\"\n        Return an array of colors assigned to given values by\
                \ the palette\n\n        Args:\n            x (np.array): colors to\
                \ be mapped\n            low (float or None): minimal value; if None,\
                \ determined from data\n            high (float or None): maximal\
                \ value; if None, determined from data\n\n        Returns:\n     \
                \       an array of shape (len(x), ) with QColors for each point\n\
                \        \"\""
            : null
        value_to_color:
            ? "\"\"\n        Return an RGB triplet (as np.ndarray) corresponding to\
                \ value x.\n        x may also be nan.\n        \"\""
            : null
        value_to_qcolor:
            ? "\"\"\n        Return a QColor corresponding to value x. x may also\
                \ be nan.\n        \"\""
            : null
        lookup_table:
            ? "\"\"\n        A lookup table for this pallette.\n\n        Arguments\
                \ `low` and `high` (between 0 and 255) can be used to use\n      \
                \  just a part of palette.\n\n        Args:\n            low (float\
                \ or None): minimal value\n            high (float or None): maximal\
                \ value\n\n        Returns:\n            an array of shape (255, 3)\
                \ with RGB values\n        \"\""
            : null
        color_strip:
            ? "\"\"\n        Return a pixmap of given dimensions to be used for legends.\n\
                \n        Args:\n            strip_length (int): length of the strip;\
                \ may be horizontal or vertical\n            strip_width (int): width\
                \ of the strip\n            orientation: strip orientation\n\n   \
                \     Returns:\n            QPixmap with a strip\n        \"\""
            : null
        from_colors:
            ? "\"\"\n        Deprecated constructor for tests and easier migration\
                \ from\n        Variable.color. Constructs a palette that goes from\
                \ color1 to color2.\n\n        pass_throug can be a color through\
                \ which the palette will pass,\n        or `True` to pass through\
                \ black. Default is `False`.\n        \"\""
            : null
            Custom: null
    ContinuousPalettes: null
    BinnedContinuousPalette:
        ? "\"\"\n    Continuous palettes that bins values.\n\n    Besides the derived\
            \ attributes, it has an attribute `bins` (np.ndarray),\n    which contains\
            \ bin boundaries, including the lower and the higher\n    boundary, which\
            \ are essentially ignored.\n    \"\""
        : null
        from_palette:
            ? "\"\"\n        Construct a `BinnedPalette` from `ContinuousPalette`\
                \ by picking the\n        colors representing the centers of the bins.\n\
                \n        If given a `BinnedPalette`, the constructor returns a copy.\n\
                \n        Args:\n            palette (ContinuousPalette or BinnedPalette):\
                \ original palette\n            bins (np.ndarray): bin boundaries\n\
                \        \"\""
            : null
            can't create palette from '{type(palette).__name__}': null
        values_to_colors:
            ? "\"\"\n        Return an array of colors assigned to given values by\
                \ the palette\n\n        Args:\n            x (np.array): colors to\
                \ be mapped\n\n        Returns:\n            an array of shape (len(x),\
                \ 3) with RGB values for each point\n        \"\""
            : null
        values_to_qcolors:
            ? "\"\"\n        Return an array of colors assigned to given values by\
                \ the palette\n\n        Args:\n            x (np.array): colors to\
                \ be mapped\n\n        Returns:\n            an array of shape (len(x),\
                \ ) with QColors for each point\n        \"\""
            : null
        value_to_color:
            ? "\"\"\n        Return an RGB triplet (as np.ndarray) corresponding to\
                \ value x.\n        x may also be nan.\n        \"\""
            : null
        value_to_qcolor:
            ? "\"\"\n        Return a QColor corresponding to value x. x may also\
                \ be nan.\n        \"\""
            : null
    DefaultContinuousPalette: null
    DefaultContinuousPaletteName: null
    ColorIcon: null
    get_default_curve_colors: null
    patch_variable_colors:
        set_colors:
            palette: null
        continuous_set_colors:
            colors: null
        set_palette:
            palette: null
            colors: null
        continuous_get_colors:
            'ContinuousVariable.color is deprecated; ': null
            use ContinuousVariable.palette: null
            colors: null
            palette: null
        continuous_get_palette:
            palette: null
            colors: null
        discrete_get_colors:
            retrieve_colors:
                palette: null
                colors: null
        discrete_set_colors:
            colors: null
        discrete_get_palette:
            palette: null
            colors: null
    NAN_COLOR: null
    Default: null
    Dark: null
    default: null
    dark: null
    glasbey: null
    linear_bgyw_20_98_c66: null
    Blue-Green-Yellow: null
    linear_bmy_10_95_c78: null
    Blue-Magenta-Yellow: null
    linear_grey_10_95_c0: null
    Dim gray: null
    linear_inferno: null
    Inferno: null
    linear_viridis: null
    Viridis: null
    diverging_bwr_40_95_c42: null
    Coolwarm: null
    diverging_gkr_60_10_c40: null
    Green-Red: null
    diverging_protanopic_deuteranopic_bwy_60_95_c32: null
    Diverging protanopic: null
    Color-blind friendly: null
    diverging_tritanopic_cwr_75_98_c20: null
    Diverging tritanopic: null
    linear_protanopic_deuteranopic_kbw_5_98_c40: null
    Linear protanopic: null
    linear_tritanopic_krjcw_5_95_c24: null
    Linear tritanopic: null
    isoluminant_cgo_80_c38: null
    Isoluminant: null
    Other: null
    rainbow_bgyr_35_85_c73: null
    Rainbow: null
Orange/widgets/utils/pathutils.py:
    _DataType:
        __eq__:
            '""Equal if `other` has the same type and all elements compare equal.""': null
    PathItem:
        ? "\"\"\n    Abstract data type representing an optionally variable prefixed\
            \ path.\n    Has only two type members: `AbsPath` and `VarPath`\n    \"\
            \""
        : null
        exists:
            '""Does path exists when evaluated in `env`.""': null
        resolve:
            ? "\"\"Resolve (evaluate) path to an absolute path. Return None if path\n\
                \        does not resolve or does not exist.\n        \"\""
            : null
        as_dict:
            '""Encode item as dict""': null
        from_dict:
            PathItem: null
            '""Inverse of `as_dict`""': null
            type: null
            AbsPath: null
            path: null
            VarPath: null
            name: null
            relpath: null
            '{type_}: unknown type': null
        AbsPath: null
        VarPath: null
    AbsPath:
        AbsPath: null
        path: null
        ? "\"\"\n    An absolute path (no var env substitution).\n    \"\""
        : null
        __new__:
            nt: null
            /: null
        as_dict:
            type: null
            AbsPath: null
            path: null
    VarPath:
        VarPath: null
        name: null
        relpath: null
        ? "\"\"\n    A variable prefix path. `name` is the prefix name and `relpath`\
            \ the path\n    relative to prefix.\n    \"\""
        : null
        __new__:
            invalid relpath '{}': null
            nt: null
            /: null
        as_dict:
            type: null
            VarPath: null
            name: null
            relpath: null
    infer_prefix:
        ? "\"\"\n    Create a PrefixRelative item inferring a suitable prefix name\
            \ and relpath.\n\n    Parameters\n    ----------\n    path : str\n   \
            \     File system path.\n    env : List[Tuple[str, str]]\n        A sequence\
            \ of (NAME, basepath) pairs. The sequence is searched\n        for a item\
            \ such that basepath/relpath == path and the\n        VarPath(NAME, relpath)\
            \ is returned.\n        (note: the first matching prefixed path is chosen).\n\
            \n    Returns\n    -------\n    varpath : VarPath\n    \"\""
        : null
    isprefixed:
        ? "\"\"\n    Is `path` contained within the directory `prefix`.\n\n    >>>\
            \ isprefixed(\"/usr/local/\", \"/usr/local/shared\")\n    True\n    \"\
            \""
        : null
    samepath:
        ? "\"\"\n    Return True if the paths `p1` and `p2` match after case and path\n\
            \    normalization.\n    \"\""
        : null
    pathnormalize:
        ? "\"\"\n    Normalize a path (apply both path and case normalization.\n \
            \   \"\""
        : null
    prettyfypath:
        ? "\"\"\n    Return the path with the $HOME prefix shortened to '~/' if applicable.\n\
            \n    Example\n    -------\n    >>> prettyfypath(\"/home/user/file.dat\"\
            )\n    '~/file.dat'\n    \"\""
        : null
        ~/: null
        '~': null
Orange/widgets/utils/overlay.py:
    ? '""

        Overlay Message Widget

        ----------------------


        A Widget to display a temporary dismissible message over another widget.


        ""'
    : null
    OverlayWidget: null
    MessageWidget: null
    MessageOverlayWidget: null
Orange/widgets/utils/signals.py:
    Input: null
    Output: null
    InputSignal: null
    OutputSignal: null
    Single: null
    Multiple: null
    Default: null
    NonDefault: null
    Explicit: null
    Dynamic: null
    WidgetSignalsMixin: null
    AttributeList:
        '""Signal type for lists of attributes (variables)""': null
Orange/widgets/utils/stdpaths.py:
    '{__name__} module is deprecated.': null
Orange/widgets/utils/saveplot.py:
    save_plot: null
Orange/widgets/utils/listfilter.py:
    slices:
        ? "\"\" Group the given integer indices into slices\n    \"\""
        : null
    delslice:
        ? "\"\" Delete the start, end slice (rows) from the model.\n    \"\""
        : null
    VariablesListItemView:
        ? "\"\" A Simple QListView subclass initialized for displaying\n    variables.\n\
            \    \"\""
        : null
        dragEnterEvent:
            ? "\"\"\n        Reimplemented from QListView.dragEnterEvent\n       \
                \ \"\""
            : null
        acceptsDropEvent:
            ? "\"\"\n        Should the drop event be accepted?\n        \"\""
            : null
            _items: null
    VariableFilterProxyModel:
        ? "\"\" A proxy model for filtering a list of variables based on\n    their\
            \ names and labels.\n\n    \"\""
        : null
        filter_accepts_variable:
            ' ': null
            '%s=%s': null
    CompleterNavigator:
        ? "\"\" An event filter to be installed on a QLineEdit, to enable\n    Key\
            \ up/ down to navigate between posible completions.\n    \"\""
        : null
    variables_filter:
        ? "\"\"\n    GUI components: ListView with a lineedit which works as a filter.\
            \ One can write\n    a variable name in a edit box and possible matches\
            \ are then shown in a listview.\n    \"\""
        : null
        update_completer_model:
            ? "\"\" This gets called when the model for available attributes changes\n\
                \        through either drag/drop or the left/right button actions.\n\
                \n        \"\""
            : null
            '%s=%s': null
        update_completer_prefix:
            ? "\"\" Prefixes all items in the completer model with the current\n \
                \       already done completion to enable the completion of multiple\
                \ keywords.\n        \"\""
            : null
            ' ': null
        Filter the list of available variables.: null
        Filter: null
Orange/widgets/utils/owlearnerwidget.py:
    OWBaseLearnerMeta:
        ? "\"\" Meta class for learner widgets\n\n    OWBaseLearner declares two outputs,\
            \ learner and model with\n    generic type (Learner and Model).\n\n  \
            \  This metaclass ensures that each of the subclasses gets\n    its own\
            \ Outputs class with output that match the corresponding\n    learner.\n\
            \    \"\""
        : null
        __new__:
            abstract_widget:
                name: null
            copy_outputs:
                Outputs: null
            LEARNER: null
            '''{}'' must declare attribute LEARNER': null
    OWBaseLearner:
        ? "\"\"Abstract widget for classification/regression learners.\n\n    Notes\n\
            \    -----\n    All learner widgets should define learner class LEARNER.\n\
            \    LEARNER should have __returns__ attribute.\n\n    Overwrite `create_learner`,\
            \ `add_main_layout` and `get_learner_parameters`\n    in case LEARNER\
            \ has extra parameters.\n\n    \"\""
        : null
        Error:
            '{}': null
            Fitting failed.\n{}: null
            Sparse data is not supported.: null
            Out of memory.: null
        Warning:
            Press Apply to submit changes.: null
        Information:
            Ignoring default preprocessing.\n: null
            'Default preprocessing, such as scaling, one-hot encoding and ': null
            'treatment of missing data, has been replaced with user-specified ': null
            'preprocessors. Problems may occur if these are inadequate ': null
            for the given data.: null
        Inputs:
            Data: null
            Preprocessor: null
        Outputs:
            Learner: null
            Model: null
            Classifier: null
            Predictor: null
        __init__:
            unconditional_apply: null
        create_learner:
            ? "\"\"Creates a learner with current configuration.\n\n        Returns:\n\
                \            Learner: an instance of Orange.base.learner subclass.\n\
                \        \"\""
            : null
        get_learner_parameters:
            ? "\"\"Creates an `OrderedDict` or a sequence of pairs with current model\n\
                \        configuration.\n\n        Returns:\n            OrderedDict\
                \ or List: (option, value) pairs or dict\n        \"\""
            : null
        default_learner_name:
            ? "\"\"\n        Return the default learner name.\n\n        By default\
                \ this is the same as the widget's name.\n        \"\""
            : null
        set_default_learner_name:
            ? "\"\"\n        Set the default learner name if not otherwise specified\
                \ by the user.\n        \"\""
            : null
        set_data:
            '""Set the input train dataset.""': null
            Data contains multiple target variables.\n: null
            Select a single one with the Select Columns widget.: null
            Data has no target variable.\n: null
            Select one with the Select Columns widget.: null
        apply:
            '""Applies learner and sends new model.""': null
        handleNewSignals:
            use_default_preprocessors: null
            preprocessors: null
        show_fitting_failed:
            ? "\"\"Show error when fitting fails.\n            Derived widgets can\
                \ override this to show more specific messages.\"\""
            : null
        check_data:
            Dataset is empty.: null
            Data contains a single target value.: null
            Data has no features to learn from.: null
        effective_learner_name:
            '""Return the effective learner name.""': null
        send_report:
            Name: null
            Model parameters: null
            Data: null
        setup_layout:
            Classification: null
            Regression: null
        add_main_layout:
            ? "\"\"Creates layout with the learner configuration widgets.\n\n    \
                \    Override this method for laying out any learner-specific parameter\
                \ controls.\n        See setup_layout() method for execution order.\n\
                \        \"\""
            : null
        add_classification_layout:
            ? "\"\"Creates layout for classification specific options.\n\n       \
                \ If a widget outputs a learner dispatcher, sometimes the classification\n\
                \        and regression learners require different options.\n    \
                \    See `setup_layout()` method for execution order.\n        \"\""
            : null
        add_regression_layout:
            ? "\"\"Creates layout for regression specific options.\n\n        If a\
                \ widget outputs a learner dispatcher, sometimes the classification\n\
                \        and regression learners require different options.\n    \
                \    See `setup_layout()` method for execution order.\n        \"\""
            : null
        add_learner_name_widget:
            learner_name: null
            Name: null
            The name will identify this model in other widgets: null
        get_widget_description:
            outputs: null
            inputs: null
Orange/widgets/utils/combobox.py:
    ComboBoxSearch: null
    ComboBox: null
    ItemStyledComboBox:
        ? "\"\"\n    A QComboBox that draws its text using current item's foreground\
            \ and font\n    role.\n\n    Note\n    ----\n    Stylesheets etc. can\
            \ completely ignore this.\n    \"\""
        : null
        placeholderText:
            ? "\"\"\n        Return the placeholder text.\n\n        Returns\n   \
                \     -------\n        text : str\n        \"\""
            : null
        setPlaceholderText:
            ? "\"\"\n        Set the placeholder text.\n\n        This text is displayed\
                \ on the checkbox when the currentIndex() == -1\n\n        Parameters\n\
                \        ----------\n        text : str\n        \"\""
            : null
        initStyleOption:
            QStyleOptionComboBox: null
Orange/widgets/utils/colorpalette.py:
    Module colorpalette is obsolete; use colorpalettes: null
    ColorPaletteDlg:
        __init__:
            Color Palette: null
            selectedSchemaIndex: null
            Saved Profiles: null
            OK: null
            Cancel: null
        acceptChanges:
            Default: null
            Question: null
            The color schema has changed. Save?: null
        createColorButton:
            butt: null
        createContinuousPalette:
            _set:
                cont{}{}: null
            Left: null
            View: null
            Right: null
            passThroughBlack: null
            passThroughBlackCheckbox: null
            cont: null
            Pass through black: null
        createExtendedContinuousPalette:
            _set:
                exCont{}{}: null
            Left: null
            View: null
            Right: null
            passThroughColors: null
            passThroughColorsCheckbox: null
            exCont: null
            Use pass-through colors: null
            Pass-through colors: null
            passThroughColor: null
            Checkbox: null
            Use color: null
            color: null
            colorCount: null
        createDiscretePalette:
            _set:
                disc{}{}: null
            View: null
            EditButt: null
            Edit palette: null
            Edit the order and colors of the palette: null
            LoadButt: null
            Load palette: null
            Load a predefined color palette: null
        editPalette:
            _set:
                disc{}{}: null
            disc: null
            EditButt: null
            View: null
        loadPalette:
            disc: null
            LoadButt: null
            View: null
        getColor:
            butt: null
        getContinuousPalette:
            cont: null
            Left: null
            Right: null
            passThroughBlack: null
        getExtendedContinuousPalette:
            exCont: null
            Left: null
            Right: null
            passThroughColors: null
            color: null
            colorCount: null
            passThroughColor: null
        getDiscretePalette:
            disc: null
            View: null
        getCurrentState:
            butt: null
            cont: null
            Left: null
            Right: null
            passThroughBlack: null
            disc: null
            View: null
            exCont: null
            passThroughColors: null
            color: null
            passThroughColor: null
            colorCount: null
        setColorSchemas:
            Default: null
            Save current palette as...: null
        setCurrentState:
            butt: null
            cont: null
            Left: null
            Right: null
            passThroughBlack: null
            passThroughBlackCheckbox: null
            View: null
            disc: null
            exCont: null
            passThroughColors: null
            passThroughColorsCheckbox: null
            passThroughColor: null
            Checkbox: null
            color: null
            colorCount: null
        paletteSelected:
            Name the current color settings.\n: null
            Pressing 'Cancel' will cancel your changes and close the dialog.: null
            Name Your Color Settings: null
            default: null
            The 'Default' settings cannot be changed.: null
            'Enter a different name:': null
    ColorPalleteListing:
        __init__:
            Color Palette List: null
            Information: null
            '<p align="center">This dialog shows a list of predefined ': null
            'color palettes <br>from colorbrewer.org that can be used ': null
            in Orange.<br/>You can select a palette by clicking on it.</p>: null
            Default Palette: null
            Default color palette: null
            Qualitative: null
            Spectral: null
            Diverging: null
            Sequential: null
            Pastels: null
            ' Palettes': null
    PaletteEditor:
        __init__:
            Palette Editor: null
            Information: null
            <p align="center">You can reorder colors in the list using the: null
            <br/>buttons on the right or by dragging and dropping the items.: null
            '<br/>To change a specific color double click the item in the ': null
            list.</p>: null
            Move selected colors up: null
            Move selected colors down: null
            icons/Dlg_up3.png: null
            icons/Dlg_down3.png: null
            Color %d: null
    GradientPaletteGenerator:
        getRGB:
            ? "\"\"\n        Return RGB tuple that matches `value`, which is assumed\n\
                \        to lay within [0, 1].\n        \"\""
            : null
    ContinuousPaletteGenerator:
        __init__:
            '#000000': null
    ColorPaletteGenerator:
        set_number_of_colors:
            ? "\"\"Change the palette if there are palettes for different number of\n\
                \           colors. Else, just copy colors as numpy array\"\""
            : null
            Not enough colors: null
        resolve:
            ? "\"\"\n        Return a palette with `number_of_colors`.\n\n       \
                \ If possible try to preserve the same 'color scheme' (`rgb_colors`\n\
                \        dictionary constructor parameter), falling back to the\n\
                \        `DefaultRGBColors` if `number_of_colors < 18` or a rainbow\
                \ palette\n        otherwise.\n\n        \"\""
            : null
    ColorButton:
        mousePressEvent:
            colorSchemaChange: null
    main:
        continuousPalette: null
        Continuous Palette: null
        discPalette: null
        Discrete Palette: null
        otherColors: null
        Colors: null
        Canvas: null
        Grid: null
    __main__: null
Orange/widgets/utils/concurrent.py:
    ? '""

        General helper functions and classes for PyQt concurrent programming

        ""'
    : null
    FutureWatcher: null
    FutureSetWatcher: null
    methodinvoke: null
    TaskState: null
    ConcurrentMixin:
        ? "\"\"\n    A base class for concurrent mixins. The class provides methods\
            \ for running\n    tasks in a separate thread.\n\n    Widgets should use\
            \ `ConcurrentWidgetMixin` rather than this class.\n    \"\""
        : null
        on_partial_result:
            ? "\"\" Invoked from runner (by state) to send the partial results\n \
                \       The method should handle partial results, i.e. show them in\
                \ the plot.\n\n        :param result: any data structure to hold final\
                \ result\n        \"\""
            : null
        on_done:
            ? "\"\" Invoked when task is done.\n        The method should re-set the\
                \ result (to double check it) and\n        perform operations with\
                \ obtained results, eg. send data to the output.\n\n        :param\
                \ result: any data structure to hold temporary result\n        \"\""
            : null
        on_exception:
            ? "\"\" Invoked when an exception occurs during the calculation.\n   \
                \     Override in order to handle exceptions, eg. show an error\n\
                \        message in the widget.\n\n        :param ex: exception\n\
                \        \"\""
            : null
        start:
            ? "\"\" Call from derived class to start the task.\n        :param task:\
                \ runner - a method to run in a thread - should accept\n        `state`\
                \ parameter\n        \"\""
            : null
            '`task` must be callable!': null
        cancel:
            '"" Call from derived class to stop the task. ""': null
        shutdown:
            ? "\"\" Call from derived class when the widget is deleted\n         (in\
                \ onDeleteWidget).\n        \"\""
            : null
        _on_task_done:
            'Starting new task from ': null
            '{''on_done'' if ex is None else ''on_exception''} is forbidden': null
    ConcurrentWidgetMixin:
        ? "\"\"\n    A concurrent mixin to be used along with OWWidget.\n    \"\""
        : null
    PyOwned: null
    locked:
        ? "\"\"\n    A context manager for locking an instance of a QMutex.\n    \"\
            \""
        : null
    _TaskDepotThread:
        ? "\"\"\n    A special 'depot' thread used to transfer Task instance into\
            \ threads\n    started by a QThreadPool.\n\n    \"\""
        : null
        __new__:
            Already exists: null
        transfer:
            ? "\"\"\n        Transfer `obj` (:class:`QObject`) instance from this\
                \ thread to the\n        target `thread` (a :class:`QThread`).\n\n\
                \        \"\""
            : null
    _TaskRunnable:
        ? "\"\"\n    A QRunnable for running a :class:`Task` by a :class:`ThreadExecutor`.\n\
            \    \"\""
        : null
        run:
            ? "\"\"\n        Reimplemented from `QRunnable.run`\n        \"\""
            : null
            transfer: null
    FutureRunnable:
        ? "\"\"\n    A QRunnable to fulfil a `Future` in a QThreadPool managed thread.\n\
            \n    Parameters\n    ----------\n    future : concurrent.futures.Future\n\
            \        Future whose contents will be set with the result of executing\n\
            \        `func(*args, **kwargs)` after completion\n    func : Callable\n\
            \        Function to invoke in a thread\n    args : tuple\n        Positional\
            \ arguments for `func`\n    kwargs : dict\n        Keyword arguments for\
            \ `func`\n\n    Example\n    -------\n    >>> f = concurrent.futures.Future()\n\
            \    >>> task = FutureRunnable(f, int, (42,), {})\n    >>> QThreadPool.globalInstance().start(task)\n\
            \    >>> f.result()\n    42\n    \"\""
        : null
        run:
            ? "\"\"\n        Reimplemented from `QRunnable.run`\n        \"\""
            : null
            Exception in worker thread.: null
    ThreadExecutor:
        ? "\"\"\n    ThreadExecutor object class provides an interface for running\
            \ tasks\n    in a QThreadPool.\n\n    Parameters\n    ----------\n   \
            \ parent : QObject\n        Executor's parent instance.\n\n    threadPool\
            \ :  Optional[QThreadPool]\n        Thread pool to be used by the instance\
            \ of the Executor. If `None`\n        then a private global thread pool\
            \ will be used.\n\n        .. versionchanged:: 3.15\n            Before\
            \ 3.15 a `QThreadPool.globalPool()` was used as the default.\n\n     \
            \   .. warning::\n            If you pass a custom `QThreadPool` make\
            \ sure it creates threads\n            with sufficient stack size for\
            \ the tasks submitted to the executor\n            (see `QThreadPool.setStackSize`).\n\
            \    \"\""
        : null
        __init__:
            Invalid `threadPool` type '{}': null
        submit:
            ? "\"\"\n        Reimplemented from :class:`concurrent.futures.Executor`\n\
                \n        Schedule the `func(*args, **kwargs)` to be executed and\
                \ return an\n        :class:`Future` instance representing the result\
                \ of the computation.\n        \"\""
            : null
            'Cannot schedule new futures after ': null
            shutdown.: null
            Use `submit_task` to run `Task`s: null
        submit_task:
            '`submit_task` will be deprecated': null
            'Cannot schedule new futures after ': null
            shutdown.: null
        __make_task_runnable:
            'Can only submit Tasks from it''s own ': null
            thread.: null
            Can not submit Tasks with a parent.: null
        shutdown:
            ? "\"\"\n        Shutdown the executor and free all resources. If `wait`\
                \ is True then\n        wait until all pending futures are executed\
                \ or cancelled.\n        \"\""
            : null
    Task:
        __init__:
            '`Task` has been deprecated': null
        _execute:
            Exception in Task: null
Orange/widgets/utils/annotated_data.py:
    Data: null
    Selected: null
    add_columns:
        ? "\"\"Construct a new domain with new columns added to the specified place\n\
            \n    Parameters\n    ----------\n    domain : Domain\n        source\
            \ domain\n    attributes\n        list of variables to append to attributes\
            \ from source domain\n    class_vars\n        list of variables to append\
            \ to class_vars from source domain\n    metas\n        list of variables\
            \ to append to metas from source domain\n\n    Returns\n    -------\n\
            \    Domain\n    \"\""
        : null
    create_annotated_table:
        ? "\"\"\n    Returns data with concatenated flag column. Flag column represents\n\
            \    whether data instance has been selected (Yes) or not (No), which\
            \ is\n    determined in selected_indices parameter.\n\n    :param data:\
            \ Table\n    :param selected_indices: list or ndarray\n    :return: Table\n\
            \    \"\""
        : null
        'No': null
        'Yes': null
    create_groups_table:
        G{}: null
        Unselected: null
Orange/widgets/utils/widgetpreview.py:
    WidgetPreview: null
Orange/widgets/utils/itemselectionmodel.py:
    BlockSelectionModel:
        ? "\"\"\n    Item selection model ensuring the selection maintains a simple\
            \ block\n    like structure.\n\n    e.g.\n\n        [a b] c [d e]\n  \
            \      [f g] h [i j]\n\n    is allowed but this is not\n\n        [a]\
            \ b  c  d e\n        [f  g] h [i j]\n\n    I.e. select the Cartesian product\
            \ of row and column indices.\n\n    \"\""
        : null
        select:
            '""Reimplemented.""': null
        selectBlocks:
            '""Is the block selection in effect.""': null
        setSelectBlocks:
            ? "\"\"Set the block selection state.\n\n        If set to False, the\
                \ selection model behaves as the base\n        QItemSelectionModel\n\
                \n        \"\""
            : null
    selection_rows:
        ? "\"\"\n    Return a list of ranges for all referenced rows contained in\
            \ selection\n\n    Parameters\n    ----------\n    selection : QItemSelection\n\
            \n    Returns\n    -------\n    rows : List[Tuple[int, int]]\n    \"\""
        : null
    selection_columns:
        ? "\"\"\n    Return a list of ranges for all referenced columns contained\
            \ in selection\n\n    Parameters\n    ----------\n    selection : QItemSelection\n\
            \n    Returns\n    -------\n    rows : List[Tuple[int, int]]\n    \"\""
        : null
    ranges:
        ? "\"\"\n    Group consecutive indices into `(start, stop)` tuple 'ranges'.\n\
            \n    >>> list(ranges([1, 2, 3, 5, 3, 4]))\n    >>> [(1, 4), (5, 6), (3,\
            \ 5)]\n\n    \"\""
        : null
    SymmetricSelectionModel:
        ? "\"\"\n    Item selection model ensuring the selection is symmetric\n\n\
            \    \"\""
        : null
        selectedItems:
            '""Return the indices of the the symmetric selection.""': null
        setSelectedItems:
            '""Set and select the `inds` indices""': null
Orange/widgets/utils/encodings.py:
    utf-8: null
    utf-16: null
    utf-32: null
    iso8859-1: null
    shift_jis: null
    iso2022_jp: null
    gb18030: null
    euc_kr: null
    Unicode (UTF-8): null
    Unicode (UTF-16): null
    utf-16-le: null
    Unicode (UTF-16LE): null
    utf-16-be: null
    Unicode (UTF-16BE): null
    Unicode (UTF-32): null
    utf-32-le: null
    Unicode (UTF-32LE): null
    utf-32-be: null
    Unicode (UTF-32BE): null
    utf-7: null
    Unicode (UTF-7): null
    ascii: null
    English (US-ASCII): null
    Western Europe (ISO Latin 1): null
    iso8859-15: null
    Western Europe (ISO-8859-15): null
    cp1252: null
    Western Europe (Windows-1252): null
    mac_roman: null
    Western Europe (Mac OS Roman): null
    iso8859-2: null
    Central and Eastern Europe (ISO Latin 2): null
    cp1250: null
    Central and Eastern Europe (Windows-1250): null
    mac_latin2: null
    Central and Eastern Europe (Mac Latin-2): null
    iso8859-3: null
    Esperanto, Maltese (ISO Latin 3): null
    iso8859-4: null
    Baltic Languages (ISO Latin 4): null
    cp1257: null
    Baltic Languages (Windows-1257): null
    iso8859-13: null
    Baltic Languages (ISO-8859-13): null
    iso8859-16: null
    South-Eastern Europe (ISO-8859-16): null
    iso8859-5: null
    Cyrillic (ISO-8859-5): null
    cp1251: null
    Cyrillic (Windows-1251): null
    mac_cyrillic: null
    Cyrillic (Mac OS Cyrillic): null
    koi8-r: null
    Cyrillic (KOI8-R): null
    koi8-u: null
    Cyrillic (KOI8-U): null
    iso8859-14: null
    Celtic Languages (ISO-8859-14): null
    iso8859-10: null
    Nordic Languages (ISO-8859-10): null
    mac_iceland: null
    Icelandic (Mac Iceland): null
    iso8859-7: null
    Greek (ISO-8859-7): null
    cp1253: null
    Greek (Windows-1253): null
    mac_greek: null
    Greek (Mac Greek): null
    iso8859-8: null
    Hebrew (ISO-8859-8): null
    cp1255: null
    Hebrew (Windows-1255): null
    iso8859-6: null
    Arabic (ISO-8859-6): null
    cp1256: null
    Arabic (Windows-1256): null
    iso8859-9: null
    Turkish (ISO-8859-9): null
    cp1254: null
    Turkish (Windows-1254): null
    mac_turkish: null
    Turkish (Mac Turkish): null
    iso8859-11: null
    Thai (ISO-8859-11): null
    Japanese (ISO-2022-JP): null
    iso2022_jp_1: null
    Japanese (ISO-2022-JP-1): null
    iso2022_jp_2: null
    Japanese (ISO-2022-JP-2): null
    iso2022_jp_2004: null
    Japanese (ISO-2022-JP-2004): null
    iso2022_jp_3: null
    Japanese (ISO-2022-JP-3): null
    Japanese (Shift JIS): null
    shift_jis_2004: null
    Japanese (Shift JIS 2004): null
    euc_jp: null
    Japanese (EUC-JP): null
    iso2022_kr: null
    Korean (ISO-2022-KR): null
    Korean (EUC-KR): null
    gb2312: null
    Simplified Chinese (GB 2312): null
    gbk: null
    Chinese (GBK): null
    Chinese (GB 18030): null
    big5: null
    Traditional Chinese (BIG5): null
    big5hkscs: null
    Traditional Chinese (BIG5-HKSC): null
    cp1258: null
    Vietnamese (Windows-1258): null
    koi8-t: null
    Tajik (KOI8-T): null
    display_name:
        ? "\"\"\n    Return a human readable display name for a codec if available\n\
            \n    Parameters\n    ----------\n    codec : str\n        A codec name\
            \ (as accepted by `codecs.lookup`).\n\n    Returns\n    -------\n    name\
            \ : str\n    \"\""
        : null
    EncodingsView:
        ? "\"\"\n    QListView with size hinting based on contents.\n    \"\""
        : null
    SelectEncodingsWidget:
        ? "\"\"\n    Popup widget for selecting a set of text encodings for use in\
            \ other parts\n    of the GUI.\n    \"\""
        : null
        __init__:
            -top-heading-text: null
            Select all: null
        selectedEncodings:
            ? "\"\"\n        Return a list of currently selected (checked) encodings.\n\
                \        \"\""
            : null
        selectAll:
            ? "\"\"\n        Select all encodings.\n        \"\""
            : null
        clearAll:
            ? "\"\"\n        Clear (uncheck) all encodings.\n        \"\""
            : null
        reset:
            ? "\"\"\n        Reset the encodings model to the default selected set.\n\
                \        \"\""
            : null
    '#selected-text-encodings': null
    list_selected_encodings:
        ? "\"\"\n    Return a list of all current selected encodings from user preferences.\n\
            \    \"\""
        : null
    encodings_model:
        ? "\"\"\n    Return a list model of text encodings.\n\n    The items are checkable\
            \ and initialized based on current stored user\n    preferences. Any change\
            \ in check state is stored and writen back\n    immediately.\n\n    The\
            \ normalized encoding (codec) names are accessible using `Qt.UserRole`\n\
            \n    Returns\n    -------\n    model : QAbstractItemModel\n    \"\""
        : null
        '; ': null
    main:
        Select encodings visible in text encoding menus: null
    __main__: null
Orange/widgets/utils/domaineditor.py:
    VarTableModel:
        feature: null
        target: null
        meta: null
        skip: null
        categorical: null
        numeric: null
        text: null
        datetime: null
        headerData:
            Name: null
            Type: null
            Role: null
            Values: null
    VarTypeDelegate:
        setEditorData:
            numeric: null
            datetime: null
    DomainEditor:
        ? "\"\"Component for editing of variable types.\n\n    Parameters\n    ----------\n\
            \    widget : parent widget\n    \"\""
        : null
        _is_missing:
            nan: null
        _iter_vals:
            '""Iterate over values of sparse or dense arrays.""': null
        _to_column:
            '""Transform list of values to sparse/dense column array.""': null
        get_domain:
            ? "\"\"\n        Create domain (and dataset) from changes made in the\
                \ widget.\n\n        Returns\n        -------\n\n        Args:\n \
                \           domain (Domain): original domain\n            data (Table):\
                \ original data\n            deduplicate (bool): if True, variable\
                \ names are deduplicated and\n               the result contains an\
                \ additional list with names of renamed\n               variables\n\
                \n        Returns:\n            (new_domain, [attribute_columns, class_var_columns,\
                \ meta_columns])\n            or\n            (new_domain, [attribute_columns,\
                \ class_var_columns, meta_columns], renamed)\n        \"\""
            : null
        _get_column:
            '"" Extract column from data and preserve sparsity. ""': null
        parse_domain:
            ? "\"\"Convert domain into variable representation used by\n        the\
                \ VarTableModel.\n\n        Parameters\n        ----------\n     \
                \   domain : the domain to convert\n\n        Returns\n        -------\n\
                \        list of [variable_name, var_type, place, values, can_be_numeric]\
                \ lists.\n\n        \"\""
            : null
            discrete_value_display:
                ', ': null
                ', ...': null
Orange/widgets/utils/slidergraph.py:
    SliderGraph:
        ? "\"\"\n    An widget graph element that shows a line plot with more sequences.\
            \ It\n    also plot a vertical line that can be moved left and right by\
            \ a user. When\n    the line is moved a callback function is called with\
            \ selected value (on\n    x axis).\n\n    Parameters\n    ----------\n\
            \    x_axis_label : str\n        A text label for x axis\n    y_axis_label\
            \ : str\n        A text label for y axis\n    callback : callable\n  \
            \      A function which is called when selection is changed.\n    \"\""
        : null
        __init__:
            bottom: null
            left: null
        update:
            ? "\"\"\n        Function replots a graph.\n\n        Parameters\n   \
                \     ----------\n        x : np.ndarray\n            One-dimensional\
                \ array with X coordinates of the points\n        y : array-like\n\
                \            List of np.ndarrays that contains an array of Y values\
                \ for each\n            sequence.\n        colors : array-like\n \
                \           List of Qt colors (eg. Qt.red) for each sequence.\n  \
                \      cutpoint_x : int, optional\n            A starting cutpoint\
                \ - the location of the vertical line.\n        selection_limit :\
                \ tuple\n            The tuple of two values that limit the range\
                \ for selection.\n        names : array-like\n            The name\
                \ of each sequence that shows in the legend, if None\n           \
                \ legend is not shown.\n        legend_anchor : array-like\n     \
                \       The anchor of the legend in the graph\n        \"\""
            : null
        clear_plot:
            ? "\"\"\n        This function clears the plot and removes data.\n   \
                \     \"\""
            : null
        set_cut_point:
            ? "\"\"\n        This function sets the cutpoint (selection line) at the\
                \ specific\n        location.\n\n        Parameters\n        ----------\n\
                \        x : int\n            Cutpoint location at the x axis.\n \
                \       \"\""
            : null
        _plot_cutpoint:
            ? "\"\"\n        Function plots the cutpoint.\n\n        Parameters\n\
                \        ----------\n        x : int\n            Cutpoint location.\n\
                \        \"\""
            : null
        _plot_horizontal_lines:
            ? "\"\"\n        Function plots the vertical dashed lines that points\
                \ to the selected\n        sequence values at the y axis.\n      \
                \  \"\""
            : null
        _set_anchor:
            ? "\"\"\n        This function set the location of the text label around\
                \ the selected\n        point at the curve. It place the text such\
                \ that it is not plotted\n        at the line.\n\n        Parameters\n\
                \        ----------\n        label : TextItem\n            Text item\
                \ that needs to have location set.\n        cutidx : int\n       \
                \     The index of the selected element in the list. If index in first\n\
                \            part of the list we put label on the right side else\
                \ on the left,\n            such that it does not disappear at the\
                \ graph edge.\n        inc : bool\n            This parameter tels\
                \ whether the curve value is increasing or\n            decreasing.\n\
                \        \"\""
            : null
        _update_horizontal_lines:
            ? "\"\"\n        This function update the horisontal lines when selection\
                \ changes.\n        If lines are present jet it calls the function\
                \ to init them.\n        \"\""
            : null
            '{:.3f}': null
        _on_cut_changed:
            ? "\"\"\n        This function is called when selection changes. It extract\
                \ the selected\n        value and calls the callback function.\n\n\
                \        Parameters\n        ----------\n        line : InfiniteLine\n\
                \            The cutpoint - selection line.\n        \"\""
            : null
Orange/widgets/utils/spinbox.py:
    DoubleSpinBox:
        ? "\"\"\n    A QDoubleSpinSubclass with non-fixed decimal precision/rounding.\n\
            \    \"\""
        : null
        __init__:
            stepType: null
        setDecimals:
            ? "\"\"\n        Set the number of decimals in display/edit\n\n      \
                \  If negative value then no rounding takes place and the value is\n\
                \        displayed using `QLocale.FloatingPointShortest` precision.\n\
                \        \"\""
            : null
        setMinimumStep:
            ? "\"\"\n        Minimum step size when `stepType() == AdaptiveDecimalStepType`\n\
                \        and `decimals() < 0`.\n        \"\""
            : null
        textFromValue:
            '""Reimplemented.""': null
            f: null
        stepBy:
            ? "\"\"\n        Reimplemented.\n        \"\""
            : null
        __adaptiveDecimalStep:
            '1.01': null
        stepType: null
        sizeHint:
            X: null
            .: null
            ' ': null
            '-': null
Orange/widgets/utils/graphicslayoutitem.py:
    SimpleLayoutItem:
        ? "\"\"\n    A graphics layout item wrapping a QGraphicsItem instance to be\n\
            \    managed by a layout.\n\n    The item is positioned at the layout\
            \ geometry top left corner and its\n    boundingRect().size() is used\
            \ as the preferred size hint\n\n    Parameters\n    ----------\n    item:\
            \ QGraphicsItem\n    parent: Optional[QGraphicsLayoutItem]\n        The\
            \ parent layout item.\n    anchor: Tuple[float, float]\n        The anchor\
            \ in this layout item's geometry relative coord. system\n        (0, 0)\
            \ corresponds to top left corner and (1, 1) corresponds to\n        bottom\
            \ right corner).\n    anchorItem: Tuple[float, float]\n        The relative\
            \ anchor in `item` 's bounding rect.\n    \"\""
        : null
        __anchorThis: null
        __anchorItem: null
        item: null
        __resizeContents: null
        __aspectMode: null
        __transform: null
        __scale: null
        __init__:
            sizePolicy: null
    scaled:
        ? "\"\"\n    Return size scaled to fit in the constrains using the aspect\
            \ mode `mode`.\n\n    If  width or height of constraint are negative they\
            \ are ignored,\n    ie. the result is not constrained in that dimension.\n\
            \    \"\""
        : null
Orange/widgets/utils/state_summary.py:
    format_variables_string:
        ? "\"\"\n    A function that formats the descriptive part of the input/output\
            \ summary for\n    either features, targets or metas of the input dataset.\n\
            \n    :param variables: Features, targets or metas of the input dataset\n\
            \    :return: A formatted string\n    \"\""
        : null
        —: null
        categorical: null
        numeric: null
        time: null
        string: null
        '{i} {j}': null
        '{sum(counts)} ({", ".join(var_string)})': null
        '{counts[0]} {attrs[0]}': null
    _plural:
        s: null
    format_summary_details:
        ? "\"\"\n    A function that forms the entire descriptive part of the input/output\n\
            \    summary.\n\n    :param data: A dataset\n    :type data: Orange.data.Table\n\
            \    :return: A formatted string\n    \"\""
        : null
        b:
            <b>{s}</b>: null
        name: null
        untitled: null
        '{len(data):n} instance{_plural(len(data))}, ': null
        '{n_features} variable{_plural(n_features)}': null
        '{name}: ': null
        '\nFeatures: {features} {features_missing}': null
        '\nTarget: {targets}': null
        '\nMetas: {metas}': null
        '<b><u>{escape(name)}</u></b>: {basic}': null
        '{basic}': null
        'Features: {features} {features_missing}': null
        'Target: {targets}': null
        'Metas: {metas}': null
        <br/>: null
    missing_values:
        ({value*100:.1f}% missing values): null
        (no missing values): null
    format_multiple_summaries:
        input: null
        ? "\"\"\n    A function that forms the entire descriptive part of the input/output\n\
            \    summary for widgets that have more than one input/output.\n\n   \
            \ :param data_list: A list of tuples for each input/output dataset where\
            \ the\n    first element of the tuple is the name of the dataset (can\
            \ be omitted)\n    and the second is the dataset\n    :type data_list:\
            \ list(tuple(str, Orange.data.Table))\n    :param type_io: A string that\
            \ indicates weather the input or output data\n    is being formatted\n\
            \    :type type_io: str\n\n    :return A formatted summary\n    :rtype\
            \ str\n    \"\""
        : null
        new_line:
            \n: null
            <br>: null
        No data on {type_io}.: null
        '{name}:<br>{details}': null
        <hr>: null
    _name_of:
        name: null
    _nobr:
        <nobr>{s}</nobr>: null
    summarize_:
        <br/>: null
        '{_name_of(preprocessor)} (empty)': null
        🄿: null
    '&#9924;': null
    🄼: null
    🄻: null
    🅂: null
Orange/widgets/utils/tableview.py:
    table_view_compact:
        ? "\"\"\n    Give the view a more compact default vertical header section\
            \ size.\n    \"\""
        : null
        X: null
    TableView:
        ? "\"\"\n    A QTableView subclass that is more suited for displaying large\
            \ data models.\n    \"\""
        : null
        __init__:
            horizontalScrollMode: null
            verticalScrollMode: null
        setSelectionModel:
            '""Reimplemented from QTableView""': null
    table_selection_to_mime_data:
        ? "\"\"Copy the current selection in a QTableView to the clipboard.\n    \"\
            \""
        : null
        excel: null
        utf-8: null
        excel-tab: null
        text/csv: null
        text/tab-separated-values: null
        text/plain: null
    lines_to_csv_string:
        excel: null
Orange/widgets/utils/__init__.py:
    to_html:
        <=: null
        '&#8804;': null
        '>=': null
        '&#8805;': null
        <: null
        '&#60;': null
        '>': null
        '&#62;': null
        =\\=: null
        '&#8800;': null
    get_variable_values_sorted:
        ? "\"\"\n    Return a list of sorted values for given attribute, if all its\
            \ values can be\n    cast to int's.\n    \"\""
        : null
    dumpObjectTree:
        ? "\"\"\n    Dumps Qt QObject tree. Aids in debugging internals.\n    See\
            \ also: QObject.dumpObjectTree()\n    \"\""
        : null
        '{indent}{type} "{name}"': null
        ' ': null
    getmembers:
        ? "\"\"Return all the members of an object in a list of (name, value) pairs\
            \ sorted by name.\n\n    Behaves like inspect.getmembers. If a type object\
            \ is passed as a predicate,\n    only members of that type are returned.\n\
            \    \"\""
        : null
    qname:
        '""Return the fully qualified name for a `type_`.""': null
        '{0.__module__}.{0.__qualname__}': null
    _T1: null
    _E: null
    apply_all:
        '""Apply `op` on all elements of `seq`.""': null
    unique_everseen:
        ? "\"\"\n    Return an iterator over unique elements of `iterable` preserving\
            \ order.\n\n    If `key` is supplied it is used as a substitute for determining\n\
            \    'uniqueness' of elements.\n\n    Parameters\n    ----------\n   \
            \ iterable : Iterable[T]\n    key : Callable[[T], Hashable]\n\n    Returns\n\
            \    -------\n    unique : Iterable[T]\n    \"\""
        : null
    enum_get:
        ? "\"\"\n    Return an Enum member by `name`. If no such member exists in\
            \ `etype`\n    return `default`.\n    \"\""
        : null
    instance_tooltip:
        show_part:
            '{} = {}': null
            '... and {} others': null
            <b>{}</b>:<br/>: null
            <br/>: null
        Class: null
        Classes: null
        Meta: null
        Metas: null
        Feature: null
        Features: null
        <br/>: null
Orange/widgets/utils/PDFExporter.py:
    PDFExporter: null
Orange/widgets/utils/graphicsscene.py:
    GraphicsScene:
        ? "\"\"\n    A QGraphicsScene with better tool tip event dispatch.\n    \"\
            \""
        : null
        helpEvent:
            ? "\"\"\n        Reimplemented.\n\n        Send the help event to every\
                \ graphics item that is under the event's\n        scene position\
                \ (default `QGraphicsScene` only dispatches help events\n        to\
                \ `QGraphicsProxyWidget`s.\n        \"\""
            : null
    graphicsscene_help_event:
        ? "\"\"\n    Send the help event to every graphics item that is under the\
            \ `event`\n    scene position.\n    \"\""
        : null
Orange/widgets/utils/dendrogram.py:
    DendrogramWidget:
        '""A Graphics Widget displaying a dendrogram.""': null
        ClusterGraphicsItem:
            setGeometryData:
                ? "\"\"\n            Set the geometry (path) and the mouse hit area\
                    \ (hitArea) for this\n            item.\n            \"\""
                : null
        setSelectionMode:
            ? "\"\"\n        Set the selection mode.\n        \"\""
            : null
        selectionMode:
            ? "\"\"\n        Return the current selection mode.\n        \"\""
            : null
        clear:
            ? "\"\"\n        Clear the widget.\n        \"\""
            : null
        setRoot:
            ? "\"\"\n        Set the root cluster tree node for display.\n\n     \
                \   Parameters\n        ----------\n        root : Tree\n        \
                \    The tree root node.\n        \"\""
            : null
        root:
            ? "\"\"\n        Return the cluster tree root node.\n\n        Returns\n\
                \        -------\n        root : Tree\n        \"\""
            : null
        item:
            ? "\"\"\n        Return the ClusterGraphicsItem instance representing\
                \ the cluster `node`.\n        \"\""
            : null
        heightAt:
            ? "\"\"\n        Return the cluster height at the point in widget local\
                \ coordinates.\n        \"\""
            : null
        posAtHeight:
            ? "\"\"\n        Return a point in local coordinates for `height` (in\
                \ cluster\n        \"\""
            : null
        _set_hover_item:
            '""Set the currently highlighted item.""': null
        leafItems:
            ? "\"\"Iterate over the dendrogram leaf items (:class:`QGraphicsItem`).\n\
                \        \"\""
            : null
        leafAnchors:
            ? "\"\"Iterate over the dendrogram leaf anchor points (:class:`QPointF`).\n\
                \n        The points are in the widget local coordinates.\n      \
                \  \"\""
            : null
        selectedNodes:
            ? "\"\"\n        Return the selected cluster nodes.\n        \"\""
            : null
        setSelectedItems:
            '""Set the item selection.""': null
        setSelectedClusters:
            ? "\"\"Set the selected clusters.\n        \"\""
            : null
        isItemSelected:
            '""Is `item` selected (is a root of a selection).""': null
        isItemIncludedInSelection:
            '""Is item included in any selection.""': null
        setItemSelected:
            '""Set the `item`s selection state to `state`.""': null
        _create_label:
            C{i + 1}: null
        _add_selection:
            ? "\"\"Add selection rooted at item\n        \"\""
            : null
        _remove_selection:
            '""Remove selection rooted at item.""': null
        _selected_sub_items:
            '""Return all selected subclusters under item.""': null
        _selected_super_item:
            '""Return the selected super item if it exists.""': null
        _re_enumerate_selections:
            '""Re enumerate the selection items and update the colors.""': null
        _selection_poly:
            ? "\"\"\n        Return an selection geometry covering item and all its\
                \ children.\n        \"\""
            : null
        _update_selection_items:
            ? "\"\"Update the shapes of selection items after a scale change.\n  \
                \      \"\""
            : null
    Point: null
    x: null
    y: null
    Element: null
    anchor: null
    path: null
Orange/widgets/utils/localization.py:
    pl:
        '|': null
    plsi:
        '|': null
Orange/widgets/utils/datacaching.py:
    getCached:
        __data_cache: null
    setCached:
        __data_cache: null
    delCached:
        __data_cache: null
Orange/widgets/utils/SVGExporter.py:
    ? "\"\"\nA modified pyqtgraph/exporters/SVGExporter.py from\nhttps://github.com/pyqtgraph/pyqtgraph/\
        \ (available under MIT License)\n\nFixes:\n- SVGExporter: fix axes position\
        \ and scale\n  (https://github.com/pyqtgraph/pyqtgraph/pull/641)\n- SVG export:\
        \ handle Qt.NoPen on Qt5\n  (https://github.com/pyqtgraph/pyqtgraph/pull/642)\n\
        \nRemove this file when pyqtgraph updates.\n\"\""
    : null
    SVGExporter: null
Orange/widgets/utils/colorbrewer.py:
    Module 'colorbrewer' is obsolete and will be removed.\n: null
    Use palettes from 'Orange.widget.utils.colorpalettes'.: null
    diverging: null
    RdYlGn: null
    PRGn: null
    RdBu: null
    RdGy: null
    RdYlBu: null
    PiYG: null
    PuOr: null
    BrBG: null
    spectral: null
    Spectral: null
    qualitative: null
    Pastel2: null
    Pastel1: null
    Dark2: null
    Accent: null
    Paired: null
    Set1: null
    Set2: null
    Set3: null
    sequential: null
    Reds: null
    YlOrRd: null
    RdPu: null
    YlOrBr: null
    Greens: null
    YlGnBu: null
    GnBu: null
    BuPu: null
    Greys: null
    Oranges: null
    OrRd: null
    BuGn: null
    PuBu: null
    PuRd: null
    Blues: null
    PuBuGn: null
    YlGn: null
    Purples: null
    pastels: null
    Custom: null
Orange/widgets/utils/graphicsview.py:
    GraphicsWidgetView:
        ? "\"\"\n    A Graphics view with a single central QGraphicsWidget which is\
            \ resized\n    fo fit into the view.\n    \"\""
        : null
        __init__:
            Zoom in: null
            zoom-in-action: null
            Zoom out: null
            zoom-out-action: null
            Actual Size: null
            zoom-reset-action: null
            Zoom to fit: null
            zoom-to-fit-action: null
            setShortcutVisibleInContextMenu: null
        setZoomFactor:
            ? "\"\"\n        Set the zoom level `factor`\n\n        Parameters\n \
                \       ----------\n        factor:\n            Zoom level where\
                \ 100 is default 50 is half the size and 200 is\n            twice\
                \ the size\n        \"\""
            : null
        zoomFactor:
            ? "\"\"\n        Returns\n        -------\n        factor: float\n   \
                \         The zoom factor.\n        \"\""
            : null
        setCentralWidget:
            ? "\"\"\n        Set the central widget. Previous widget (if set) is unset.\n\
                \        The widget needs to be in this view's `scene()`\n       \
                \ \"\""
            : null
        centralWidget:
            '""Return the central widget.""': null
        widgetResizable:
            ? "\"\"\n        Should the central widget be resized (via .resize())\
                \ to match the view.\n        or should the view's scale be updated\
                \ instead.\n        \"\""
            : null
        setWidgetResizable:
            ? "\"\"\n        Parameters\n        ----------\n        resizable: bool\n\
                \        \"\""
            : null
    main:
        context:
            Aspect mode: null
            Ignore: null
            Keep: null
            Keep by expanding: null
    __main__: null
Orange/widgets/utils/progressbar.py:
    ProgressBarMixin:
        progressBar:
            ? "\"\"\n        Context manager for progress bar.\n\n        Using it\
                \ ensures that the progress bar is removed at the end without\n  \
                \      needing the `finally` blocks.\n\n        Usage:\n\n       \
                \     with self.progressBar(20) as progress:\n                ...\n\
                \                progress.advance()\n\n        or\n\n            with\
                \ self.progressBar() as progress:\n                ...\n         \
                \       progress.advance(0.15)\n\n        or\n\n            with self.progressBar():\n\
                \                ...\n                self.progressBarSet(50)\n\n\
                \        :param iterations: the number of iterations (optional)\n\
                \        :type iterations: int\n        \"\""
            : null
    _warn_deprecated_arg:
        '''processEvents'' argument is deprecated.\n': null
        'It does nothing and will be removed in the future (passing it ': null
        will raise a TypeError).: null
Orange/widgets/utils/buttons.py:
    VariableTextPushButton: null
    SimpleButton: null
    FixedSizeButton: null
    tooltip_with_shortcut:
        <span>{}</span>: null
        <kbd>{}</kbd>: null
        '&nbsp;&nbsp;': null
Orange/widgets/utils/owbasesql.py:
    OWBaseSql:
        ? "\"\"Base widget for connecting to a database.\n    Override `get_backend`\
            \ when subclassing to get corresponding backend.\n    \"\""
        : null
        Outputs:
            Data: null
        Error:
            '{}': null
        _setup_gui:
            Server: null
            '{}:{}': null
            Database[/Schema]: null
            Database or optionally Database/Schema: null
            '{}/{}': null
            Username: null
            Password: null
            Connect: null
        _credential_manager:
            'SQL Table: {}:{}': null
        _parse_host_port:
            ':': null
        _check_db_settings:
            /: null
        get_backend:
            ? "\"\"\n        Derived widgets should override this to get corresponding\
                \ backend.\n\n        Returns\n        -------\n        backend: Type[Backend]\n\
                \        \"\""
            : null
        on_connection_success:
            Host: null
            Port: null
            Database: null
            User name: null
        on_connection_error:
            \n: null
        get_table:
            ? "\"\"\n        Derived widgets should override this to get corresponding\
                \ table.\n\n        Returns\n        -------\n        table: Table\n\
                \        \"\""
            : null
        send_report:
            No database connection.: null
            Database: null
            Data: null
Orange/widgets/utils/classdensity.py:
    compute_density:
        C_CONTIGUOUS: null
Orange/widgets/utils/headerview.py:
    HeaderView:
        ? "\"\"\n    A QHeaderView reimplementing `paintSection` to better deal with\n\
            \    selections in large models.\n\n    In particular:\n      * `isColumnSelected`/`isRowSelected`\
            \ are never queried, only\n        `rowIntersectsSelection`/`columnIntersectsSelection`\
            \ are used.\n      * when `highlightSections` is not enabled the selection\
            \ model is not\n        queried at all.\n    \"\""
        : null
        __init__:
            QHeaderView: null
        initStyleOptionForIndex:
            ? "\"\"\n        Similar to initStyleOptionForIndex in Qt 6.0 with the\
                \ difference that\n        `isSectionSelected` is not used, only `sectionIntersectsSelection`\n\
                \        is used (isSectionSelected will scan the entire model column/row\n\
                \        when the whole column/row is selected).\n        \"\""
            : null
            textElideMode: null
        paintSection:
            ? "\"\"\n        Reimplemented from `QHeaderView`.\n        \"\""
            : null
Orange/widgets/utils/messages.py:
    ? "\"\"Mixin class for errors, warnings and information\n\nA class derived from\
        \ `OWWidget` can include member classes `Error`, `Warning`\nand `Information`,\
        \ derived from the same-named `OWWidget` classes. Each of\nthose contains\
        \ members that are instances of `UnboundMsg`, which is, for\nconvenience,\
        \ also exposed as `Orange.widgets.widget.Msg`. These members\nrepresent all\
        \ possible errors, like `Error.no_discrete_vars`, with exception\nof the deprecated\
        \ old-style errors.\n\nWhen the widget is instantiated, classes `Error`, `Warning`\
        \ and `Information`\nare instantiated and bound to the widget: their attribute\
        \ `widget` is the link\nto the widget that instantiated them. Their member\
        \ messages are replaced with\ninstances of `_BoundMsg`, which are bound to\
        \ the group through the `group`\nattribute.\n\nA message is shown by calling,\
        \ e.g. `self.Error.no_discrete_vars()`. The call\nformats the message and\
        \ tells the group to activate it::\n\n    self.formatted = self.format(*args,\
        \ **kwargs)\n    self.group.activate_msg(self)\n\nThe group adds it to the\
        \ dictionary of active messages (attribute `active`)\nand emits the signal\
        \ `messageActivated`. The signal is connected to the\nwidget's method `update_widget_state`,\
        \ which shows the message in the bar, and\n`WidgetManager`'s `__on_widget_state_changed`,\
        \ which manages the icons on the\ncanvas.\n\nClearing messages work analogously.\n\
        \"\""
    : null
    UnboundMsg: null
    MessageGroup: null
    MessagesMixin: null
    WidgetMessagesMixin: null
Orange/widgets/utils/settings.py:
    _T: null
    QSettings_readArray:
        ? "\"\"\n    Read the whole array from a QSettings instance.\n\n    Parameters\n\
            \    ----------\n    settings : QSettings\n    key : str\n    scheme :\
            \ Dict[str, ValueSpec]\n\n    Example\n    -------\n    >>> s = QSettings(\"\
            ./login.ini\")\n    >>> QSettings_readArray(s, \"array\", {\"username\"\
            : str, \"password\": str})\n    [{\"username\": \"darkhelmet\", \"password\"\
            : \"1234\"}}\n    >>> QSettings_readArray(\n    ...    s, \"array\", {\"\
            username\": str, \"noexist\": (str, \"~||~\")})\n    ...\n    [{\"username\"\
            : \"darkhelmet\", \"noexist\": \"~||~\"}}\n    \"\""
        : null
        normalize_spec:
            len(spec) != 2: null
    QSettings_writeArray:
        ? "\"\"\n    Write an array of values to a QSettings instance.\n\n    Parameters\n\
            \    ----------\n    settings : QSettings\n    key : str\n    values :\
            \ List[Dict[str, Any]]\n\n    Examples\n    --------\n    >>> s = QSettings(\"\
            ./login.ini\")\n    >>> QSettings_writeArray(\n    ...     s, \"array\"\
            , [{\"username\": \"darkhelmet\", \"password\": \"1234\"}]\n    ... )\n\
            \    \"\""
        : null
    QSettings_writeArrayItem:
        ? "\"\"\n    Write/update an array item at index.\n\n    Parameters\n    ----------\n\
            \    settings : QSettings\n    key : str\n    index : int\n    item :\
            \ Dict[str, Any]\n    arraysize : int\n        The full array size. Note\
            \ that the array will be truncated to this\n        size.\n    \"\""
        : null
Orange/widgets/utils/matplotlib_export.py:
    scatterplot_code: null
    scene_code: null
Orange/widgets/utils/sql.py:
    Download (and sample if necessary) the SQL data first: null
    check_sql_input:
        ? "\"\"\n    Wrapper for widget's set_data method that first checks if the\
            \ input\n    is a SqlTable and:\n    - if small enough, download all data\
            \ and convert to Table\n    - for large sql tables, show an error\n\n\
            \    :param f: widget's `set_data` method to wrap\n    :return: wrapped\
            \ method that handles SQL data inputs\n    \"\""
        : null
        new_f:
            download_sql_data: null
    check_sql_input_sequence:
        ? "\"\"\n    Wrapper for widget's set_data/insert_data methodss that first\
            \ checks\n    if the input is a SqlTable and:\n    - if small enough,\
            \ download all data and convert to Table\n    - for large sql tables,\
            \ show an error\n\n    :param f: widget's `set_data` method to wrap\n\
            \    :return: wrapped method that handles SQL data inputs\n    \"\""
        : null
        new_f:
            download_sql_data: null
Orange/widgets/utils/webview.py:
    ? '""

        ""'
    : null
    WebviewWidget: null
Orange/widgets/utils/textimport.py:
    ? "\"\"\nUtility widgets/helper for reading csv like files.\n\nContents\n--------\n\
        \n* CSVOptionsWidget\n  Edit options for interpreting a csv file\n\n* CSVImportWidget\n\
        \  Read and preview part of the file\n\n* TablePreviewModel\n  An QAbstractTableModel\
        \ feeding data from a csv.reader like rows iterator\n  implementing lazy iterative\
        \ loading (`QAbstractItemModel.fetchMore`)\n\n\"\""
    : null
    ColumnType:
        ? "\"\"\n    Possible column types\n    \"\""
        : null
        Skip: null
        Auto: null
        Numeric: null
        Categorical: null
        Text: null
        Time: null
    RowSpec:
        '""Row spec flags""': null
    CSVOptionsWidget:
        ? "\"\"\n    A widget presenting common CSV options.\n    \"\""
        : null
        Tab: null
        \t: null
        Comma: null
        ',': null
        Semicolon: null
        ;: null
        Space: null
        ' ': null
        __init__:
            ',': null
            '|': null
            \": null
            selectedEncoding: null
            utf-8: null
            encoding-combo-box: null
            Select file text encoding: null
            delimiter-combo-box: null
            Select cell delimiter character.: null
            Other: null
            .: null
            custom-delimiter-edit: null
            quote-edit-combo-box: null
            '''': null
            Encoding: null
            Cell delimiter: null
            Quote character: null
        dialect:
            ? "\"\"\n        Return the current state as a `csv.Dialect` instance.\n\
                \        \"\""
            : null
        setDialect:
            ? "\"\"\n        Set the current state to match dialect instance.\n  \
                \      \"\""
            : null
        setSelectedEncoding:
            ? "\"\"\n        Set the current selected encoding.\n\n        Parameters\n\
                \        ----------\n        encoding : str\n            Encoding\
                \ name such that `codecs.lookup` finds it.\n        \"\""
            : null
            separator: null
        encoding:
            ? "\"\"\n        Return the current selected encoding.\n        \"\""
            : null
            latin-1: null
        __show_encodings_widget:
            ? "\"\"\n        Show the encodings widget for selection\n        \"\""
            : null
            -encoding-selection-tool-window: null
            Customize Encodings List: null
        __set_visible_codecs:
            ascii: null
            Customize Encodings List...: null
    CSVImportWidget:
        ? "\"\"\n    CSV import widget with a live table preview\n    \"\""
        : null
        __init__:
            X: null
            grouping-separator-combo-box: null
            Thousands group separator: null
            None: null
            No separator: null
            .: null
            ',': null
            Space: null
            ' ': null
            '''': null
            '"(\.|,| |'')?': null
            decimal-separator-combo-box: null
            Decimal separator: null
            '"(\.|,)': null
            'Grouping:': null
            'Decimal:': null
            'Number separators:': null
            column-type-edit-combo-box: null
            Auto: null
            'The type will be determined automatically based ': null
            on column contents.: null
            Numeric: null
            Categorical: null
            Text: null
            Datetime: null
            separator: null
            Ignore: null
            The column will not be loaded: null
            Column type: null
            -error-overlay: null
            -error-text-label: null
        setDialect:
            ? "\"\"\n        Set the current state to match dialect instance.\n  \
                \      \"\""
            : null
        dialect:
            ? "\"\"\n        Return the current dialect.\n        \"\""
            : null
        setEncoding:
            '""Set the current text encoding.""': null
        encoding:
            '""Return the curent text encoding.""': null
        numbersFormat:
            group: null
            decimal: null
        __decimal_sep_activated:
            .: null
            ',': null
        __group_sep_activated:
            .: null
            ',': null
        columnTypes:
            ? "\"\"\n        Return the current column type annotations.\n\n     \
                \   Returns\n        -------\n        mapping : Dict[int, Optional[ColumnType]]\n\
                \            Mapping from column indices column types.\n        \"\
                \""
            : null
        setColumnTypes:
            ? "\"\"\n        Set column type annotations.\n\n        Parameters\n\
                \        ----------\n        types : Dict[int, Optional[ColumnType]]\n\
                \            Mapping from column indices to column types, `None` indicates\n\
                \            default (unspecified type, will be inferred)\n      \
                \  \"\""
            : null
        setStateForRow:
            ? "\"\"\n        Set the state for row.\n        \"\""
            : null
        stateForRow:
            ? "\"\"\n        Return the state for row.\n        \"\""
            : null
        rowStates:
            ? "\"\"\n        Return states for all rows with non None state\n    \
                \    \"\""
            : null
        setRowStates:
            ? "\"\"\n        Set the state for rows.\n\n        Note\n        ----\n\
                \        States for all rows not passed in rowstate is reset to `None`.\n\
                \        \"\""
            : null
        setSampleContents:
            ? "\"\"\n        Set a binary file-like stream for displaying sample content.\n\
                \n        The stream will be read as needed when the data view is\
                \ scrolled.\n\n        Note\n        ----\n        If the stream is\
                \ not seekable, its contents will be cached in memory.\n        If\
                \ and existing stream is already set it is NOT closed. The caller\n\
                \        is responsible for managing its lifetime.\n        \"\""
            : null
        __resetPreview:
            surrogateescape: null
        __vheader_context_menu:
            Skip: null
            Header: null
        __run_type_columns_menu:
            separator: null
        __setColumnType:
            group: null
            decimal: null
        columnTypeRanges:
            ? "\"\"\n        Return the column type specs as column ranges.\n\n  \
                \      Returns\n        -------\n        coltypes : List[Tuple[range,\
                \ ColumnType]]\n            A list of `(range, coltype)` tuples where\
                \ `range` are ranges\n            with step 1 and coltype a ColumnType.\
                \ The ranges are sorted\n            in ascending order.\n\n     \
                \   Note\n        ----\n        Unlike `columnTypes` this method does\
                \ not omit ColumnTypes.Auto\n        entries.\n        \"\""
            : null
        setColumnTypeRanges:
            ? "\"\"\n        Set column type specs for ranges.\n\n        Parameters\n\
                \        ----------\n        ranges : List[Tuple[range, ColumnType]]\n\
                \            For every `(range, coltype)` tuple set the corresponding\
                \ coltype.\n        \"\""
            : null
    _A: null
    _B: null
    Dialect:
        __init__:
            \r\n: null
        __repr__:
            ', ': null
            '{!r}': null
            Dialect(: null
            ): null
    LineEdit:
        ? "\"\"\n    A line edit widget with a `minimumContentsLength` property.\n\
            \n    Similar to QComboBox.minimumContentsLength\n    \"\""
        : null
        setMinimumContentsLength:
            ? "\"\"\n        Set the minimum number of characters that should fit\
                \ into the\n        line edit (used for size hinting).\n        \"\
                \""
            : null
        minimumContentsLength:
            ? "\"\"\n        Return the minimum number of characters that should fit\
                \ into the\n        line edit.\n        \"\""
            : null
        sizeHint:
            '""Reimplemented.""': null
            X: null
        minimumSizeHint:
            '""Reimplemented.""': null
    TextEditCombo:
        text:
            ? "\"\"\n        Return the current text.\n        \"\""
            : null
        setText:
            ? "\"\"\n        Set `text` as the current text (adding it to the model\
                \ if necessary).\n        \"\""
            : null
    Item:
        ? "\"\"\n    A QStandardItem subclass using a python dict as a backing store.\n\
            \n    Note\n    ----\n    Unlike QStandardItem, this class does not map\
            \ `Qt.DisplayRole` and\n    `Qt.EditRole` to the same value. Also, accessing\
            \ or setting via\n    `model.itemData` `model.setItemData` and will not\
            \ work.\n    \"\""
        : null
        clone:
            '""Reimplemented from QStandardItem""': null
        setData:
            '""Reimplemented from QStandardItem""': null
        data:
            '""Reimplemented from QStandardItem""': null
    CachedBytesIOWrapper:
        ? "\"\"\n    Read and cache data from `base`. When cache is not empty prepend\
            \ data from\n    the cache before switching to base\n\n    Base needs\
            \ to implement `read` method, cache must be read/write and\n    seekable.\n\
            \n    Utility wrapper to implement restartable reads for streams that\
            \ are not\n    seekable.\n    \"\""
        : null
    is_surrogate_escaped:
        '""Does `text` contain any surrogate escape characters.""': null
        \udc80: null
        \udcff: null
    PreviewItemDelegate:
        initStyleOption:
            '...': null
    HeaderItemDelegate:
        ? "\"\"\n    Paint the items with an alternate color scheme\n    \"\""
        : null
    icon_for_column_type:
        N: null
        red: null
        C: null
        green: null
        S: null
        black: null
        T: null
        deepskyblue: null
    ColumnValidateItemDelegate:
        validate:
            NA: null
            Na: null
            na: null
            n/a: null
            N/A: null
            '?': null
            .: null
    number_parser:
        .: null
    TablePreviewModel:
        ? "\"\"\n    Lazy populated table preview model.\n\n    The model reads rows\
            \ on demand from an 'rows' iterable when requested\n    (via fetchMore).\n\
            \    Additionally the client can set column/row header data.\n    \"\""
        : null
        setPreviewStream:
            ? "\"\"\n        Set an iterator over the rows.\n\n        The iterator\
                \ will be advanced on demand by `fetchMore`, while storing\n     \
                \   the returned values. Previous stream and its cached data is discarded.\n\
                \        \"\""
            : null
        canFetchMore:
            '""Reimplemented.""': null
        fetchMore:
            '""Reimplemented.""': null
        __tryFetchRows:
            ? "\"\"\n        Fetch and return a maximum of `n` rows from the source\
                \ preview stream.\n        \"\""
            : null
        rowCount:
            '""Reimplemented.""': null
        columnCount:
            '""Reimplemented.""': null
        data:
            '""Reimplemented.""': null
        headerData:
            '""Reimplemented.""': null
        setHeaderData:
            '""Reimplemented.""': null
        updateHeaderData:
            ? "\"\"\n        Update/set multiple header sections/roles at once.\n\n\
                \        Parameters\n        ----------\n        orientation : Qt.Orientation\n\
                \        values : Dict[int, Dict[Qt.ItemDataRole, Any]]\n        \
                \    A mapping of section indices to mapping of role to values.\n\
                \            e.g. `{1: {Qt.DisplayRole: \"A\"}}` sets the display\
                \ text to \"A\"\n        \"\""
            : null
        flags:
            '""Reimplemented.""': null
        errorString:
            ? "\"\"\n        Return the error string or None if no error occurred.\n\
                \        \"\""
            : null
    format_exception_csv:
        'CSV parsing error: ': null
    ? "\"\"\"\\\n ,A,B,C,D\n1,a,1,1,\n2,b,2,2,\n3,c,3,3,\n4,d,4,4,,\\\n\"\""
    : null
    main:
        rb: null
    __main__: null
Orange/widgets/utils/itemmodels.py:
    PyListModel: null
    VariableListModel:
        application/x-Orange-VariableList: null
        data:
            None: null
        variable_labels_tooltip:
            '%s = %s': null
            <br/>Variable Labels:<br/>: null
            <br/>: null
        discrete_variable_tooltip:
            '<b>%s</b><br/>Categorical with %i values: ': null
            ', ': null
            '%r': null
        time_variable_toltip:
            <b>%s</b><br/>Time: null
        continuous_variable_toltip:
            <b>%s</b><br/>Numeric: null
        string_variable_tooltip:
            <b>%s</b><br/>Text: null
    PyListModelTooltip: null
    DomainModel:
        __init__:
            ? "\"\"\n\n        Parameters\n        ----------\n        order: tuple\
                \ or int\n            Order of attributes, metas, classes, separators\
                \ and other options\n        separators: bool\n            If False,\
                \ remove separators from `order`.\n        placeholder: str\n    \
                \        The text that is shown when no variable is selected\n   \
                \     valid_types: tuple\n            (Sub)types of `Variable` that\
                \ are included in the model\n        alphabetical: bool\n        \
                \    If true, variables are sorted alphabetically.\n        skip_hidden_vars:\
                \ bool\n            If true, variables marked as \"hidden\" are skipped.\n\
                \        \"\""
            : null
        prevent_modification:
            e:
                '{} can be modified only by calling ''set_domain''': null
    AbstractSortTableModel:
        mapFromTableRows:
            Orange.widgets.utils.itemmodels.AbstractSortTableModel.mapFromSourceRows: null
        mapToTableRows:
            Orange.widgets.utils.itemmodels.AbstractSortTableModel.mapToSourceRows: null
    PyTableModel:
        ? "\"\" A model for displaying python tables (sequences of sequences) in\n\
            \    QTableView objects.\n\n    Parameters\n    ----------\n    sequence\
            \ : list\n        The initial list to wrap.\n    parent : QObject\n  \
            \      Parent QObject.\n    editable: bool or sequence\n        If True,\
            \ all items are flagged editable. If sequence, the True-ish\n        fields\
            \ mark their respective columns editable.\n\n    Notes\n    -----\n  \
            \  The model rounds numbers to human readable precision, e.g.:\n    1.23e-04,\
            \ 1.234, 1234.5, 12345, 1.234e06.\n\n    To set additional item roles,\
            \ use setData().\n    \"\""
        : null
        data:
            '{:.{}{}}': null
            f: null
            e: null
        setHorizontalHeaderLabels:
            ? "\"\"\n        Parameters\n        ----------\n        labels : list\
                \ of str or list of Variable\n        \"\""
            : null
        setVerticalHeaderLabels:
            ? "\"\"\n        Parameters\n        ----------\n        labels : list\
                \ of str or list of Variable\n        \"\""
            : null
        _check_sort_order:
            Can't modify PyTableModel when it's sorted: null
    TableModel:
        ? "\"\"\n    An adapter for using Orange.data.Table within Qt's Item View\
            \ Framework.\n\n    :param Orange.data.Table sourcedata: Source data table.\n\
            \    :param QObject parent:\n    \"\""
        : null
        Column: null
        var: null
        role: null
        background: null
        format: null
        Basket: null
        vars: null
        density: null
        __init__:
            format_sparse:
                ', ': null
                '{}={}': null
            format_sparse_bool:
                ', ': null
            make_basket_formater:
                sparse_x: null
                sparse_y: null
                sparse_metas: null
            len(sourcedata) > 2 ** 31 - 1: null
        columnSortKeyData:
            Orange.widgets.utils.itemmodels.TableModel.sortColumnData: null
        _columnSortKeyData:
            ? "\"\"\n        Return a sequence of source table objects which can be\
                \ used as\n        `keys` for sorting.\n\n        :param int column:\
                \ Sort column.\n        :param Qt.ItemRole role: Sort item role.\n\
                \n        \"\""
            : null
        data:
            ? "\"\"\n        Reimplemented from `QAbstractItemModel.data`\n      \
                \  \"\""
            : null
        parent:
            '""Reimplemented from `QAbstractTableModel.parent`.""': null
        rowCount:
            '""Reimplemented from `QAbstractTableModel.rowCount`.""': null
        columnCount:
            '""Reimplemented from `QAbstractTableModel.columnCount`.""': null
        headerData:
            '""Reimplemented from `QAbstractTableModel.headerData`.""': null
            '{...}': null
        _tooltip:
            ? "\"\"\n        Return an header tool tip text for an `column` descriptor.\n\
                \        \"\""
            : null
            <b>%s</b>: null
            <br/>: null
            '%s = %s': null
        _stats_for_column:
            ? "\"\"\n        Return BasicStats for `column` index.\n        \"\""
            : null
    ModelActionsWidget: null
    ListSingleSelectionModel:
        ? "\"\" Item selection model for list item models with single selection.\n\
            \n    Defines signal:\n        - selectedIndexChanged(QModelIndex)\n\n\
            \    \"\""
        : null
        selectedRow:
            ? "\"\" Return QModelIndex of the selected row or invalid if no selection.\n\
                \        \"\""
            : null
    _as_contiguous_range:
        Non-contiguous range.: null
    <: null
    '&lt;': null
    '>': null
    '&gt;': null
    ContinuousPalettesModel:
        ? "\"\"\n    Model for combo boxes\n    \"\""
        : null
    select_row:
        ? "\"\"\n    Select a `row` in an item view.\n    \"\""
        : null
    select_rows:
        ? "\"\"\n    Select several rows in view.\n\n    :param QAbstractItemView\
            \ view:\n    :param row_indices: Integer indices of rows to select.\n\
            \    :param command: QItemSelectionModel.SelectionFlags\n    \"\""
        : null
Orange/widgets/utils/graphicstextlist.py:
    TextListWidget:
        ? "\"\"\n    A linear text list widget.\n\n    Displays a list of uniformly\
            \ spaced text lines.\n\n    Parameters\n    ----------\n    parent: Optional[QGraphicsItem]\n\
            \    items: Iterable[str]\n    alignment: Qt.Alignment\n    orientation:\
            \ Qt.Orientation\n    \"\""
        : null
        __init__:
            sizePolicy: null
        setItems:
            ? "\"\"\n        Set items for display\n\n        Parameters\n       \
                \ ----------\n        items: Iterable[str]\n        \"\""
            : null
        setAlignment:
            ? "\"\"\n        Set the text item's alignment.\n        \"\""
            : null
        alignment:
            '""Return the text item''s alignment.""': null
        setOrientation:
            ? "\"\"\n        Set text orientation.\n\n        If Qt.Vertical items\
                \ are put in a vertical layout\n        if Qt.Horizontal the n items\
                \ are drawn rotated 90 degrees and laid out\n        horizontally\
                \ with first text items's top corner in the bottom left\n        of\
                \ `self.geometry()`.\n\n        Parameters\n        ----------\n \
                \       orientation: Qt.Orientation\n        \"\""
            : null
        clear:
            ? "\"\"\n        Remove all items.\n        \"\""
            : null
        count:
            ? "\"\"\n        Return the number of items\n        \"\""
            : null
        indexAt:
            ? "\"\"\n        Return the index of item at `pos`.\n        \"\""
            : null
        sizeHint:
            '""Reimplemented.""': null
        __width_for_font:
            '""Return item width for the font""': null
        __naturalsh:
            '""Return the natural size hint (preferred sh with no constraints).""': null
    _FuncArray:
        func: null
        length: null
Orange/widgets/utils/stickygraphicsview.py:
    StickyGraphicsView:
        ? "\"\"\n    A graphics view with sticky header/footer views.\n\n    Set the\
            \ scene rect of the header/footer geometry with\n    setHeaderRect/setFooterRect.\
            \ When scrolling they will be displayed\n    top/bottom of the viewport.\n\
            \    \"\""
        : null
        setHeaderSceneRect:
            ? "\"\"\n        Set the header scene rect.\n\n        Parameters\n  \
                \      ----------\n        rect : QRectF\n        \"\""
            : null
        setFooterSceneRect:
            ? "\"\"\n        Set the footer scene rect.\n\n        Parameters\n  \
                \      ----------\n        rect : QRectF\n        \"\""
            : null
        setScene:
            '""Reimplemented""': null
        setupViewport:
            '""Reimplemented""': null
            sticky-header-view: null
            sticky-footer-view: null
            sticky-header-overlay-container: null
            sticky-footer-overlay-container: null
        headerView:
            ? "\"\"\n        Return the header view.\n\n        Returns\n        -------\n\
                \        view: QGraphicsView\n        \"\""
            : null
        footerView:
            ? "\"\"\n        Return the footer view.\n\n        Returns\n        -------\n\
                \        view: QGraphicsView\n        \"\""
            : null
        scrollContentsBy:
            '""Reimplemented.""': null
        viewportEvent:
            '""Reimplemented.""': null
    _OverlayWidget:
        __init__:
            sticky-view-shadow: null
        changeEvent:
            sticky-view-shadow: null
    qgraphicsview_map_rect_from_scene:
        ? "\"\"Like QGraphicsView.mapFromScene(QRectF) but returning a QPolygonF\n\
            \    (without rounding).\n    \"\""
        : null
    qrectf_to_inscribed_rect:
        ? "\"\"\n    Return the largest integer QRect such that it is completely contained\
            \ in\n    `rect`.\n    \"\""
        : null
    main:
        Zoom in: null
        Zoom out: null
        Reset: null
    __main__: null
Orange/widgets/utils/image.py:
    qimage_from_array:
        ? "\"\"\n    Create and return an QImage from a (N, M, C) uint8 array where\
            \ C is 3 for\n    RGB and 4 for RGBA channels.\n\n    Parameters\n   \
            \ ----------\n    arr: (N, M C) uint8 array\n\n    Returns\n    -------\n\
            \    image: QImage\n        An QImage with size (M, N) in ARGB32 format\
            \ format depending on `C`.\n    \"\""
        : null
        Wrong number of channels (need 3 or 4, got {c}: null
    qrgb:
        '""A vectorized `qRgb`.""': null
    qrgba:
        '""A vectorized `qRgba`.""': null
Orange/widgets/utils/itemdelegates.py:
    FixedFormatNumericColumnDelegate:
        ? "\"\"\n    A numeric delegate displaying in a fixed format.\n\n    Parameters\n\
            \    ----------\n    ndecimals: int\n        The number of decimals in\
            \ the display\n    ndigits: int\n        The max number of digits in the\
            \ integer part. If the model returns\n        `ColumnDataSpanRole` data\
            \ for a column then the `ndigits` is derived\n        from that.\n\n \
            \       .. note:: This is only used for size hinting.\n\n    \"\""
        : null
        displayText:
            f: null
        spanData:
            ? "\"\"\n        Return the min, max numeric data values in the column\
                \ that `index`\n        is in.\n        \"\""
            : null
        template:
            X: null
            .: null
            '-': null
        sizeHint:
            X: null
    TableDataDelegate:
        ? "\"\"\n    A DataDelegate initialized to be used with\n    :class:`Orange.widgets.utils.itemmodels.TableModel`\n\
            \    \"\""
        : null
Orange/widgets/utils/filedialogs.py:
    open_filename_dialog_save: null
    open_filename_dialog: null
    RecentPath: null
    RecentPathsWidgetMixin: null
    RecentPathsWComboMixin: null
    dialog_formats:
        ? "\"\"\n    Return readable file types for QFileDialogs.\n    \"\""
        : null
        All readable files ({});;: null
        '*': null
        ' *': null
        ;;: null
        '{} (*{})': null
Orange/widgets/utils/plot/owplotgui_obsolete.py:
    ? "''\n\n.. index:: plot\n\n######################################\nGUI elements\
        \ for plots (``owplotgui``)\n######################################\n\nThis\
        \ module contains functions and classes for creating GUI elements commonly\
        \ used for plots.\n\n.. autoclass:: OrientedWidget\n    :show-inheritance:\n\
        \n.. autoclass:: StateButtonContainer\n    :show-inheritance:\n\n.. autoclass::\
        \ OWToolbar\n    :show-inheritance:\n\n.. autoclass:: OWButton\n    :show-inheritance:\n\
        \n.. autoclass:: OrangeWidgets.plot.OWPlotGUI\n    :members:\n\n''"
    : null
    AddVariablesDialog:
        __init__:
            Hidden Axes: null
            Add: null
            Cancel: null
        selected_rows:
            ? "\"\" Return the selected rows in the view.\n        \"\""
            : null
    VariablesSelection:
        __call__:
            sizePolicy: null
            selectionMode: null
            dragEnabled: null
            defaultDropAction: null
            dragDropOverwriteMode: null
            dragDropMode: null
            Displayed Axes: null
            Delete: null
            +: null
            Add new class label: null
            MINUS SIGN: null
            Remove selected class label: null
    OrientedWidget:
        ? "''\n        A simple QWidget with a box layout that matches its ``orientation``.\n\
            \    ''"
        : null
    OWToolbar:
        ? "''\n        A toolbar is a container that can contain any number of buttons.\n\
            \n        :param gui: Used to create containers and buttons\n        :type\
            \ gui: :obj:`.OWPlotGUI`\n\n        :param text: The name of this toolbar\n\
            \        :type text: str\n\n        :param orientation: The orientation\
            \ of this toolbar, either Qt.Vertical or Qt.Horizontal\n        :type\
            \ tex: int\n\n        :param buttons: A list of button identifiers to\
            \ be added to this toolbar\n        :type buttons: list of (int or tuple)\n\
            \n        :param parent: The toolbar's parent widget\n        :type parent:\
            \ :obj:`.QWidget`\n    ''"
        : null
    StateButtonContainer:
        ? "''\n        This class can contain any number of checkable buttons, of\
            \ which only one can be selected\n        at any time.\n\n        :param\
            \ gui: Used to create containers and buttons\n        :type gui: :obj:`.OWPlotGUI`\n\
            \n        :param buttons: A list of button identifiers to be added to\
            \ this toolbar\n        :type buttons: list of (int or tuple)\n\n    \
            \    :param orientation: The orientation of this toolbar, either Qt.Vertical\
            \ or Qt.Horizontal\n        :type tex: int\n\n        :param parent: The\
            \ toolbar's parent widget\n        :type parent: :obj:`.QWidget`\n   \
            \ ''"
        : null
    OWAction:
        ? "''\n      A :obj:`QAction` with convenience methods for calling a callback\
            \ or\n      setting an attribute of the plot.\n    ''"
        : null
        __init__:
            ../../icons: null
            .png: null
    OWButton:
        ? "''\n        A custom tool button which signal when its down state changes\n\
            \    ''"
        : null
    OWPlotGUI:
        ? "''\n        This class contains functions to create common user interface\
            \ elements (QWidgets)\n        for configuration and interaction with\
            \ the ``plot``.\n\n        It provides shorter versions of some methods\
            \ in :obj:`.gui` that are directly related to an\n        :obj:`.OWPlot`\
            \ object.\n\n        Normally, you don't have to construct this class\
            \ manually. Instead, first create the plot,\n        then use the :attr:`.OWPlot.gui`\
            \ attribute.\n\n        Most methods in this class have similar arguments,\
            \ so they are explaned here in a single\n        place.\n\n        :param\
            \ widget: The parent widget which will contain the newly created widget.\n\
            \        :type widget: QWidget\n\n        :param id: If ``id`` is an ``int``,\
            \ a button is constructed from the default table.\n                  \
            \ Otherwise, ``id`` must be tuple with 5 or 6 elements. These elements\n\
            \                   are explained in the next table.\n        :type id:\
            \ int or tuple\n\n        :param ids: A list of widget identifiers\n \
            \       :type ids: list of id\n\n        :param text: The text displayed\
            \ on the widget\n        :type text: str\n\n        When using widgets\
            \ that are specific to your visualization and not included here, you have\n\
            \        to provide your\n        own widgets id's. They are a tuple with\
            \ the following members:\n\n        :param id: An optional unique identifier\
            \ for the widget.\n                   This is only needed if you want\
            \ to retrive this widget using\n                   :obj:`.OWToolbar.buttons`.\n\
            \        :type id: int or str\n\n        :param text: The text to be displayed\
            \ on or next to the widget\n        :type text: str\n\n        :param\
            \ attr_name: Name of attribute which will be set when the button is clicked.\n\
            \                          If this widget is checkable, its check state\
            \ will be set\n                          according to the current value\
            \ of this attribute.\n                          If this parameter is empty\
            \ or None, no attribute will be read or set.\n        :type attr_name:\
            \ str\n\n        :param attr_value: The value that will be assigned to\
            \ the ``attr_name`` when the button is\n        clicked.\n        :type\
            \ attr: any\n\n        :param callback: Function to be called when the\
            \ button is clicked.\n                         If a string is passed as\
            \ ``callback``, a method by that name of ``plot``\n                  \
            \       will be called.\n                         If this parameter is\
            \ empty or ``None``, no function will be called\n        :type callback:\
            \ str or function\n\n        :param icon_name: The filename of the icon\
            \ for this widget, without the '.png' suffix.\n        :type icon_name:\
            \ str\n\n    ''"
        : null
        __init__:
            (Same color): null
            (Same shape): null
            (Same size): null
            (No labels): null
        Overlap: null
        Zoom: null
        state: null
        Dlg_zoom: null
        Reset zoom: null
        Dlg_zoom_reset: null
        Pan: null
        Dlg_pan_hand: null
        Select: null
        Dlg_arrow: null
        Add to selection: null
        selection_behavior: null
        Dlg_select_add: null
        Remove from selection: null
        Dlg_select_remove: null
        Toggle selection: null
        Dlg_select_toggle: null
        Replace selection: null
        Send selection: null
        send_selection: null
        Dlg_send: null
        Clear selection: null
        clear_selection: null
        Dlg_clear: null
        ShufflePoints: null
        shuffle_points: null
        Dlg_sort: null
        Animate plot: null
        animate_plot: null
        update_animations: null
        Animate points: null
        animate_points: null
        Antialias plot: null
        antialias_plot: null
        update_antialiasing: null
        Antialias points: null
        antialias_points: null
        Antialias lines: null
        antialias_lines: null
        Disable effects for large datasets: null
        auto_adjust_performance: null
        update_performance: null
        ? "''\n        The list of built-in buttons. It is a map of\n        id :\
            \ (name, attr_name, attr_value, callback, icon_name)\n\n        .. seealso::\
            \ :meth:`.tool_button`\n    ''"
        : null
        _check_box:
            ? "''\n            Adds a :obj:`.QCheckBox` to ``widget``.\n         \
                \   When the checkbox is toggled, the attribute ``value`` of the plot\
                \ object is set to\n            the checkbox' check state, and the\
                \ callback ``cb_name`` is called.\n        ''"
            : null
        antialiasing_check_box:
            ? "''\n            Creates a check box that toggles the Antialiasing of\
                \ the plot\n        ''"
            : null
            use_antialiasing: null
            Use antialiasing: null
            update_antialiasing: null
        jitter_size_slider:
            jitter_sizes: null
            jitter_size: null
            'Jittering: ': null
            None: null
            '%.1f %%': null
            '%d %%': null
        jitter_numeric_check_box:
            jitter_continuous: null
            Jitter numeric values: null
        show_legend_check_box:
            ? "''\n            Creates a check box that shows and hides the plot legend\n\
                \        ''"
            : null
            show_legend: null
            Show legend: null
            update_legend: null
        tooltip_shows_all_check_box:
            tooltip_shows_all: null
            Show all data on mouse hover: null
            cb_tooltip_shows_all: null
        class_density_check_box:
            class_density: null
            Show class density: null
        regression_line_check_box:
            show_reg_line: null
            Show regression line: null
        label_only_selected_check_box:
            label_only_selected: null
            Label only selected points: null
        filled_symbols_check_box:
            show_filled_symbols: null
            Show filled symbols: null
            update_filled_symbols: null
        grid_lines_check_box:
            show_grid: null
            Show gridlines: null
            update_grid: null
        animations_check_box:
            ? "''\n            Creates a check box that enabled or disables animations\n\
                \        ''"
            : null
            use_animations: null
            Use animations: null
            update_animations: null
        point_size_slider:
            ? "''\n            Creates a slider that controls point size\n       \
                \ ''"
            : null
            point_width: null
            'Symbol size:   ': null
            update_point_size: null
        alpha_value_slider:
            ? "''\n            Creates a slider that controls point transparency\n\
                \        ''"
            : null
            alpha_value: null
            'Opacity: ': null
            update_alpha_value: null
        color_value_combo:
            '""Creates a combo box that controls point color""': null
            attr_color: null
            'Color: ': null
            update_colors: null
        shape_value_combo:
            '""Creates a combo box that controls point shape""': null
            attr_shape: null
            'Shape: ': null
            update_shapes: null
        size_value_combo:
            '""Creates a combo box that controls point size""': null
            attr_size: null
            'Size: ': null
            update_sizes: null
        label_value_combo:
            '""Creates a combo box that controls point label""': null
            attr_label: null
            'Label: ': null
            update_labels: null
        point_properties_box:
            ? "''\n            Creates a box with controls for common point properties.\n\
                \            Currently, these properties are point size and transparency.\n\
                \        ''"
            : null
            Points: null
        plot_properties_box:
            ? "\"\"\n        Create a box with controls for common plot settings\n\
                \        \"\""
            : null
            Plot Properties: null
        create_box:
            ? "''\n            Creates a :obj:`.QGroupBox` with text ``name`` and\
                \ adds it to ``widget``.\n            The ``ids`` argument is a list\
                \ of widget ID's that will be added to this box\n        ''"
            : null
        tool_button:
            ? "''\n            Creates an :obj:`.OWButton` and adds it to the parent\
                \ ``widget``.\n        ''"
            : null
        menu_button:
            ? "''\n            Creates an :obj:`.OWButton` with a popup-menu and adds\
                \ it to the parent ``widget``.\n        ''"
            : null
        state_buttons:
            ? "''\n            This function creates a set of checkable buttons and\
                \ connects them so that only one\n            may be checked at a\
                \ time.\n        ''"
            : null
        toolbar:
            ? "''\n            Creates an :obj:`.OWToolbar` with the specified ``text``,\
                \ ``orientation``\n            and ``buttons`` and adds it to ``widget``.\n\
                \n            .. seealso:: :obj:`.OWToolbar`\n        ''"
            : null
        zoom_select_toolbar:
            Zoom / Select: null
        effects_box:
            Visual effects: null
        theme_combo_box:
            theme_name: null
            Theme: null
            Default: null
            Light: null
            Dark: null
Orange/widgets/utils/plot/__init__.py:
    ? '""

        Plot classes and tools that were once used in Orange widgets


        Due to lack of maintenance (non-functioning), the majority of it has been

        stripped in this commit

        ""'
    : null
Orange/widgets/utils/plot/owplotgui.py:
    ? "''\n\n.. index:: plot\n\n######################################\nGUI elements\
        \ for plots (``owplotgui``)\n######################################\n\nThis\
        \ module contains functions and classes for creating GUI elements commonly\
        \ used for plots.\n\n.. autoclass:: OrientedWidget\n    :show-inheritance:\n\
        \n.. autoclass:: StateButtonContainer\n    :show-inheritance:\n\n.. autoclass::\
        \ OWToolbar\n    :show-inheritance:\n\n.. autoclass:: OWButton\n    :show-inheritance:\n\
        \n.. autoclass:: OrangeWidgets.plot.OWPlotGUI\n    :members:\n\n''"
    : null
    variables_selection: null
    OrientedWidget:
        ? "''\n        A simple QWidget with a box layout that matches its ``orientation``.\n\
            \    ''"
        : null
    OWToolbar:
        ? "''\n        A toolbar is a container that can contain any number of buttons.\n\
            \n        :param gui: Used to create containers and buttons\n        :type\
            \ gui: :obj:`.OWPlotGUI`\n\n        :param text: The name of this toolbar\n\
            \        :type text: str\n\n        :param orientation: The orientation\
            \ of this toolbar, either Qt.Vertical or Qt.Horizontal\n        :type\
            \ tex: int\n\n        :param buttons: A list of button identifiers to\
            \ be added to this toolbar\n        :type buttons: list of (int or tuple)\n\
            \n        :param parent: The toolbar's parent widget\n        :type parent:\
            \ :obj:`.QWidget`\n    ''"
        : null
    StateButtonContainer:
        ? "''\n        This class can contain any number of checkable buttons, of\
            \ which only one can be selected\n        at any time.\n\n        :param\
            \ gui: Used to create containers and buttons\n        :type gui: :obj:`.OWPlotGUI`\n\
            \n        :param buttons: A list of button identifiers to be added to\
            \ this toolbar\n        :type buttons: list of (int or tuple)\n\n    \
            \    :param orientation: The orientation of this toolbar, either Qt.Vertical\
            \ or Qt.Horizontal\n        :type tex: int\n\n        :param parent: The\
            \ toolbar's parent widget\n        :type parent: :obj:`.QWidget`\n   \
            \ ''"
        : null
    OWAction:
        ? "''\n      A :obj:`QAction` with convenience methods for calling a callback\
            \ or\n      setting an attribute of the plot.\n    ''"
        : null
        __init__:
            ../../icons: null
            .png: null
    OWButton:
        ? "''\n        A custom tool button which signal when its down state changes\n\
            \    ''"
        : null
    OWPlotGUI:
        ? "''\n        This class contains functions to create common user interface\
            \ elements (QWidgets)\n        for configuration and interaction with\
            \ the ``plot``.\n\n        It provides shorter versions of some methods\
            \ in :obj:`.gui` that are directly related to an\n        :obj:`.OWPlot`\
            \ object.\n\n        Normally, you don't have to construct this class\
            \ manually. Instead, first create the plot,\n        then use the :attr:`.OWPlot.gui`\
            \ attribute.\n\n        Most methods in this class have similar arguments,\
            \ so they are explaned here in a single\n        place.\n\n        :param\
            \ widget: The parent widget which will contain the newly created widget.\n\
            \        :type widget: QWidget\n\n        :param id: If ``id`` is an ``int``,\
            \ a button is constructed from the default table.\n                  \
            \ Otherwise, ``id`` must be tuple with 5 or 6 elements. These elements\n\
            \                   are explained in the next table.\n        :type id:\
            \ int or tuple\n\n        :param ids: A list of widget identifiers\n \
            \       :type ids: list of id\n\n        :param text: The text displayed\
            \ on the widget\n        :type text: str\n\n        When using widgets\
            \ that are specific to your visualization and not included here, you have\n\
            \        to provide your\n        own widgets id's. They are a tuple with\
            \ the following members:\n\n        :param id: An optional unique identifier\
            \ for the widget.\n                   This is only needed if you want\
            \ to retrive this widget using\n                   :obj:`.OWToolbar.buttons`.\n\
            \        :type id: int or str\n\n        :param text: The text to be displayed\
            \ on or next to the widget\n        :type text: str\n\n        :param\
            \ attr_name: Name of attribute which will be set when the button is clicked.\n\
            \                          If this widget is checkable, its check state\
            \ will be set\n                          according to the current value\
            \ of this attribute.\n                          If this parameter is empty\
            \ or None, no attribute will be read or set.\n        :type attr_name:\
            \ str\n\n        :param attr_value: The value that will be assigned to\
            \ the ``attr_name`` when the button is\n        clicked.\n        :type\
            \ attr: any\n\n        :param callback: Function to be called when the\
            \ button is clicked.\n                         If a string is passed as\
            \ ``callback``, a method by that name of ``plot``\n                  \
            \       will be called.\n                         If this parameter is\
            \ empty or ``None``, no function will be called\n        :type callback:\
            \ str or function\n\n        :param icon_name: The filename of the icon\
            \ for this widget, without the '.png' suffix.\n        :type icon_name:\
            \ str\n\n    ''"
        : null
        __init__:
            (Same color): null
            (Same shape): null
            (Same size): null
            (No labels): null
        Zoom: null
        state: null
        Dlg_zoom: null
        Reset zoom: null
        Dlg_zoom_reset: null
        Pan: null
        Dlg_pan_hand: null
        Select: null
        Dlg_arrow: null
        Add to selection: null
        selection_behavior: null
        Dlg_select_add: null
        Remove from selection: null
        Dlg_select_remove: null
        Toggle selection: null
        Dlg_select_toggle: null
        Replace selection: null
        Send selection: null
        send_selection: null
        Dlg_send: null
        Clear selection: null
        clear_selection: null
        Dlg_clear: null
        ShufflePoints: null
        shuffle_points: null
        Dlg_sort: null
        Animate plot: null
        animate_plot: null
        update_animations: null
        Animate points: null
        animate_points: null
        Antialias plot: null
        antialias_plot: null
        update_antialiasing: null
        Antialias points: null
        antialias_points: null
        Antialias lines: null
        antialias_lines: null
        Disable effects for large datasets: null
        auto_adjust_performance: null
        update_performance: null
        ? "''\n        The list of built-in buttons. It is a map of\n        id :\
            \ (name, attr_name, attr_value, callback, icon_name)\n\n        .. seealso::\
            \ :meth:`.tool_button`\n    ''"
        : null
        _check_box:
            ? "''\n            Adds a :obj:`.QCheckBox` to ``widget``.\n         \
                \   When the checkbox is toggled, the attribute ``value`` of the plot\
                \ object is set to\n            the checkbox' check state, and the\
                \ callback ``cb_name`` is called.\n        ''"
            : null
        antialiasing_check_box:
            ? "''\n            Creates a check box that toggles the Antialiasing of\
                \ the plot\n        ''"
            : null
            use_antialiasing: null
            Use antialiasing: null
            update_antialiasing: null
        jitter_size_slider:
            'Jittering: ': null
            jitter_size: null
            jitter_sizes: null
        jitter_numeric_check_box:
            jitter_continuous: null
            Jitter numeric values: null
            update_jittering: null
        show_legend_check_box:
            ? "''\n            Creates a check box that shows and hides the plot legend\n\
                \        ''"
            : null
            show_legend: null
            Show legend: null
            update_legend_visibility: null
        tooltip_shows_all_check_box:
            tooltip_shows_all: null
            Show all data on mouse hover: null
        class_density_check_box:
            class_density: null
            Show color regions: null
        regression_line_check_box:
            show_reg_line: null
            Show regression line: null
        label_only_selected_check_box:
            label_only_selected: null
            Label only selection and subset: null
        filled_symbols_check_box:
            show_filled_symbols: null
            Show filled symbols: null
            update_filled_symbols: null
        grid_lines_check_box:
            show_grid: null
            Show gridlines: null
            update_grid_visibility: null
        animations_check_box:
            ? "''\n            Creates a check box that enabled or disables animations\n\
                \        ''"
            : null
            use_animations: null
            Use animations: null
            update_animations: null
        point_size_slider:
            'Symbol size: ': null
            ? "''\n            Creates a slider that controls point size\n       \
                \ ''"
            : null
            point_width: null
            sizes_changed: null
        alpha_value_slider:
            'Opacity: ': null
            ? "''\n            Creates a slider that controls point transparency\n\
                \        ''"
            : null
            alpha_value: null
            colors_changed: null
        color_value_combo:
            'Color: ': null
            '""Creates a combo box that controls point color""': null
            attr_color: null
            colors_changed: null
        shape_value_combo:
            'Shape: ': null
            '""Creates a combo box that controls point shape""': null
            attr_shape: null
            shapes_changed: null
        size_value_combo:
            'Size: ': null
            '""Creates a combo box that controls point size""': null
            attr_size: null
            sizes_changed: null
        label_value_combo:
            'Label: ': null
            '""Creates a combo box that controls point label""': null
            attr_label: null
            labels_changed: null
        point_properties_box:
            Attributes: null
            ? "''\n            Creates a box with controls for common point properties.\n\
                \            Currently, these properties are point size and transparency.\n\
                \        ''"
            : null
        effects_box:
            ? "\"\"\n        Create a box with controls for common plot settings\n\
                \        \"\""
            : null
        plot_properties_box:
            ? "\"\"\n        Create a box with controls for common plot settings\n\
                \        \"\""
            : null
        create_box:
            ? "''\n            Creates a :obj:`.QGroupBox` with text ``name`` and\
                \ adds it to ``widget``.\n            The ``ids`` argument is a list\
                \ of widget ID's that will be added to this box\n        ''"
            : null
        tool_button:
            ? "''\n            Creates an :obj:`.OWButton` and adds it to the parent\
                \ ``widget``.\n        ''"
            : null
        menu_button:
            ? "''\n            Creates an :obj:`.OWButton` with a popup-menu and adds\
                \ it to the parent ``widget``.\n        ''"
            : null
        state_buttons:
            ? "''\n            This function creates a set of checkable buttons and\
                \ connects them so that only one\n            may be checked at a\
                \ time.\n        ''"
            : null
        toolbar:
            ? "''\n            Creates an :obj:`.OWToolbar` with the specified ``text``,\
                \ ``orientation``\n            and ``buttons`` and adds it to ``widget``.\n\
                \n            .. seealso:: :obj:`.OWToolbar`\n        ''"
            : null
        zoom_select_toolbar:
            Zoom / Select: null
        theme_combo_box:
            theme_name: null
            Theme: null
            Default: null
            Light: null
            Dark: null
        box_zoom_select:
            Zoom/Select: null
    VariableSelectionModel:
        mimeData:
            '''see properties: item_index': null
            item_index: null
        dropMimeData:
            item_index: null
    VariablesDelegate:
        paint:
            ' Add ': null
            ' Remove ': null
Orange/widgets/utils/plot/owpalette.py:
    create_palette: null
    OWPalette:
        ? "\"\"\n        These constants are defined here so that they can be changed\
            \ without\n        extensive changes to the visualizations\n    \"\""
        : null
Orange/widgets/utils/tests/concurrent_example.py:
    run:
        Calculating...: null
    OWConcurrentWidget:
        Projection: null
        _add_controls:
            param: null
            'Parameter:': null
            Param A: null
            Param B: null
            Start: null
        _toggle_run:
            Resume: null
        _run:
            Stop: null
        on_done:
            Start: null
    __main__: null
    iris: null
Orange/widgets/utils/save/owsavebase.py:
    ~{os.sep}: null
    OWSaveBase:
        ? "\"\"\n    Base class for Save widgets\n\n    A derived class must provide,\
            \ at minimum:\n\n    - class `Inputs` and the corresponding handler that:\n\
            \n      - saves the input to an attribute `data`, and\n      - calls `self.on_new_input`.\n\
            \n    - a class attribute `filters` with a list of filters or a dictionary\
            \ whose\n      keys are filters OR a class method `get_filters` that returns\
            \ such a\n      list or dictionary\n    - method `do_save` that saves\
            \ `self.data` into `self.filename`\n\n    Alternatively, instead of defining\
            \ `do_save` a derived class can make\n    `filters` a dictionary whose\
            \ keys are classes that define a method `write`\n    (like e.g. `TabReader`).\
            \ Method `do_save` defined in the base class calls\n    the writer corresponding\
            \ to the currently chosen filter.\n\n    A minimum example of derived\
            \ class is\n    `Orange.widgets.model.owsavemodel.OWSaveModel`.\n    A\
            \ more advanced widget that overrides a lot of base class behaviour is\n\
            \    `Orange.widgets.data.owsave.OWSave`.\n    \"\""
        : null
        Information:
            Empty input; nothing was saved.: null
        Error:
            File name is not set.: null
            File format is unsupported.\n{}: null
            '{}': null
        __init__:
            ? "\"\"\n        Set up the gui.\n\n        The gui consists of a checkbox\
                \ for auto save and two buttons put on a\n        grid layout. Derived\
                \ widgets that want to place controls above the auto\n        save\
                \ widget can set the `start_row` argument to the first free row,\n\
                \        and this constructor will start filling the grid there.\n\
                \n        Args:\n            start_row (int): the row at which to\
                \ start filling the gui\n        \"\""
            : null
            auto_save: null
            Autosave when receiving new data: null
            Save as {self.stored_name}: null
            Save: null
            Save as ...: null
        default_filter:
            '""Returns the first filter in the list""': null
        last_dir:
            '""Store _absolute_path and update relative path (stored_path)""': null
            basedir: null
            /: null
        _abs_path_from_setting:
            ? "\"\"\n        Compute absolute path from `stored_path` from settings.\n\
                \n        Absolute stored path is used only if it exists.\n      \
                \  Auto save is disabled unless stored_path is relative.\n       \
                \ \"\""
            : null
            basedir: null
        workflowEnvChanged:
            basedir: null
        writer:
            ? "\"\"\n        Return the active writer or None if there is no writer\
                \ for this filter\n\n        The base class uses this property only\
                \ in `do_save` to find the writer\n        corresponding to the filter.\
                \ Derived classes (e.g. OWSave) may also use\n        it elsewhere.\n\
                \n        Filter may not exist if it comes from settings saved in\
                \ Orange with\n        some add-ons that are not (or no longer) present,\
                \ or if support for\n        some extension was dropped, like the\
                \ old Excel format.\n        \"\""
            : null
        on_new_input:
            ? "\"\"\n        This method must be called from input signal handler.\n\
                \n        - It clears errors, warnings and information and calls\n\
                \          `self.update_messages` to set the as needed.\n        -\
                \ It also calls `update_status` the can be overriden in derived\n\
                \          methods to set the status (e.g. the number of input rows)\n\
                \        - Calls `self.save_file` if `self.auto_save` is enabled and\n\
                \          `self.filename` is provided.\n        \"\""
            : null
        save_file_as:
            ? "\"\"\n        Ask the user for the filename and try saving the file\n\
                \        \"\""
            : null
            Save as {self.stored_name}: null
        save_file:
            ? "\"\"\n        If file name is provided, try saving, else call save_file_as\n\
                \        \"\""
            : null
        _try_save:
            ? "\"\"\n        Private method that calls do_save within try-except that\
                \ catches and\n        shows IOError. Do nothing if not data or no\
                \ file name.\n        \"\""
            : null
        do_save:
            ? "\"\"\n        Do the saving.\n\n        Default implementation calls\
                \ the write method of the writer\n        corresponding to the current\
                \ filter. This requires that get_filters()\n        returns is a dictionary\
                \ whose keys are classes.\n\n        Derived classes may simplify\
                \ this by providing a list of filters and\n        override do_save.\
                \ This is particularly handy if the widget supports only\n       \
                \ a single format.\n        \"\""
            : null
        update_messages:
            ? "\"\"\n        Update errors, warnings and information.\n\n        Default\
                \ method sets no_file_name if auto_save is enabled but file name\n\
                \        is not provided; and empty_input if file name is given but\
                \ there is no\n        data.\n\n        Derived classes that define\
                \ further messages will typically set them in\n        this method.\n\
                \        \"\""
            : null
        update_status:
            ? "\"\"\n        Update the input/output indicator. Default method does\
                \ nothing.\n        \"\""
            : null
        initial_start_dir:
            ? "\"\"\n        Provide initial start directory\n\n        Return either\
                \ the current file's path, the last directory or home.\n        \"\
                \""
            : null
        suggested_name:
            ? "\"\"\n        Suggest the name for the output file or return an empty\
                \ string.\n        \"\""
            : null
        _replace_extension:
            ? "\"\"\n        Remove all extensions that appear in any filter.\n\n\
                \        Double extensions are broken in different weird ways across\
                \ all systems,\n        including omitting some, like turning iris.tab.gz\
                \ to iris.gz. This\n        function removes anything that can appear\
                \ anywhere.\n        \"\""
            : null
            .: null
        _extension_from_filter:
            '".*\(\*?(\..*)\)$': null
        migrate_settings:
            last_dir: null
            stored_path: null
            filename: null
            stored_name: null
        darwin: null
        win32: null
        get_save_filename:
            Save File: null
            ;;: null
Orange/widgets/visualize/owtreeviewer2d.py:
    GraphNode:
        __init__:
            edges: false
        graph_edges:
            '""Get a list of the edges that stem from the node.""': null
        graph_add_edge:
            '""Add an edge stemming from the node.""': null
    TextTreeNode:
        backgroundBrush:
            _background_brush: false
            defaultItemBrush: false
        QBrush: false
        Background brush: false
        setHtml:
            <body>: false
            </body>: false
        rect:
            _rect: false
        boundingRect:
            _rect: false
    TreeGraphicsView:
        resized: false
    TreeGraphicsScene:
        _fix_pos:
            '""Fix the position of the tree stemming from the given node.""': null
            brect:
                '""Get the bounding box of the parent rect and all its children.""': null
    OWTreeViewer2D:
        scene: false
        __init__:
            Tree: Drevo
            No tree.: Ni drevesa.
            Display: Prikaz
            'Zoom: ': 'Povečava: '
            zoom: false
            'Width: ': 'Širina: '
            max_node_width: false
            'Depth: ': 'Globina: '
            max_tree_depth: false
            Unlimited: Neomejena
            '{} levels': null
            'Edge width: ': 'Širina povezav: '
            line_width_method: false
            Fixed: Enaka
            Relative to root: Relativna glede na koren
            Relative to parent: Relativna glede na očeta
        send_report:
            Tree: Drevo
            .svg: false
        node_tooltip:
            tree node: vozlišče drevesa
Orange/widgets/visualize/owscatterplot.py:
    ScatterPlotVizRank:
        Score Plots: null
        check_preconditions:
            color_required: null
            Color variable is not selected: null
    ParameterSetter:
        axis_items:
            item: null
        reg_line_label_items:
            label: null
    OWScatterPlotGraph:
        _regression_line:
            r = {rvalue:.2f}: null
        _add_line:
            label: null
        update_reg_line_label_colors:
            label: null
        update_regression_line:
            '#505050': null
    OWScatterPlot:
        ? "\"\"Scatterplot visualization with explorative analysis and intelligent\n\
            \    data visualization enhancements.\"\""
        : null
        Scatter Plot: null
        'Interactive scatter plot visualization with ': null
        intelligent data visualization enhancements.: null
        icons/ScatterPlot.svg: null
        Inputs:
            Features: null
        Outputs:
            Features: null
        Warning:
            'Plot cannot be displayed because ''{}'' or ''{}'' ': null
            is missing for all data points.: null
        Information:
            Large SQL table; showing a sample.: null
            Points with missing '{}' or '{}' are not displayed: null
        _add_controls:
            graph.orthonormal_regression: null
            Treat variables as independent: null
            If checked, fit line to group (minimize distance from points);\n: null
            otherwise fit y as a function of x (minimize vertical distances): null
        _add_controls_axis:
            Axes: null
            attr_x: null
            'Axis x:': null
            attr_y: null
            'Axis y:': null
            Find Informative Projections: null
        _add_controls_sampling:
            auto_sample: null
            Sample: null
            Sampling: null
        _vizrank_color_change:
            No data on input: null
            Data is sparse: null
            Not enough features for ranking: null
            Color variable is not selected: null
            Color variable has no values: null
        set_data:
            findvar:
                '""Find a Orange.data.Variable in `iterable` by name""': null
        _point_tooltip:
            <br/>: null
            '{} = {}': null
            <b>{}</b><br/><br/>{}: null
        set_subset_data:
            Data subset does not support large Sql tables: null
        get_axes:
            bottom: null
            left: null
        get_widget_name_extension:
            '{} vs {}': null
        _get_send_report_caption:
            Color: null
            Label: null
            Shape: null
            Size: null
            Jittering: null
        migrate_settings:
            selection: null
            selection_group: null
            auto_send_selection: null
            auto_commit: null
            graph: null
            jitter_continuous: null
        migrate_context:
            attr_color: null
            graph: null
            attr_size: null
            attr_shape: null
            attr_label: null
            attr_x: null
            attr_y: null
    __main__: null
    iris: null
Orange/widgets/visualize/owtreeviewer.py:
    '""Widget for visualization of tree models""': null
    PieChart:
        ? "\"\"PieChart graphics item added at the corner of classification tree nodes\n\
            \    \"\""
        : null
    TreeNode:
        '""TreeNode for trees corresponding to base.Tree models""': null
        rect:
            _rect: false
        boundingRect:
            attr: false
    OWTreeGraph:
        '""Graphical visualization of tree models""': null
        Tree Viewer: Drevogled
        icons/TreeViewer.svg: false
        Inputs:
            Tree: Drevo
            Classification Tree: false
            Regression Tree: false
        Outputs:
            Selected Data: Izbrani podatki
            selected-data: false
            annotated-data: false
        Orange.widgets.classify.owclassificationtreegraph.OWClassificationTreeGraph: false
        Orange.widgets.classify.owregressiontreegraph.OWRegressionTreeGraph: false
        Default: Privzeto
        Number of instances: Število primerov
        Mean value: Srednja vrednost
        Variance: Varianca
        __init__:
            'Target class: ': 'Ciljni razred: '
        set_node_info:
            '""Set the content of the node""': null
        _update_node_info_attr_name:
            <hr/>{}: true
        ctree:
            '""Input signal handler""': null
            No tree.: Ni drevesa.
            'Target class: ': 'Ciljni razred: '
            None: Brez
            'Color by: ': Obarvaj po
            '{} nodes, {} leaves': null
        walkcreate:
            '""Create a structure of tree nodes from the given model""': null
        node_tooltip:
            <br>: false
        send_report:
            Tree size: Velikost drevesa
            Edge widths: Širina vej
            Fixed: Enaka
            Relative to root: Relativna glede na koren
            Relative to parent: Relativna glede na očeta
            Target class: Ciljni razred
            Color by: Obarvaj po
        update_node_info_cls:
            '""Update the printed contents of the node for classification trees""': null
            <b>{self.domain.class_vars[0].values[int(modus)]}</b><br/>: true
            100%, {total}/{total}: true
            '{100 * tabs:2.1f}%, {int(total * tabs)}/{total}': true
            '<p style="line-height: 120%; margin-bottom: 0">{text}</p>': true
        update_node_info_reg:
            '""Update the printed contents of the node for regression trees""': null
            <b>{mean:.1f}</b> ± {var:.1f}<br/>: true
            '{insts} instances': null
            '<p style="line-height: 120%; margin-bottom: 0">{text}</p>': true
        toggle_node_color_cls:
            '""Update the node color for classification trees""': null
        toggle_node_color_reg:
            '""Update the node color for regression trees""': null
    __main__: false
    titanic: false
Orange/widgets/visualize/ownomogram.py:
    SortBy:
        items:
            No sorting: null
            Name: null
            Absolute importance: null
            Positive influence: null
            Negative influence: null
    DotItem:
        '""ul {margin-top: 1px; margin-bottom: 1px;}""': null
        ? "\"\"<html><head><style type=\"text/css\">{}</style>\n    </head><body><b>{}</b><hr/>{}</body></html>\n\
            \    \"\""
        : null
    ProbabilitiesDotItem:
        get_tooltip_text:
            'Total: {} <br/>Probability: {:.0%}': null
    DiscreteMovableDotItem:
        get_tooltip_text:
            'Points: {}': null
            '{}: {:.0%}<br/>': null
        _get_tooltip_labels_with_percentages:
            <: null
            '&lt;': null
    GraphicsColorAnimator:
        __init__:
            '''brushColor': null
    ContinuousItemMixin:
        get_tooltip_text:
            'Points: {}': null
            'Value: {}': null
    ProbabilitiesRulerItem:
        __init__:
            Total: null
            ' ': null
    OWNomogram:
        Nomogram: null
        ' Nomograms for Visualization of Naive Bayesian': null
        ' and Logistic Regression Classifiers.': null
        icons/Nomogram.svg: null
        Inputs:
            Classifier: null
            Data: null
        Outputs:
            Features: null
        scene: null
        Error:
            'Nomogram accepts only Naive Bayes and ': null
            Logistic Regression classifiers.: null
        __init__:
            Target class: null
            target_class_index: null
            normalize_probabilities: null
            Normalize probabilities: null
            For multiclass data 1 vs. all probabilities do not: null
            ' sum to 1 and therefore could be normalized.': null
            scale: null
            Point scale: null
            Log odds ratios: null
            Scale: null
            Display features: null
            display_index: null
            All: null
            'Best ranked:': null
            n_attributes: null
            ' ': null
            sort_index: null
            'Rank by:': null
            cont_feature_dim_index: null
            'Numeric features: ': null
            1D projection: null
            2D curve: null
            GraphicsView:
                __init__:
                    'QGraphicsView {background: white}': null
        _class_combo_changed:
            ignore: null
        update_scene:
            Points: null
            Probabilities (%): null
        get_ordered_attributes:
            '""Return (in_domain_index, attr) pairs, ordered by method in SortBy combo""': null
        create_footer_nomogram:
            '{}=''{}''': null
        reset_settings:
            ignore: null
            combo box 'target_class_index' is empty: null
    __main__: null
    heart_disease: null
Orange/widgets/visualize/owbarplot.py:
    ParameterSetter:
        Gridlines: null
        Show: null
        Bottom axis: null
        Group axis: null
        Vertical ticks: null
        update_setters:
            update_bottom_axis:
                bottom: null
        axis_items:
            item: null
    BarPlotGraph:
        __init__:
            bottom: null
            left: null
        update_axes:
            left: null
            bottom: null
        reset_view:
            height: null
        select_by_rectangle:
            x: null
            height: null
        __get_index_at:
            height: null
        __select_bars:
            height: null
    OWBarPlot:
        Bar Plot: null
        Visualizes comparisons among categorical variables.: null
        icons/BarPlot.svg: null
        chart: null
        Inputs:
            Data: null
            Data Subset: null
        Outputs:
            Selected Data: null
        graph.plotItem: null
        Error:
            Plotting requires a numeric feature.: null
        Information:
            Data has too many instances. Only first {}: null
            ' are shown.': null
        Enumeration: null
        _add_controls:
            selected_var: null
            'Values:': null
            None: null
            group_var: null
            'Group by:': null
            annot_var: null
            'Annotations:': null
            (Same color): null
            color_var: null
            'Color:': null
            auto_commit: null
        grouped_indices:
            mergesort: null
        init_attr_values:
            selected_var: null
            group_var: null
            annot_var: null
            color_var: null
        get_tooltip:
            <br/>: null
            '{} = {}': null
            <b>{}</b><br/><br/>{}: null
    __main__: null
    iris: null
Orange/widgets/visualize/owpythagorastree.py:
    '""Pythagorean tree viewer for visualizing trees.""': null
    OWPythagorasTree:
        Pythagorean Tree: null
        Pythagorean Tree visualization for tree like-structures.: null
        icons/PythagoreanTree.svg: null
        fractal: null
        Inputs:
            Tree: null
        Outputs:
            Selected Data: null
        scene: null
        corner: null
        offset: null
        __init__:
            Normal: null
            Square root: null
            Logarithmic: null
            Tree Info: null
            Display Settings: null
            depth_limit: null
            Depth: null
            target_class_index: null
            Target class: null
            size_calc_idx: null
            Size: null
            size_log_scale: null
            Log scale factor: null
            Plot Properties: null
            tooltips_enabled: null
            Enable tooltips: null
            show_legend: null
            Show legend: null
            Redraw: null
        set_tree:
            '""When a different tree is given.""': null
            meta_target_class_index: null
            meta_size_calc_idx: null
            meta_depth_limit: null
        clear:
            '""Clear all relevant data from the widget.""': null
        update_depth:
            '""This method should be called when the depth changes""': null
        update_colors:
            '""When the target class / node coloring needs to be updated.""': null
        update_size_calc:
            '""When the tree size calculation is updated.""': null
        invalidate_tree:
            '""When the tree needs to be completely recalculated.""': null
        update_tooltip_enabled:
            '""When the tooltip visibility is changed and need to be updated.""': null
        update_show_legend:
            '""When the legend visibility needs to be updated.""': null
        _update_info_box:
            'Nodes: {}\nDepth: {}': null
        _update_log_scale_slider:
            '""On calc method combo box changed.""': null
            Logarithmic: null
        _clear_info_box:
            No tree on input: null
        _set_max_depth:
            '""Set the depth to the max depth and update appropriate actors.""': null
        onDeleteWidget:
            '""When deleting the widget.""': null
        commit:
            '""Commit the selected data to output.""': null
        send_report:
            '""Send report.""': null
        _update_target_class_combo:
            Target class: null
            None: null
            Node color: null
        _classification_update_legend_colors:
            other: null
            '#ffffff': null
    TreeGraphicsView:
        ? "\"\"QGraphicsView that contains all functionality we will use to display\n\
            \    tree.\"\""
        : null
    TreeGraphicsScene:
        '""QGraphicsScene that the tree uses.""': null
    __main__: null
    iris: null
Orange/widgets/visualize/__init__.py:
    ? '""

        =========

        Visualize

        =========


        Widgets for data visualization.


        ""'
    : null
    Visualize: null
    orange.widgets.visualize: null
    Widgets for data visualization.: null
    '#FFB7B1': null
    icons/Category-Visualize.svg: null
Orange/widgets/visualize/owlinearprojection.py:
    ? '""

        Linear Projection widget

        ------------------------

        ""'
    : null
    LinearProjectionVizRank:
        Score Plots: null
        __init__:
            n_attrs: null
            'Number of variables: ': null
        before_running:
            ? "\"\"\n        Disable the spin for number of attributes before running\
                \ and\n        enable afterwards. Also, if the number of attributes\
                \ is different than\n        in the last run, reset the saved state\
                \ (if it was paused).\n        \"\""
            : null
        row_for_state:
            ', ': null
        _n_attrs_changed:
            Start: null
            Continue: null
    OWLinProjGraph:
        update_anchors:
            <b>{label}</b>: null
            '...': null
    Placement: null
    OWLinearProjection:
        Linear Projection: null
        'A multi-axis projection of data onto ': null
        a two-dimensional plane.: null
        icons/LinearProjection.svg: null
        Circular Placement: null
        Linear Discriminant Analysis: null
        Principal Component Analysis: null
        Error:
            Plotting requires numeric features: null
        _add_controls:
            Features: null
            'Hide radius:': null
            hide_radius: null
        _add_controls_variables:
            Suggest Features: null
        _add_controls_placement:
            placement: null
        _add_buttons:
            auto_commit: null
        _init_vizrank:
            There is no data.: null
            Color variable has to be selected: null
            'Suggest Features does not work for Linear ': null
            'Discriminant Analysis Projection when ': null
            continuous color variable is selected.: null
            Not enough available continuous variables: null
            Not enough valid data instances: null
        init_projection:
            eigen: null
        _get_send_report_caption:
            Projection: null
            Color: null
            Label: null
            Shape: null
            Size: null
            Jittering: null
            '{} %': null
        migrate_settings:
            point_width: null
            point_size: null
            jitter_size: null
            jitter_value: null
            alpha_value: null
            class_density: null
            graph: null
            radius: null
            hide_radius: null
            selection_indices: null
            selection: null
            placement: null
        migrate_context:
            color_index: null
            attr_color: null
            shape_index: null
            attr_shape: null
            size_index: null
            attr_size: null
            graph: null
            attr_label: null
            selected_vars: null
    __main__: null
    iris: null
Orange/widgets/visualize/owsilhouetteplot.py:
    NoGroupVariable:
        Input does not have any suitable labels: null
    OWSilhouettePlot:
        Silhouette Plot: null
        'Visually assess cluster quality and ': null
        the degree of cluster membership.: null
        icons/SilhouettePlot.svg: null
        Inputs:
            Data: null
        Outputs:
            Selected Data: null
        orangecontrib.prototypes.widgets.owsilhouetteplot.OWSilhouettePlot: null
        Orange.widgets.unsupervised.owsilhouetteplot.OWSilhouettePlot: null
        Euclidean: null
        Manhattan: null
        Cosine: null
        scene: null
        Error:
            Need at least two non-empty clusters: null
            All clusters are singletons: null
            Not enough memory: null
            'Distances could not be computed: ''{}''': null
            '{}': null
        Warning:
            '{} instance{s} omitted (missing cluster assignment)': null
            '{} instance{s} omitted (undefined distances)': null
            Ignoring categorical features: null
        __init__:
            Distance: null
            distance_idx: null
            Cluster Label: null
            cluster_var_idx: null
            group_by_cluster: null
            Group by cluster: null
            Bars: null
            'Bar width:': null
            bar_size: null
            'Annotations:': null
            annotation_var_idx: null
            None: null
            (increase the width to show): null
            auto_commit: null
        set_data:
            ? "\"\"\n        Set the input dataset or distance matrix.\n        \"\
                \""
            : null
        _set_distances:
            Input matrix does not have associated data: null
        _setup_control_models:
            None: null
        clear:
            ? "\"\"\n        Clear the widget state.\n        \"\""
            : null
            None: null
        _ensure_matrix:
            invalid state: null
        _update:
            precomputed: null
            s: null
        commit:
            ? "\"\"\n        Commit/send the current selection to the output.\n  \
                \      \"\""
            : null
            strictly increasing: null
            Silhouette ({}): null
        send_report:
            Silhouette plot ({} distance), clustered by '{}': null
            ', annotated with ''{}''': null
    show_tool_tip:
        ? "\"\"\n    Show a plain text tool tip with limited length, eliding if necessary.\n\
            \    \"\""
        : null
        QTipLabel: null
        <span>{etext}</span>: null
    StyledGraphicsView:
        ? "\"\"\n    Propagate style and palette changes to the visualized scene.\n\
            \    \"\""
        : null
    SilhouettePlot:
        ? "\"\"\n    A silhouette plot widget.\n    \"\""
        : null
        setScores:
            ? "\"\"\n        Set the silhouette scores/labels to for display.\n\n\
                \        Arguments\n        ---------\n        scores : (N,) ndarray\n\
                \            The silhouette scores.\n        labels : (N,) ndarray\n\
                \            A ndarray (dtype=int) of label/clusters indices.\n  \
                \      values : list of str\n            A list of label/cluster names.\n\
                \        colors : (N, 3) ndarray\n            A ndarray of RGB values.\n\
                \        rownames : list of str, optional\n            A list (len\
                \ == N) of row names.\n        \"\""
            : null
            scores and labels must be 1 dimensional: null
            scores and labels must have the same shape: null
            rownames must have the same size as scores: null
            All indices in `labels` must be in `range(len(values))`: null
        setBarHeight:
            ? "\"\"\n        Set silhouette bar height (row height).\n        \"\""
            : null
        barHeight:
            ? "\"\"\n        Return the silhouette bar (row) height.\n        \"\""
            : null
        clear:
            ? "\"\"\n        Clear the widget state\n        \"\""
            : null
        __setup:
            top: null
            '{} ({})': null
            bottom: null
    Line:
        ? "\"\"\n    A line separator graphics widget\n    \"\""
        : null
        __init__:
            sizePolicy: null
    BarPlotItem:
        __init__:
            '#3FCFCF': null
    __main__: null
    brown-selected: null
Orange/widgets/visualize/owboxplot.py:
    ContDataRange: null
    low: null
    high: null
    group_value: null
    DiscDataRange: null
    value: null
    BoxData:
        __init__:
            midpoint: null
    OWBoxPlot:
        Box Plot: null
        Visualize the distribution of feature values in a box plot.: null
        icons/BoxPlot.svg: null
        whisker: null
        Inputs:
            Data: null
        Outputs:
            Selected Data: null
        Warning:
            Data contains no categorical or numeric variables: null
        median: null
        mean: null
        box_scene: null
        __init__:
            Variable: null
            order_by_importance: null
            Order by relevance to subgroups: null
            Order by 𝜒² or ANOVA over the subgroups: null
            None: null
            Subgroups: null
            order_grouping_by_importance: null
            Order by relevance to variable: null
            Order by 𝜒² or ANOVA over the variable values: null
            Display: null
            show_annotations: null
            Annotate: null
            compare: null
            No comparison: null
            Compare medians: null
            Compare means: null
            stretched: null
            Stretch bars: null
            show_labels: null
            Show box labels: null
            sort_freqs: null
            Sort by subgroup frequencies: null
        reset_attrs:
            hidden: null
        reset_groups:
            hidden: null
        compute_box_data:
            missing '{self.group_var.name}': null
        _display_changed_disc:
            '{}': null
        __draw_group_labels:
            ? "\"\"Draw group labels\n\n        Parameters\n        ----------\n \
                \       y: int\n            vertical offset of bars\n        row:\
                \ int\n            row index\n        \"\""
            : null
        __draw_row_counts:
            ? "\"\"Draw row counts\n\n        Parameters\n        ----------\n   \
                \     y: int\n            vertical offset of bars\n        label:\
                \ QGraphicsSimpleTextItem\n            Label for group\n        row_sum_:\
                \ int\n            Sum for the group\n        \"\""
            : null
        __draw_bar_labels:
            ? "\"\"Draw bar labels\n\n        Parameters\n        ----------\n   \
                \     y: int\n            vertical offset of bars\n        bars: List[FilterGraphicsRectItem]\n\
                \            list of bars being drawn\n        labels: List[QGraphicsTextItem]\n\
                \            list of labels for corresponding bars\n        \"\""
            : null
        __draw_bars:
            ? "\"\"Draw bars\n\n        Parameters\n        ----------\n        y:\
                \ int\n            vertical offset of bars\n\n        bars: List[FilterGraphicsRectItem]\n\
                \            list of bars to draw\n        \"\""
            : null
        _compute_tests_cont:
            'At least one group has just one instance, ': null
            cannot compute significance: null
            'Student''s t: {t:.3f} (p={p:.3f}, N={n})': null
            'ANOVA: {F:.3f} (p={p:.3f}, N={n})': null
        _compute_tests_disc:
            'χ²: {chi:.2f} (p={p:.3f}, dof={dof})': null
        mean_label:
            ' \u00b1 ': null
            '%.*f': null
            ': ': null
        draw_axis:
            '""Draw the horizontal axis and sets self.scale_x""': null
            '?': null
        draw_axis_disc:
            ? "\"\"\n        Draw the horizontal axis and sets self.scale_x for discrete\
                \ attributes\n        \"\""
            : null
        strudel:
            missing '{attr.name}': null
            '{value}: {100 * freq / total:.2f}%': null
            '{value}: ({int(freq)})': null
        _show_posthoc:
            median: null
            mean: null
        send_report:
            'Box plot for attribute ''{}'' ': null
            grouped by '{}': null
        Label:
            '""Boxplot Label with settable maxWidth""': null
            paint:
                ? "\"\"Overrides QGraphicsSimpleTextItem.paint\n\n            If label\
                    \ text is too long, it is elided\n            to fit into the\
                    \ allowed region\n            \"\""
                : null
    __main__: null
    heart_disease.tab: null
Orange/widgets/visualize/owscatterplotgraph.py:
    LegendItem:
        restoreAnchor:
            ? "\"\"\n        Restore (parent) relative position from stored anchors.\n\
                \n        The restored position is within the parent bounds.\n   \
                \     \"\""
            : null
        addItem:
            left: null
        clear:
            ? "\"\"\n        Clear all legend items.\n        \"\""
            : null
    DiscretizedScale:
        ? "\"\"\n    Compute suitable bins for continuous value from its minimal and\n\
            \    maximal value.\n\n    The width of the bin is a power of 10 (including\
            \ negative powers).\n    The minimal value is rounded up and the maximal\
            \ is rounded down. If this\n    gives less than 3 bins, the width is divided\
            \ by four; if it gives\n    less than 6, it is halved.\n\n    .. attribute::\
            \ offset\n        The start of the first bin.\n\n    .. attribute:: width\n\
            \        The width of the bins\n\n    .. attribute:: bins\n        The\
            \ number of bins\n\n    .. attribute:: decimals\n        The number of\
            \ decimals used for printing out the boundaries\n    \"\""
        : null
        __init__:
            ? "\"\"\n        :param min_v: Minimal value\n        :type min_v: float\n\
                \        :param max_v: Maximal value\n        :type max_v: float\n\
                \        \"\""
            : null
    ScatterPlotItem:
        ? "\"\"\n    Modifies the behaviour of ScatterPlotItem as follows:\n\n   \
            \ - Add z-index. ScatterPlotItem paints points in order of appearance\
            \ in\n      self.data. Plotting by z-index is achieved by sorting before\
            \ calling\n      super().paint() and re-sorting afterwards. Re-sorting\
            \ (instead of\n      storing the original data) is needed because the\
            \ inherited paint\n      may modify the data.\n\n    - Prevent multiple\
            \ calls to updateSpots. ScatterPlotItem calls updateSpots\n      at any\
            \ change of sizes/colors/symbols, which then rebuilds the stored\n   \
            \   pixmaps for each symbol. Orange calls set* functions in succession,\n\
            \      so we postpone updateSpots() to paint().\"\""
        : null
        setZ:
            ? "\"\"\n        Set z values for all points.\n\n        Points with higher\
                \ values are plotted on top of those with lower.\n\n        Args:\n\
                \            z (np.ndarray or None): a vector of z values\n      \
                \  \"\""
            : null
        setCoordinates:
            ? "\"\"\n        Change the coordinates of points while keeping other\
                \ properties.\n\n        Asserts that the number of points stays the\
                \ same.\n\n        Note. Pyqtgraph does not offer a method for this:\
                \ setting coordinates\n        invalidates other data. We therefore\
                \ retrieve the data to set it\n        together with the coordinates.\
                \ Pyqtgraph also does not offer a\n        (documented) method for\
                \ retrieving the data, yet using\n        data[prop]` looks reasonably\
                \ safe.\n\n        The alternative, updating the whole scatterplot\
                \ from the Orange Table,\n        is too slow.\n        \"\""
            : null
            pen: null
            brush: null
            size: null
            symbol: null
            data: null
    _define_symbols:
        ? "\"\"\n    Add symbol ? to ScatterPlotItemSymbols,\n    reflect the triangle\
            \ to point upwards\n    \"\""
        : null
        '?': null
        +: null
        t: null
        x: null
    AxisItem:
        ? "\"\"\n    Axis that if needed displays ticks appropriate for time data.\n\
            \    \"\""
        : null
        use_time:
            '""Enables axes to display ticks for time data.""': null
        tickValues:
            '""Find appropriate tick locations.""': null
        tickStrings:
            '""Format tick values according to space between them.""': null
            '%Y': null
            '%Y %b': null
            '%Y %b %d': null
            '%Hh': null
            '%d %Hh': null
            '%H:%M': null
            '%H:%M:%S': null
            '%S.%f': null
    ScatterBaseParameterSetter:
        Categorical legend: null
        Numerical legend: null
    OWScatterPlotBase:
        ? "\"\"\n    Provide a graph component for widgets that show any kind of point\
            \ plot\n\n    The component plots a set of points with given coordinates,\
            \ shapes,\n    sizes and colors. Its function is similar to that of a\
            \ *view*, whereas\n    the widget represents a *model* and a *controler*.\n\
            \n    The model (widget) needs to provide methods:\n\n    - `get_coordinates_data`,\
            \ `get_size_data`, `get_color_data`,\n      `get_shape_data`, `get_label_data`,\
            \ which return a 1d array (or two\n      arrays, for `get_coordinates_data`)\
            \ of `dtype` `float64`, except for\n      `get_label_data`, which returns\
            \ formatted labels;\n    - `get_shape_labels` returns a list of strings\
            \ for shape legend\n    - `get_color_labels` returns strings for color\
            \ legend, or a function for\n       formatting numbers if the legend is\
            \ continuous, or None for default\n       formatting\n    - `get_tooltip`,\
            \ which gives a tooltip for a single data point\n    - (optional) `impute_sizes`,\
            \ `impute_shapes` get final coordinates and\n      shapes, and replace\
            \ nans;\n    - `get_subset_mask` returns a bool array indicating whether\
            \ a\n      data point is in the subset or not (e.g. in the 'Data Subset'\
            \ signal\n      in the Scatter plot and similar widgets);\n    - `get_palette`\
            \ returns a palette appropriate for visualizing the\n      current color\
            \ data;\n    - `is_continuous_color` decides the type of the color legend;\n\
            \n    The widget (in a role of controller) must also provide methods\n\
            \    - `selection_changed`\n\n    If `get_coordinates_data` returns `(None,\
            \ None)`, the plot is cleared. If\n    `get_size_data`, `get_color_data`\
            \ or `get_shape_data` return `None`,\n    all points will have the same\
            \ size, color or shape, respectively.\n    If `get_label_data` returns\
            \ `None`, there are no labels.\n\n    The view (this compomnent) provides\
            \ methods `update_coordinates`,\n    `update_sizes`, `update_colors`,\
            \ `update_shapes` and `update_labels`\n    that the widget (in a role\
            \ of a controler) should call when any of\n    these properties are changed.\
            \ If the widget calls, for instance, the\n    plot's `update_colors`,\
            \ the plot will react by calling the widget's\n    `get_color_data` as\
            \ well as the widget's methods needed to construct the\n    legend.\n\n\
            \    The view also provides a method `reset_graph`, which should be called\
            \ only\n    when\n    - the widget gets entirely new data\n    - the number\
            \ of points may have changed, for instance when selecting\n    a different\
            \ attribute for x or y in the scatter plot, where the points\n    with\
            \ missing x or y coordinates are hidden.\n\n    Every `update_something`\
            \ calls the plot's `get_something`, which\n    calls the model's `get_something_data`,\
            \ then it transforms this data\n    into whatever is needed (colors, shapes,\
            \ scaled sizes) and changes the\n    plot. For the simplest example, here\
            \ is `update_shapes`:\n\n    ```\n        def update_shapes(self):\n \
            \           if self.scatterplot_item:\n                shape_data = self.get_shapes()\n\
            \                self.scatterplot_item.setSymbol(shape_data)\n       \
            \     self.update_legends()\n\n        def get_shapes(self):\n       \
            \     shape_data = self.master.get_shape_data()\n            shape_data\
            \ = self.master.impute_shapes(\n                shape_data, len(self.CurveSymbols)\
            \ - 1)\n            return self.CurveSymbols[shape_data]\n    ```\n\n\
            \    On the widget's side, `get_something_data` is essentially just:\n\
            \n    ```\n        def get_size_data(self):\n            return self.get_column(self.attr_size)\n\
            \    ```\n\n    where `get_column` retrieves a column while also filtering\
            \ out the\n    points with missing x and y and so forth. (Here we present\
            \ the simplest\n    two cases, \"shapes\" for the view and \"sizes\" for\
            \ the model. The colors\n    for the view are more complicated since they\
            \ deal with discrete and\n    continuous palettes, and the shapes for\
            \ the view merge infrequent shapes.)\n\n    The plot can also show just\
            \ a random sample of the data. The sample size is\n    set by `set_sample_size`,\
            \ and the rest is taken care by the plot: the\n    widget keeps providing\
            \ the data for all points, selection indices refer\n    to the entire\
            \ set etc. Internally, sampling happens as early as possible\n    (in\
            \ methods `get_<something>`).\n    \"\""
        : null
        o x t + d star ?: null
        __init__:
            left: null
            bottom: null
        _create_drag_tooltip:
            '{}: Append to group': null
            Cmd: null
            darwin: null
            Ctrl: null
            'Shift: Add group': null
            'Alt: Remove': null
            <center>: null
            ', ': null
            </center>: null
            <b>{}</b>: null
        clear:
            ? "\"\"\n        Remove all graphical elements from the plot\n\n     \
                \   Calls the pyqtgraph's plot widget's clear, sets all handles to\
                \ `None`,\n        removes labels and selections.\n\n        This\
                \ method should generally not be called by the widget. If the data\n\
                \        is gone (*e.g.* upon receiving `None` as an input data signal),\
                \ this\n        should be handler by calling `reset_graph`, which\
                \ will in turn call\n        `clear`.\n\n        Derived classes should\
                \ override this method if they add more graphical\n        elements.\
                \ For instance, the regression line in the scatterplot adds\n    \
                \    `self.reg_line_item = None` (the line in the plot is already\
                \ removed\n        in this method).\n        \"\""
            : null
        reset_graph:
            ? "\"\"\n        Reset the graph to new data (or no data)\n\n        The\
                \ method must be called when the plot receives new data, in\n    \
                \    particular when the number of points change. If only their properties\n\
                \        - like coordinates or shapes - change, an update method\n\
                \        (`update_coordinates`, `update_shapes`...) should be called\
                \ instead.\n\n        The method must also be called when the data\
                \ is gone.\n\n        The method calls `clear`, followed by calls\
                \ of all update methods.\n\n        NB. Argument `__keep_selection`\
                \ is for internal use only\n        \"\""
            : null
        set_sample_size:
            ? "\"\"\n        Set the sample size\n\n        Args:\n            sample_size\
                \ (int or None): sample size or `None` to show all points\n      \
                \  \"\""
            : null
        update_point_props:
            ? "\"\"\n        Update the sizes, colors, shapes and labels\n\n     \
                \   The method calls the appropriate update methods for individual\n\
                \        properties.\n        \"\""
            : null
        _reset_view:
            ? "\"\"\n        Set the range of the view box\n\n        Args:\n    \
                \        x_data (np.ndarray): x coordinates\n            y_data (np.ndarray)\
                \ y coordinates\n        \"\""
            : null
        _filter_visible:
            '""Return the sample from the data using the stored sample_indices""': null
        get_coordinates:
            ? "\"\"\n        Prepare coordinates of the points in the plot\n\n   \
                \     The method is called by `update_coordinates`. It gets the coordinates\n\
                \        from the widget, jitters them and return them.\n\n      \
                \  The methods also initializes the sample indices if neededd and\
                \ stores\n        the original and sampled number of points.\n\n \
                \       Returns:\n            (tuple): a pair of numpy arrays containing\
                \ (sampled) coordinates,\n                or `(None, None)`.\n   \
                \     \"\""
            : null
        _create_sample:
            ? "\"\"\n        Create a random sample if the data is larger than the\
                \ set sample size\n        \"\""
            : null
        jitter_coordinates:
            ? "\"\"\n        Display coordinates to random positions within ellipses\
                \ with\n        radiuses of `self.jittter_size` percents of spans\n\
                \        \"\""
            : null
        update_coordinates:
            ? "\"\"\n        Trigger the update of coordinates while keeping other\
                \ features intact.\n\n        The method gets the coordinates by calling\
                \ `self.get_coordinates`,\n        which in turn calls the widget's\
                \ `get_coordinate_data`. The number of\n        coordinate pairs returned\
                \ by the latter must match the current number\n        of points.\
                \ If this is not the case, the widget should trigger\n        the\
                \ complete update by calling `reset_graph` instead of this method.\n\
                \        \"\""
            : null
        get_sizes:
            ? "\"\"\n        Prepare data for sizes of points in the plot\n\n    \
                \    The method is called by `update_sizes`. It gets the sizes\n \
                \       from the widget and performs the necessary scaling and sizing.\n\
                \        The output is rounded to half a pixel for faster drawing.\n\
                \n        Returns:\n            (np.ndarray): sizes\n        \"\""
            : null
            ignore: null
        update_sizes:
            ? "\"\"\n        Trigger an update of point sizes\n\n        The method\
                \ calls `self.get_sizes`, which in turn calls the widget's\n     \
                \   `get_size_data`. The result are properly scaled and then passed\n\
                \        back to widget for imputing (`master.impute_sizes`).\n  \
                \      \"\""
            : null
            impute_sizes: null
            size: null
        default_impute_sizes:
            ? "\"\"\n        Fallback imputation for sizes.\n\n        Set the size\
                \ to two pixels smaller than the minimal size\n\n        Returns:\n\
                \            (bool): True if there was any missing data\n        \"\
                \""
            : null
        get_colors:
            ? "\"\"\n        Prepare data for colors of the points in the plot\n\n\
                \        The method is called by `update_colors`. It gets the colors\
                \ and the\n        indices of the data subset from the widget (`get_color_data`,\n\
                \        `get_subset_mask`), and constructs lists of pens and brushes\
                \ for\n        each data point.\n\n        The method uses different\
                \ palettes for discrete and continuous data,\n        as determined\
                \ by calling the widget's method `is_continuous_color`.\n\n      \
                \  If also marks the points that are in the subset as defined by,\
                \ for\n        instance the 'Data Subset' signal in the Scatter plot\
                \ and similar\n        widgets. (Do not confuse this with *selected\
                \ points*, which are\n        marked by circles around the points,\
                \ which are colored by groups\n        and thus independent of this\
                \ method.)\n\n        Returns:\n            (tuple): a list of pens\
                \ and list of brushes\n        \"\""
            : null
        _get_same_colors:
            ? "\"\"\n        Return the same pen for all points while the brush color\
                \ depends\n        upon whether the point is in the subset or not\n\
                \n        Args:\n            subset (np.ndarray): a bool array indicating\
                \ whether a data point\n                is in the subset or not (e.g.\
                \ in the 'Data Subset' signal\n                in the Scatter plot\
                \ and similar widgets);\n\n        Returns:\n            (tuple):\
                \ a list of pens and list of brushes\n        \"\""
            : null
        _get_continuous_colors:
            ? "\"\"\n        Return the pens and colors whose color represent an index\
                \ into\n        a continuous palette. The same color is used for pen\
                \ and brush,\n        except the former is darker. If the data has\
                \ a subset, the brush\n        is transparent for points that are\
                \ not in the subset.\n        \"\""
            : null
        _get_discrete_colors:
            ? "\"\"\n        Return the pens and colors whose color represent an index\
                \ into\n        a discrete palette. The same color is used for pen\
                \ and brush,\n        except the former is darker. If the data has\
                \ a subset, the brush\n        is transparent for points that are\
                \ not in the subset.\n        \"\""
            : null
        update_colors:
            ? "\"\"\n        Trigger an update of point colors\n\n        The method\
                \ calls `self.get_colors`, which in turn calls the widget's\n    \
                \    `get_color_data` to get the indices in the pallette. `get_colors`\n\
                \        returns a list of pens and brushes to which this method uses\
                \ to\n        update the colors. Finally, the method triggers the\
                \ update of the\n        legend and the density plot.\n        \"\""
            : null
        update_density:
            ? "\"\"\n        Remove the existing density plot (if there is one) and\
                \ replace it\n        with a new one (if enabled).\n\n        The\
                \ method gets the colors from the pens of the currently plotted\n\
                \        points.\n        \"\""
            : null
            pen: null
        update_selection_colors:
            ? "\"\"\n        Trigger an update of selection markers\n\n        This\
                \ update method is usually not called by the widget but by the\n \
                \       plot, since it is the plot that handles the selections.\n\n\
                \        Like other update methods, it calls the corresponding get\
                \ method\n        (`get_colors_sel`) which returns a list of pens\
                \ and brushes.\n        \"\""
            : null
        get_colors_sel:
            ? "\"\"\n        Return pens and brushes for selection markers.\n\n  \
                \      A pen can is set to `Qt.NoPen` if a point is not selected.\n\
                \n        All brushes are completely transparent whites.\n\n     \
                \   Returns:\n            (tuple): a list of pens and a list of brushes\n\
                \        \"\""
            : null
        get_labels:
            ? "\"\"\n        Prepare data for labels for points\n\n        The method\
                \ returns the results of the widget's `get_label_data`\n\n       \
                \ Returns:\n            (labels): a sequence of labels\n        \"\
                \""
            : null
        update_labels:
            ? "\"\"\n        Trigger an update of labels\n\n        The method calls\
                \ `get_labels` which in turn calls the widget's\n        `get_label_data`.\
                \ The obtained labels are shown if the corresponding\n        points\
                \ are selected or if `label_only_selected` is `false`.\n        \"\
                \""
            : null
        get_shapes:
            ? "\"\"\n        Prepare data for shapes of points in the plot\n\n   \
                \     The method is called by `update_shapes`. It gets the data from\n\
                \        the widget's `get_shape_data`, and then calls its `impute_shapes`\n\
                \        to impute the missing shape (usually with some default shape).\n\
                \n        Returns:\n            (np.ndarray): an array of symbols\
                \ (e.g. o, x, + ...)\n        \"\""
            : null
            impute_shapes: null
        default_impute_shapes:
            ? "\"\"\n        Fallback imputation for shapes.\n\n        Use the default\
                \ symbol, usually the last symbol in the list.\n\n        Returns:\n\
                \            (bool): True if there was any missing data\n        \"\
                \""
            : null
        update_shapes:
            ? "\"\"\n        Trigger an update of point symbols\n\n        The method\
                \ calls `get_shapes` to obtain an array with a symbol\n        for\
                \ each point and uses it to update the symbols.\n\n        Finally,\
                \ the method updates the legend.\n        \"\""
            : null
        update_z_values:
            ? "\"\"\n        Set z-values for point in the plot\n\n        The order\
                \ is as follows:\n        - selected points that are also in the subset\
                \ on top,\n        - followed by selected points,\n        - followed\
                \ by points from the subset,\n        - followed by the rest.\n  \
                \      Within each of these four groups, points are ordered by their\
                \ colors.\n\n        Points with less frequent colors are above those\
                \ with more frequent.\n        The points for which the value for\
                \ the color is missing are at the\n        bottom of their respective\
                \ group.\n        \"\""
            : null
        update_grid_visibility:
            '""Show or hide the grid""': null
        update_legend_visibility:
            ? "\"\"\n        Show or hide legends based on whether they are enabled\
                \ and non-empty\n        \"\""
            : null
        update_legends:
            '""Update content of legends and their visibility""': null
        _update_color_legend:
            o: null
        help_event:
            ? "\"\"\n        Create a `QToolTip` for the point hovered by the mouse\n\
                \        \"\""
            : null
Orange/widgets/visualize/owsieve.py:
    ChiSqStats:
        ? "\"\"\n    Compute and store statistics needed to show a plot for the given\n\
            \    pair of attributes. The class is also used for ranking.\n    \"\""
        : null
        __init__:
            ignore: null
    SieveRank:
        Sieve Rank: null
    OWSieveDiagram:
        Sieve Diagram: null
        'Visualize the observed and expected frequencies ': null
        for a combination of values.: null
        icons/SieveDiagram.svg: null
        Inputs:
            Data: null
            Features: null
        Outputs:
            Selected Data: null
        canvas: null
        __init__:
            attr_x: null
            \u2717: null
            attr_y: null
            Score Combinations: null
        migrate_context:
            attrX: null
            attr_x: null
            attrY: null
            attr_y: null
        set_data:
            ? "\"\"\n        Discretize continuous attributes, and put all attributes\
                \ and discrete\n        metas into self.attrs.\n\n        Select the\
                \ first two attributes unless context overrides this.\n        Method\
                \ `resolve_shown_attributes` is called to use the attributes from\n\
                \        the input, if it exists and matches the attributes in the\
                \ data.\n\n        Remove selection; again let the context override\
                \ this.\n        Initialize the vizrank dialog, but don't show it.\n\
                \n        Args:\n            data (Table): input data\n        \"\""
            : null
        update_attr:
            '""Update the graph and selection.""': null
        sparse_to_dense:
            ? "\"\"\n        Extracts two selected columns from sparse matrix.\n \
                \       GH-2260\n        \"\""
            : null
        set_input_features:
            ? "\"\"\n        Handler for the Features signal.\n\n        The method\
                \ stores the attributes and calls `resolve_shown_attributes`\n\n \
                \       Args:\n            attr_list (AttributeList): data from the\
                \ signal\n        \"\""
            : null
        resolve_shown_attributes:
            ? "\"\"\n        Use the attributes from the input signal if the signal\
                \ is present\n        and at least two attributes appear in the domain.\
                \ If there are\n        multiple, use the first two. Combos are disabled\
                \ if inputs are used.\n        \"\""
            : null
            Features from the input signal are not present in the data: null
        select_area:
            ? "\"\"\n        Add or remove the clicked area from the selection\n\n\
                \        Args:\n            area (QRect): the area that is clicked\n\
                \            event (QEvent): event description\n        \"\""
            : null
        update_selection:
            ? "\"\"\n        Update the graph (pen width) to show the current selection.\n\
                \        Filter and output the data.\n        \"\""
            : null
        update_graph:
            '""Update the graph.""': null
            text:
                max_width: null
            fmt:
                '{:.2f}': null
            show_pearson:
                ? "\"\"\n            Color the given rectangle according to its corresponding\n\
                    \            standardized Pearson residual.\n\n            Args:\n\
                    \                rect (QRect): the rectangle being drawn\n   \
                    \             pearson (float): signed standardized pearson residual\n\
                    \                pen_width (int): pen width (bolder pen is used\
                    \ for selection)\n            \"\""
                : null
            make_tooltip:
                ? "\"\"Create the tooltip. The function uses local variables from\n\
                    \            the enclosing scope.\"\""
                : null
                _oper:
                    ' = ': null
                    ' ': null
                    <≥: null
                    ' in ': null
                '<b>{attr}{eq}{val_name}</b>: {obs}/{n} ({p:.0f} %)': null
                ? "\"\"<b>combination of values: </b><br/>\n                   &nbsp;&nbsp;&nbsp;expected\
                    \ {exp} ({p_exp:.0f} %)<br/>\n                   &nbsp;&nbsp;&nbsp;observed\
                    \ {obs} ({p_obs:.0f} %)\"\""
                : null
                '{xt}<br/>{yt}<hr/>{ct}': null
            Features {} and {} have no values: null
            Feature {} has no values: null
            χ²={:.2f}, p={:.3f}: null
            'N = ': null
        get_widget_name_extension:
            '{} vs {}': null
    __main__: null
    zoo: null
Orange/widgets/visualize/pythagorastreeviewer.py:
    ? "\"\"\nPythagoras tree viewer for visualizing tree structures.\n\nThe pythagoras\
        \ tree viewer widget is a widget that can be plugged into any\nexisting widget\
        \ given a tree adapter instance. It is simply a canvas that takes\nand input\
        \ tree adapter and takes care of all the drawing.\n\nTypes\n-----\nSquare\
        \ : namedtuple (center, length, angle)\n    Since Pythagoras trees deal only\
        \ with squares (they also deal with\n    rectangles in the generalized form,\
        \ but are completely unreadable), this\n    is what all the squares are stored\
        \ as.\nPoint : namedtuple (x, y)\n    Self exaplanatory.\n\n\"\""
    : null
    Square: null
    center: null
    length: null
    angle: null
    Point: null
    x: null
    y: null
    PythagorasTreeViewer:
        ? "\"\"Pythagoras tree viewer graphics widget.\n\n    Examples\n    --------\n\
            \    >>> from Orange.widgets.visualize.utils.tree.treeadapter import (\n\
            \    ...     TreeAdapter\n    ... )\n    Pass tree through constructor.\n\
            \    >>> tree_view = PythagorasTreeViewer(parent=scene, adapter=tree_adapter)\n\
            \n    Pass tree later through method.\n    >>> tree_adapter = TreeAdapter()\n\
            \    >>> scene = QGraphicsScene()\n    This is where the magic happens\n\
            \    >>> tree_view = PythagorasTreeViewer(parent=scene)\n    >>> tree_view.set_tree(tree_adapter)\n\
            \n    Both these examples set the appropriate tree and add all the squares\
            \ to the\n    widget instance.\n\n    Parameters\n    ----------\n   \
            \ parent : QGraphicsItem, optional\n        The parent object that the\
            \ graphics widget belongs to. Should be a\n        scene.\n    adapter\
            \ : TreeAdapter, optional\n        Any valid tree adapter instance.\n\
            \    interacitive : bool, optional\n        Specify whether the widget\
            \ should have an interactive display. This\n        means special hover\
            \ effects, selectable boxes. Default is true.\n\n    Notes\n    -----\n\
            \    .. note:: The class contains two clear methods: `clear` and `clear_tree`.\n\
            \        Each has  their own use.\n        `clear_tree` will clear out\
            \ the tree and remove any graphics items.\n        `clear` will, on the\
            \ other hand, clear everything, all settings\n        (tooltip and color\
            \ calculation functions.\n\n        This is useful because when we want\
            \ to change the size calculation of\n        the Pythagora tree, we just\
            \ want to clear the scene and it would be\n        inconvenient to have\
            \ to set color and tooltip functions again.\n        On the other hand,\
            \ when we want to draw a brand new tree, it is best\n        to clear\
            \ all settings to avoid any strange bugs - we start with a blank\n   \
            \     slate.\n\n    \"\""
        : null
        __init__:
            interactive: null
            target_class_index: null
            weight_adjustment: null
        set_tree:
            ? "\"\"Pass in a new tree adapter instance and perform updates to canvas.\n\
                \n        Parameters\n        ----------\n        tree_adapter : TreeAdapter\n\
                \            The new tree adapter that is to be used.\n        weight_adjustment\
                \ : callable\n            A weight adjustment function that with signature\
                \ `x -> x`\n        target_class_index : int\n\n        Returns\n\
                \        -------\n\n        \"\""
            : null
        set_size_calc:
            '""Set the weight adjustment on the tree. Redraws the whole tree.""': null
        set_depth_limit:
            ? "\"\"Update the drawing depth limit.\n\n        The drawing stops when\
                \ the depth is GT the limit. This means that at\n        depth 0,\
                \ the root node will be drawn.\n\n        Parameters\n        ----------\n\
                \        depth : int\n            The maximum depth at which the nodes\
                \ can still be drawn.\n\n        Returns\n        -------\n\n    \
                \    \"\""
            : null
        target_class_changed:
            '""When the target class has changed, perform appropriate updates.""': null
        tooltip_changed:
            '""Set the tooltip to the appropriate value on each square.""': null
        clear:
            '""Clear the entire widget state.""': null
        clear_tree:
            '""Clear only the tree, keeping tooltip and color functions.""': null
        _calculate_tree:
            '""Actually calculate the tree squares""': null
        _draw_tree:
            ? "\"\"Efficiently draw the tree with regards to the depth.\n\n      \
                \  If we used a recursive approach, the tree would have to be redrawn\n\
                \        every time the depth changed, which is very impractical for\
                \ larger\n        trees, since drawing can take a long time.\n\n \
                \       Using an iterative approach, we use two queues to represent\
                \ the tree\n        frontier and the nodes that have already been\
                \ drawn. We also store the\n        current depth. This way, when\
                \ the max depth is increased, we do not\n        redraw the entire\
                \ tree but only iterate through the frontier and draw\n        those\
                \ nodes, and update the frontier accordingly.\n        When decreasing\
                \ the max depth, we reverse the process, we clear the\n        frontier,\
                \ and remove nodes from the drawn nodes, and append those with\n \
                \       depth max_depth + 1 to the frontier, so the frontier doesn't\
                \ get\n        cluttered.\n\n        Parameters\n        ----------\n\
                \        root : TreeNode\n            The root tree node.\n\n    \
                \    Returns\n        -------\n\n        \"\""
            : null
    SquareGraphicsItem:
        ? "\"\"Square Graphics Item.\n\n    Square component to draw as components\
            \ for the non-interactive Pythagoras\n    tree.\n\n    Parameters\n  \
            \  ----------\n    tree_node : TreeNode\n        The tree node the square\
            \ represents.\n    parent : QGraphicsItem\n\n    \"\""
        : null
        __init__:
            brush: null
            '#297A1F': null
            zvalue: null
        _get_rect_attributes:
            ? "\"\"Get the rectangle attributes requrired to draw item.\n\n      \
                \  Compute the QRectF that a QGraphicsRect needs to be rendered with\
                \ the\n        data passed down in the constructor.\n\n        \"\""
            : null
    InteractiveSquareGraphicsItem:
        ? "\"\"Interactive square graphics items.\n\n    This is different from the\
            \ base square graphics item so that it is\n    selectable, and it can\
            \ handle and react to hover events (highlight and\n    focus own branch).\n\
            \n    Parameters\n    ----------\n    tree_node : TreeNode\n        The\
            \ tree node the square represents.\n    parent : QGraphicsItem\n\n   \
            \ \"\""
        : null
        selection_changed:
            '""Handle selection changed.""': null
    TreeNode:
        ? "\"\"A tree node meant to be used in conjuction with graphics items.\n\n\
            \    The tree node contains methods that are very general to any tree\n\
            \    visualisation, containing methods for the node color and tooltip.\n\
            \n    This is an abstract class and not meant to be used by itself. There\
            \ are two\n    subclasses - `DiscreteTreeNode` and `ContinuousTreeNode`,\
            \ which need no\n    explanation. If you don't wish to deal with figuring\
            \ out which node to use,\n    the `from_tree` method is provided.\n\n\
            \    Parameters\n    ----------\n    label : int\n        The label of\
            \ the tree node, can be looked up in the original tree.\n    square :\
            \ Square\n        The square the represents the tree node.\n    tree :\
            \ TreeAdapter\n        The tree model that the node belongs to.\n    children\
            \ : tuple of TreeNode, optional, default is empty tuple\n        All the\
            \ children that belong to this node.\n\n    \"\""
        : null
        from_tree:
            '""Construct the appropriate type of node from the given tree.""': null
        color:
            ? "\"\"Get the color of the node.\n\n        Returns\n        -------\n\
                \        QColor\n\n        \"\""
            : null
        tooltip:
            ? "\"\"get the tooltip for the node.\n\n        Returns\n        -------\n\
                \        str\n\n        \"\""
            : null
        _rules_str:
            <br>: null
            <br><b>%s</b>: null
    DiscreteTreeNode:
        ? "\"\"Discrete tree node containing methods for tree visualisations.\n\n\
            \    Colors are defined by the data domain, and possible colorings are\
            \ different\n    target classes.\n\n    \"\""
        : null
        tooltip:
            <br>: null
            <p>: null
            '{}/{} samples ({:2.3f}%)': null
            <hr>: null
            'Split by ': null
            <br><br>: null
            </p>: null
    ContinuousTreeNode:
        ? "\"\"Continuous tree node containing methods for tree visualisations.\n\n\
            \    There are three modes of coloring:\n     - None, which is a solid\
            \ color\n     - Mean, which colors nodes w.r.t. the mean value of all\
            \ the\n       instances that belong to a given node.\n     - Standard\
            \ deviation, which colors nodes w.r.t the standard deviation of\n    \
            \   all the instances that belong to a given node.\n\n    \"\""
        : null
        None: null
        Mean: null
        Standard deviation: null
        _color_mean:
            '""Color the nodes with respect to the mean of instances inside.""': null
        _color_var:
            '""Color the nodes with respect to the variance of instances inside.""': null
        tooltip:
            '<p>Mean: {:2.3f}': null
            '<br>Standard deviation: {:2.3f}': null
            <br>{} samples: null
            <hr>: null
            'Split by ': null
            <br><br>: null
            </p>: null
    PythagorasTree:
        ? "\"\"Pythagoras tree.\n\n    Contains all the logic that converts a given\
            \ tree adapter to a tree\n    consisting of node classes.\n\n    Parameters\n\
            \    ----------\n    weight_adjustment : callable\n        The function\
            \ to be used to adjust child weights\n\n    \"\""
        : null
        pythagoras_tree:
            ? "\"\"Get the Pythagoras tree representation in a graph like view.\n\n\
                \        Constructs a graph using TreeNode into a tree structure.\
                \ Each node in\n        graph contains the information required to\
                \ plot the the tree.\n\n        Parameters\n        ----------\n \
                \       tree : TreeAdapter\n            A tree adapter instance where\
                \ the original tree is stored.\n        node : int\n            The\
                \ node label, the root node is denoted with 0.\n        square : Square\n\
                \            The initial square which will represent the root of the\
                \ tree.\n\n        Returns\n        -------\n        TreeNode\n  \
                \          The root node which contains the rest of the tree.\n\n\
                \        \"\""
            : null
        _compute_child:
            ? "\"\"Compute all the properties for a single child.\n\n        Parameters\n\
                \        ----------\n        tree : TreeAdapter\n            A tree\
                \ adapter instance where the original tree is stored.\n        parent_square\
                \ : Square\n            The parent square of the given child.\n  \
                \      node : int\n            The node label of the child.\n    \
                \    weight : float\n            The weight of the node relative to\
                \ its parent e.g. two children in\n            relation 3:1 should\
                \ have weights .75 and .25, respectively.\n\n        Returns\n   \
                \     -------\n        TreeNode\n            The tree node representation\
                \ of the given child with the computed\n            subtree.\n\n \
                \       \"\""
            : null
        _compute_center:
            ? "\"\"Compute the central point of a child square.\n\n        Parameters\n\
                \        ----------\n        initial_square : Square\n           \
                \ The parent square representation where we will be drawing from.\n\
                \        length : float\n            The length of the side of the\
                \ new square (the one we are computing\n            the center for).\n\
                \        alpha : float\n            The angle that defines the size\
                \ of our new square (in radians).\n        base_angle : float, optional\n\
                \            If the square we want to find the center for is not the\
                \ first child\n            i.e. its edges does not touch the base\
                \ square, then we need the\n            initial angle that will act\
                \ as the starting point for the new\n            square.\n\n     \
                \   Returns\n        -------\n        Point\n            The central\
                \ point to the new square.\n\n        \"\""
            : null
        _rotate_point:
            ? "\"\"Rotate a point around another point by some angle.\n\n        Parameters\n\
                \        ----------\n        point : Point\n            The point\
                \ to rotate.\n        around : Point\n            The point to perform\
                \ rotation around.\n        alpha : float\n            The angle to\
                \ rotate by (in radians).\n\n        Returns\n        -------\n  \
                \      Point:\n            The rotated point.\n\n        \"\""
            : null
        _get_point_on_square_edge:
            ? "\"\"Calculate the central point on the drawing edge of the given square.\n\
                \n        Parameters\n        ----------\n        center : Point\n\
                \            The square center point.\n        length : float\n  \
                \          The square side length.\n        angle : float\n      \
                \      The angle of the square.\n\n        Returns\n        -------\n\
                \        Point\n            A point on the center of the drawing edge\
                \ of the given square.\n\n        \"\""
            : null
Orange/widgets/visualize/owviolinplot.py:
    ParameterSetter:
        Bottom axis: null
        Vertical tick text: null
        axis_items:
            item: null
        bottom_axis:
            bottom: null
    ViolinItem:
        RugPlot: null
        support, density: null
    ViolinPlot:
        __init__:
            bottom: null
            left: null
        order_items:
            bottom: null
            left: null
        _set_axes:
            left: null
            bottom: null
        _clear_axes:
            bottom: null
            left: null
    OWViolinPlot:
        Violin Plot: null
        Visualize the distribution of feature: null
        ' values in a violin plot.': null
        icons/ViolinPlot.svg: null
        kernel: null
        density: null
        Inputs:
            Data: null
        Outputs:
            Selected Data: null
        Error:
            Plotting requires a numeric feature.: null
            Plotting requires at least two instances.: null
        gaussian: null
        epanechnikov: null
        linear: null
        Normal: null
        Epanechnikov: null
        Linear: null
        Area: null
        Count: null
        Width: null
        graph.plotItem: null
        _add_controls:
            None: null
            Variable: null
            order_by_importance: null
            Order by relevance to subgroups: null
            Order by 𝜒² or ANOVA over the subgroups: null
            Subgroups: null
            order_grouping_by_importance: null
            Order by relevance to variable: null
            Order by 𝜒² or ANOVA over the variable values: null
            Display: null
            show_box_plot: null
            Box plot: null
            show_strip_plot: null
            Strip plot: null
            show_rug_plot: null
            Rug plot: null
            order_violins: null
            Order subgroups: null
            orientation_index: null
            Horizontal: null
            Vertical: null
            'Orientation: ': null
            Density Estimation: null
            kernel_index: null
            'Kernel:': null
            scale_index: null
            'Scale:': null
        init_list_view:
            hidden: null
    __main__: null
    heart_disease: null
Orange/widgets/visualize/owradviz.py:
    RadvizVizRank:
        Score Plots: null
        __init__:
            '""Add the spin box for maximal number of attributes""': null
            n_attrs: null
            'Maximum number of variables: ': null
        _compute_attr_order:
            ? "\"\"\n        used by VizRank to evaluate attributes\n        \"\""
            : null
        _evaluate_projection:
            ? "\"\"\n        kNNEvaluate - evaluate class separation in the given\
                \ projection using a k-NN method\n        Parameters\n        ----------\n\
                \        x - variables to evaluate\n        y - class\n\n        Returns\n\
                \        -------\n        scores\n        \"\""
            : null
            ignore: null
        _n_attrs_changed:
            ? "\"\"\n        Change the button label when the number of attributes\
                \ changes. The method does not reset\n        anything so the user\
                \ can still see the results until actually restarting the search.\n\
                \        \"\""
            : null
            Start: null
            Continue: null
        progressBarSet:
            ' Evaluated {} permutations': null
        row_for_state:
            '[{:0.6f}] ': null
            ', ': null
        before_running:
            ? "\"\"\n        Disable the spin for number of attributes before running\
                \ and\n        enable afterwards. Also, if the number of attributes\
                \ is different than\n        in the last run, reset the saved state\
                \ (if it was paused).\n        \"\""
            : null
    OWRadvizGraph:
        update_anchors:
            <b>{label}</b>: null
            ' ': null
            \n: null
            '...': null
    OWRadviz:
        Radviz: null
        Display Radviz projection: null
        icons/Radviz.svg: null
        viz: null
        Warning:
            No projection for selected features: null
            Categorical variables with more than: null
            ' two values are not shown.': null
            Maximum number of selected variables reached.: null
        _add_controls:
            Features: null
            Suggest features: null
        _add_buttons:
            auto_commit: null
        _send_components_metas:
            angle: null
        migrate_context:
            attr_color: null
            graph: null
            attr_size: null
            attr_shape: null
            attr_label: null
            selected_vars: null
    __main__: null
    brown-selected: null
Orange/widgets/visualize/owruleviewer.py:
    OWRuleViewer:
        CN2 Rule Viewer: null
        Review rules induced from data.: null
        icons/CN2RuleViewer.svg: null
        Inputs:
            Data: null
            Classifier: null
        Outputs:
            Selected Data: null
        __init__:
            IF conditions: null
            THEN class: null
            Distribution: null
            Probabilities [%]: null
            Quality: null
            Length: null
            compact_view: null
            Compact view: null
            Restore original order: null
        set_classifier:
            rule_list: null
        copy_to_clipboard:
            \n: null
        send_report:
            Data domain: null
            Rule induction algorithm: null
            Induced rules: null
    CustomRuleViewerTableModel:
        ==: null
        '=': null
        '!=': null
        ≠: null
        <=: null
        ≤: null
        '>=': null
        ≥: null
        data:
            _display_role:
                ' AND ': null
                ' AND\n': null
                'TRUE': null
                →: null
                '=': null
                .1f: null
                ' : ': null
                '{:.{}{}}': null
                f: null
                e: null
            _tooltip_role:
                ' AND ': null
                ' AND\n': null
                \n: null
                ': ': null
                '{:.1f}': null
                '%': null
    __main__: null
    iris: null
Orange/widgets/visualize/owheatmap.py:
    split_domain:
        ? "\"\"Split the domain based on values of `split_label` value.\n    \"\""
        : null
        N/A: null
    cbselect:
        ? "\"\"\n    Find and select the `value` in the `cb` QComboBox.\n\n    Parameters\n\
            \    ----------\n    cb: QComboBox\n    value: Any\n    role: Qt.ItemDataRole\n\
            \        The data role in the combo box model to match value against\n\
            \    \"\""
        : null
    None: null
    No clustering: null
    Clustering: null
    Apply hierarchical clustering: null
    Clustering (opt. ordering): null
    'Apply hierarchical clustering with optimal leaf ': null
    ordering.: null
    Top: null
    Bottom: null
    Top and Bottom: null
    create_list_model:
        '""Create list model from an item date iterable.""': null
    OWHeatMap:
        Heat Map: null
        Plot a data matrix heatmap.: null
        icons/Heatmap.svg: null
        Inputs:
            Data: null
        Outputs:
            Selected Data: null
        scene: null
        Information:
            Data has been sampled: null
            '{} categorical feature{} ignored': null
            '{}': null
            Showing this data may require a lot of memory: null
        Error:
            No numeric features: null
            Not enough features for column clustering: null
            Not enough instances for clustering: null
            Not enough instances for k-means merging: null
            Not enough memory to show this data: null
        Warning:
            Empty clusters were removed: null
        'For data with a meaningful mid-point, ': null
        choose one of diverging palettes.: null
        diverging_palette: null
        __init__:
            Color: null
            Merge: null
            merge_kmeans: null
            Merge by k-means: null
            merge_kmeans_k: null
            'Clusters:': null
            Clustering: null
            row_clustering: null
            col_clustering: null
            'Rows:': null
            'Columns:': null
            Split By: null
            (None): null
            Split the heatmap vertically by a categorical column: null
            split_by_var: null
            Split the heatmap horizontally by column annotation: null
            split_columns_var: null
            Annotation && Legends: null
            legend: null
            Show legend: null
            averages: null
            Stripes with averages: null
            Row Annotations: null
            annotation_var: null
            annotation_color_var: null
            Text: null
            Column annotations: null
            column_annotation_color_var: null
            column_label_pos: null
            Position: null
            keep_aspect: null
            Keep aspect ratio: null
            Resize: null
            auto_commit: null
            Increase Font: null
            ctrl+>: null
            Decrease Font: null
            ctrl+<: null
            setShortcutVisibleInContextMenu: null
        set_dataset:
            '""Set the input dataset to display.""': null
            s: null
        _make_parts:
            ? "\"\"\n        Make initial `Parts` for data, split by group_var, group_key\n\
                \        \"\""
            : null
            N/A: null
        cluster_rows:
            Parts: null
        cluster_columns:
            Parts: null
        construct_heatmaps:
            Parts: null
        construct_heatmaps_scene:
            Parts: null
            _T: null
        __update_clustering_enable_state:
            Parts: null
            c_cost:
                '""Estimated cost for clustering of `sizes`""': null
            co_cost:
                '""Estimated cost for cluster ordering of `sizes`""': null
            'Row cluster ordering was disabled due to the ': null
            estimated runtime cost: null
            'Row clustering was was disabled due to the ': null
            'Column cluster ordering was disabled due to ': null
            'Column clustering was disabled due to the ': null
        update_averages_stripe:
            ? "\"\"Update the visibility of the averages stripe.\n        \"\""
            : null
        update_annotations:
            ', ': null
            ' ({} more)': null
        set_annotation_color_var:
            '""Set the current side color annotation variable.""': null
        _on_view_context_menu:
            Keep aspect ratio: null
        send_report:
            'Columns:': null
            Clustering: null
            No sorting: null
            'Rows:': null
            'Split:': null
            Row annotation: null
        migrate_settings:
            row_clustering: null
            col_clustering: null
            row_clustering_method: null
            col_clustering_method: null
    RowPart:
        ? "\"\"\n    A row group\n\n    Attributes\n    ----------\n    title: str\n\
            \        Group title\n    indices : (N, ) Sequence[int]\n        Indices\
            \ in the input data to retrieve the row subset for the group.\n    cluster\
            \ : hierarchical.Tree optional\n    cluster_ordered : hierarchical.Tree\
            \ optional\n    \"\""
        : null
    ColumnPart:
        ? "\"\"\n    A column group\n\n    Attributes\n    ----------\n    title :\
            \ str\n        Column group title\n    indices : (N, ) int ndarray\n \
            \       Indexes the input data to retrieve the column subset for the group.\n\
            \    domain : List[Variable]\n        List of variables in the group.\n\
            \    cluster : hierarchical.Tree optional\n    cluster_ordered : hierarchical.Tree\
            \ optional\n    \"\""
        : null
    join_elided:
        '...': null
    column_data_from_table:
        f: null
    colorize:
        N/A: null
    aggregate:
        ', ': null
        ' ({} more)': null
    agg_join_str:
        ' ({} more)': null
        ', ': null
    _T: null
    __main__: null
    brown-selected.tab: null
Orange/widgets/visualize/owmosaic.py:
    MosaicVizRank:
        '""VizRank dialog for Mosaic""': null
        Mosaic Ranking: null
        __init__:
            '""Add the spin box for maximal number of attributes""': null
            max_attrs: null
            'Number of variables:': null
            one: null
            two: null
            three: null
            four: null
            at most two: null
            at most three: null
            at most four: null
        initialize:
            '""Clear the ordering to trigger recomputation when needed""': null
        initialize_keep_ordering:
            '""Initialize triggered by change of coloring""': null
        before_running:
            ? "\"\"\n        Disable the spin for maximal number of attributes before\
                \ running and\n        enable afterwards. Also, if the number of attributes\
                \ is different than\n        in the last run, reset the saved state\
                \ (if it was paused).\n        \"\""
            : null
        max_attr_changed:
            ? "\"\"\n        Change the button label when the maximal number of attributes\
                \ changes.\n\n        The method does not reset anything so the user\
                \ can still see the\n        results until actually restarting the\
                \ search.\n        \"\""
            : null
            Start: null
            Continue: null
        check_preconditions:
            '""Require at least one variable to allow ranking.""': null
            no_attributes: null
            No variables to rank.: null
        compute_attr_order:
            ? "\"\"\n        Order attributes by Relief if there is a target variable.\
                \ In case of\n        ties or without target, order by name.\n\n \
                \       Add the class variable at the beginning when not coloring\
                \ by class\n        distribution.\n\n        If `self.attrs` is not\
                \ `None`, keep the ordering and just add or remove\n        the class\
                \ as needed.\n        \"\""
            : null
            name: null
        state_count:
            ? "\"\"\n        Return the number of combinations, starting with a single\
                \ attribute\n        if Mosaic is colored by class distributions,\
                \ and two if by Pearson\n        \"\""
            : null
        iterate_states:
            ? "\"\"\n        Iterate through all combinations of attributes as ordered\
                \ by Relief,\n        starting with a single attribute if Mosaic is\
                \ colored by class\n        distributions, and two if by Pearson.\n\
                \        \"\""
            : null
        compute_score:
            ? "\"\"\n        Compute score using chi-square test of independence.\n\
                \n        If mosaic colors by class distribution, chi-square is computed\
                \ by\n        comparing the expected (prior) and observed class distribution\
                \ in\n        each cell. Otherwise, compute the independence of the\
                \ shown attributes.\n        \"\""
            : null
            '-': null
        row_for_state:
            ? "\"\"The row consists of attributes sorted by name; class is at the\n\
                \        beginning, if present, so it's on the x-axis and not lost\
                \ somewhere.\"\""
            : null
            ', ': null
    OWMosaicDisplay:
        Mosaic Display: null
        Display data in a mosaic plot.: null
        icons/MosaicDisplay.svg: null
        Inputs:
            Data: null
            Data Subset: null
        Outputs:
            Selected Data: null
        canvas: null
        Warning:
            Data subset is incompatible with Data: null
            No valid data: null
            Selection of numeric features on SQL is not supported: null
        __init__:
            (None): null
            variable{}: null
            Find Informative Mosaics: null
            Interior Coloring: null
            (Pearson residuals): null
            variable_color: null
            use_boxes: null
            Compare with total: null
        _get_discrete_data:
            ? "\"\"\n        Discretize continuous attributes.\n        Return None\
                \ when there is no data, no rows, or no primitive attributes.\n  \
                \      \"\""
            : null
        update_graph:
            get_counts:
                '""Calculate rectangles'' widths; if all are 0, they are set to 1.""': null
                '-': null
            draw_data:
                '-': null
                '{}&nbsp;&nbsp;&nbsp;&nbsp;{}: <b>{}</b><br/>': null
            add_rect:
                <hr/>: null
                'Expected instances: %.1f<br>': null
                'Actual instances: %d<br>': null
                'Standardized (Pearson) residual: %.1f': null
                '-': null
                <br/>: null
                '<b>%s</b>: %d / %.1f%% (Expected %.1f / %.1f%%)': null
                '{}<hr>Instances: {}<br><br>{}': null
            create_legend:
                <-8: null
                -8:-4: null
                -4:-2: null
                '-2:2': null
                '2:4': null
                '4:8': null
                '>8': null
                'Residuals:': null
            Feature {} has no values: null
        migrate_context:
            (None): null
    get_conditional_distribution:
        COUNT(*): null
        '?': null
        None: null
        '-': null
    __main__: null
    zoo: null
Orange/widgets/visualize/owvenndiagram.py:
    ? '""

        Venn Diagram Widget

        -------------------


        ""'
    : null
    _InputData: null
    key: null
    name: null
    table: null
    _ItemSet: null
    title: null
    items: null
    Instance identity: null
    Instance equality: null
    OWVennDiagram:
        Venn Diagram: null
        'A graphical visualization of the overlap of data instances ': null
        from a collection of input datasets.: null
        icons/VennDiagram.svg: null
        Inputs:
            Data: null
        Outputs:
            Selected Data: null
        Error:
            Data sets do not contain the same instances.: null
            Venn diagram accepts at most five datasets.: null
        Warning:
            'Some variables have been renamed ': null
            to avoid duplicates.\n{}: null
        scene: null
        attributes: null
        metas: null
        class_vars: null
        X: null
        Y: null
        x: null
        y: null
        __init__:
            rowwise: null
            Columns (features): null
            Rows (instances), matched by: null
            selected_feature: null
            'Instances are identical if originally coming from the ': null
            same row of the same table.\n: null
            'Instances can be check for equality only if described by ': null
            the same variables.: null
            output_duplicates: null
            Output duplicates: null
            autocommit: null
        data_equality:
            '"" Checks if all input datasets have same ids. ""': null
        _itemsForInput:
            ? "\"\"\n        Calculates input for venn diagram, according to user's\
                \ settings.\n        \"\""
            : null
        _createItemsets:
            ? "\"\"\n        Create itemsets over rows or columns (domains) of input\
                \ tables.\n        \"\""
            : null
        _createDiagram:
            '{} <i>(all: {})</i>': null
            '{}': null
            '{0}': null
            <h4>|{}| = {}</h4>: null
            <span>: null
            ', ': null
            </br>({len(area_items) - 32} items not shown): null
            </span>: null
        merge_data:
            ', ': null
            attributes: null
            metas: null
            class_vars: null
        extract_columnwise:
            '{var_name.name} ({idx})': null
            attributes: null
            Selected: null
            ', ': null
        curry_merge:
            inner:
                ? "\"\"\n            Atrs - list of variables we wish to merge\n \
                    \           new_atrs - dictionary where key is old var, val\n\
                    \                is [is_different:bool, table_keys:list]), is_different\
                    \ is set to True,\n                if we are outputing duplicates,\
                    \ but the value is arbitrary\n            \"\""
                : null
        create_from_columns:
            ? "\"\"\n        Columns are duplicated only if values differ (even\n\
                \        if only in order of values), origin table name and input\
                \ slot is added to column name.\n        \"\""
            : null
            attributes: null
        extract_rowwise:
            ? "\"\"\n        keys : ['attributes', 'metas', 'class_vars']\n      \
                \  vals: new_atrs - dictionary where key is old name, val\n      \
                \      is [is_different:bool, table_keys:list])\n        ids: dict\
                \ with ids for each table\n        \"\""
            : null
            '{} ({})': null
            ', ': null
        get_indices:
            '""Returns mappings of ids (be it row id or string) to indices in tables""': null
            metas: null
        extract_rowwise_duplicates:
            name: null
            attributes: null
            metas: null
            class_vars: null
        get_disjoint:
            ? "\"\"\n        Return all disjoint subsets.\n        \"\""
            : null
        migrate_settings:
            selected_feature: null
    string_attributes:
        ? "\"\"\n    Return all string attributes from the domain.\n    \"\""
        : null
    disjoint_set_label:
        ? "\"\"\n    Return a html formated label for a disjoint set indexed by `i`.\n\
            \    \"\""
        : null
        INTERSECTION: null
        c: null
        label_for_index:
            A: null
        <sup>: null
        </sup>: null
    VennDiagram:
        <center><h4>{0}</h4>{1}</center>: null
        _on_editingStarted:
            <br/>: null
    line_extended:
        ? "\"\"\n    Return an QLineF extended by `distance` units in the positive\
            \ direction.\n    \"\""
        : null
    append_column:
        X: null
        Y: null
        M: null
    arrays_equal:
        ? "\"\"\n    checks if arrays have nans in same places and if not-nan elements\n\
            \    are equal\n    \"\""
        : null
    main:
        brown-selected: null
        test_rows: null
        M: null
        Test: null
        A: null
    __main__: null
Orange/widgets/visualize/owdistributions.py:
    ScatterPlotItem:
        paint:
            pxMode: false
            antialias: false
    AshCurve:
        pdf:
            same: false
    ElidedAxisNoUnits:
        labelString:
            ;: true
            '{k}: {v}': true
            <span style='{style}'>{self.labelText}</span>: false
    OWDistributions:
        Distributions: Porazdelitve
        Display value distributions of a data feature in a graph.: Pokaži porazdelitev
            vrednosti spremenljivke.
        icons/Distribution.svg: false
        histogram: true
        Inputs:
            Data: Podatki
            Set the input dataset: Določi vhodne podatke
        Outputs:
            Selected Data: Izbrani podatki
            Histogram Data: Podatki o porazdelitvi
        Error:
            Variable '{}' does not have any defined values: Spremenljivke '{}' nima
                definiranih vrednosti.
            No data instances with '{}' and '{}' defined: Nobena vrstica nima znanih
                vrednosti za '{}' in '{}'.
        Warning:
            Data instances with missing values are ignored: Podatki z neznanimi vrednostmi
                so izločeni.
        plot: false
        None: (brez)
        Normal: Normalna
        loc: false
        scale: false
        μ: true
        σ: true
        Beta: true
        a: false
        b: false
        α: true
        β: true
        -loc: false
        -scale: false
        Gamma: Gama
        Rayleigh: true
        Pareto: true
        Exponential: Eksponentna
        λ: true
        Kernel density: Jedra
        __init__:
            var: false
            Variable: Spremenljivka
            sort_by_freq: false
            Sort categories by frequency: Uredi kategorije po velikosti
            Distribution: Porazdelitev
            fitted_distribution: false
            Fitted distribution: Prilagodi porazdelitev
            number_of_bins: false
            Bin width: Širina koša
            kde_smoothing: false
            Smoothing: Glajenje
            hide_bars: false
            Hide bars: Skrij stolpce
            Columns: Stolpci
            cvar: false
            Split by: Razdeli po
            (None): (Ne deli)
            stacked_columns: false
            Stack columns: Naloži stolpce
            show_probs: false
            Show probabilities: Pokaži verjetnosti
            cumulative_distr: false
            Show cumulative distribution: Pokaži kumulativno porazdelitev
        _setup_plots:
            add_new_plot:
                right: false
            bottom: false
            left: false
        _on_show_probabilities_changed:
            Fitted probability: Prilagojena verjetnost
            Chosen distribution is used to compute Bayesian probabilities: Izbrana
                porazdelitev je uporabljena za izračun Bayesovkih verjenosti
            Fitted distribution: Prilagojena porazdelitev
        _set_axis_names:
            bottom: false
            left: false
            Probability of '{self.cvar.name}' at given '{self.var.name}': Verjetnost
                '{self.cvar.name}' pri podani '{self.var.name}'
            Frequency: Frekvenca
        _disc_plot:
            bottom: false
            <p style='white-space:pre;'>: true
            '<b>{escape(desc)}</b>: {int(freq)} ': true
            '({100 * freq / len(self.valid_data):.2f} %) ': true
        _disc_split_plot:
            bottom: false
        _cont_plot:
            <p style='white-space:pre;'>: true
            '<b>{escape(desc)}</b>: ': true
            '{freq} ({100 * freq / total:.2f} %)</p>': true
        _set_cont_ticks:
            bottom: false
        _fit_approximation:
            join_pars:
                ', ': true
                '{sname}={strv(val)}': true
            str_params:
                '-': true
                ' ({par})': true
        _set_curve_brushes:
            pen: false
        _split_tooltip:
            'white-space:pre; text-align: right;': true
            'style=''{cs} padding-left: 1em''': true
            style='{cs}': false
            '<table style=''border-collapse: collapse''>': true
            <tr><th {s}>{escape(valname)}:</th>: true
            <td {snp}><b>{int(tot_group)}</b></td>: true
            <td/>: true
            <td {s}><b>{100 * tot_group / total:.2f} %</b></td></tr>: true
            <tr><td/><td/><td {s}>(in group)</td><td {s}>(overall)</td>: true
            </tr>: true
            <tr>: true
            <th {s}>{value}:</th>: true
            <td {snp}><b>{int(freq)}</b></td>: true
            <td {s}>{100 * freq / div_group:.2f} %</td>: true
            <td {s}>{100 * freq / total:.2f} %</td>: true
            </table>: true
        _display_legend:
            s: false
            ' ({desc})': true
        str_int:
            '{var.name} < {sx1}': true
            '{var.name} = {sx0}': true
            '{var.name} ≥ {sx0}': true
            '{sx0} ≤ {var.name} < {sx1}': true
        show_selection:
            <p style='white-space:pre;'>: true
            '<b>{escape(valname)}</b>: ': true
            '{inside} ({100 * inside / total:.2f} %)': true
        apply:
            Bin: Koš
        _get_histogram_table:
            Bin: Koš
            Count: Število
        _get_cont_baritem_indices:
            ignore: false
        send_report:
            Cummulative distribution of '{self.var.name}': Kumulativna porazdelitev
                '{self.var.name}'
            Distribution of '{self.var.name}': Porazdelitev '{self.var.name}'
            ' with columns split by ''{self.cvar.name}''': ' s stolpci, razdeljenimi
                po ''{self.cvar.name}'''
    __main__: false
    heart_disease.tab: false
Orange/widgets/visualize/owfreeviz.py:
    run_freeviz:
        Calculating...: null
    InitType:
        items:
            Circular: null
            Random: null
    OWFreeViz:
        FreeViz: null
        Displays FreeViz projection: null
        icons/Freeviz.svg: null
        viz: null
        Error:
            Data must have a target variable.: null
            Data must have a single target variable.: null
            Target variable must have at least two unique values.: null
            Number of features exceeds the number of instances.: null
            Data is too large.: null
            All data columns are constant.: null
            At least two features are required.: null
        Warning:
            Categorical features with more than: null
            ' two values are not shown.': null
        _add_controls:
            'Hide radius:': null
            hide_radius: null
        __add_controls_start_box:
            Optimize: null
            initialization: null
            'Initialization:': null
            Start: null
        _toggle_run:
            Resume: null
        _run:
            Stop: null
        on_done:
            Start: null
        on_exception:
            Start: null
        enable_controls:
            Start: null
        migrate_settings:
            radius: null
            graph: null
            hide_radius: null
        migrate_context:
            attr_color: null
            graph: null
            attr_size: null
            attr_shape: null
            attr_label: null
    __main__: null
    zoo: null
Orange/widgets/visualize/owlineplot.py:
    ccw:
        ? "\"\"\n    Checks whether three points are listed in a counterclockwise\
            \ order.\n    \"\""
        : null
    intersects:
        ? "\"\"\n    Checks whether line segment a (given points a and b) intersects\
            \ with line\n    segment b (given points c and d).\n    \"\""
        : null
    line_intersects_profiles:
        ? "\"\"\n    Checks if a line intersects any line segments.\n\n    Parameters\n\
            \    ----------\n    p1, p2 : ndarray\n        Endpoints of the line,\
            \ given x coordinate as p_[0]\n        and y coordinate as p_[1].\n  \
            \  table : ndarray\n        An array of shape m x n x p; where m is number\
            \ of connected points\n        for a individual profile (i. e. number\
            \ of features), n is number\n        of instances, p is number of coordinates\
            \ (x and y).\n\n    Returns\n    -------\n    result : ndarray\n     \
            \   Array of bools with shape of number of instances in the table.\n \
            \   \"\""
        : null
    ParameterSetter:
        Mean: null
        Lines: null
        Selected lines: null
        Range: null
        Selected range: null
        axis_items:
            item: null
    LinePlotGraph:
        __init__:
            bottom: null
            left: null
        update_legend:
            s: null
        reset:
            bottom: null
    ProfileGroup:
        update_profiles_color:
            pen: null
        update_sel_profiles_color:
            pen: null
    OWLinePlot:
        Line Plot: null
        Visualization of data profiles (e.g., time series).: null
        icons/LinePlot.svg: null
        Inputs:
            Data: null
            Data Subset: null
        Outputs:
            Selected Data: null
        graph.plotItem: null
        Error:
            Need at least one numeric feature.: null
            No plot due to no valid data.: null
        Warning:
            No display option is selected.: null
        Information:
            Instances with unknown values are not shown.: null
            Data has too many features. Only first {}: null
            ' are shown.': null
        _add_controls:
            Display: null
            show_profiles: null
            Lines: null
            Plot lines: null
            show_range: null
            Range: null
            Plot range between 10th and 90th percentile: null
            show_mean: null
            Mean: null
            Plot mean curve: null
            show_error: null
            Error bars: null
            Show standard deviation: null
            None: null
            group_var: null
            Group by: null
            auto_commit: null
        __show_profiles_changed:
            profiles: null
        __show_range_changed:
            range: null
        __show_mean_changed:
            mean: null
        __show_error_changed:
            error: null
        setup_plot:
            bottom: null
        __get_visibility_flags:
            show_profiles: null
            show_range: null
            show_mean: null
            show_error: null
        _update_visibility:
            set_visible_{}: null
        send_report:
            Group by: null
    __main__: null
    brown-selected: null
Orange/widgets/visualize/owpythagoreanforest.py:
    '""Pythagorean forest widget for visualizing random forests.""': null
    PythagoreanForestModel:
        data:
            tree: null
            scene: null
        trees:
            '""Get the tree adapters.""': null
        update_tree_views:
            '""Apply `func` to every rendered tree viewer instance.""': null
            tree: null
    PythagorasTreeDelegate:
        paint:
            '#ebebeb': null
    ClickToClearSelectionListView:
        '""Clicking outside any item clears the current selection.""': null
    OWPythagoreanForest:
        Pythagorean Forest: null
        Pythagorean forest for visualising random forests.: null
        icons/PythagoreanForest.svg: null
        fractal: null
        Inputs:
            Random Forest: null
            Random forest: null
        Outputs:
            Tree: null
        scene: null
        Normal: null
        Square root: null
        Logarithmic: null
        migrate_settings:
            selected_tree_index: null
            zoom: null
        __init__:
            Forest: null
            Display: null
            depth_limit: null
            Depth: null
            target_class_index: null
            Target class: null
            size_calc_idx: null
            Size: null
            zoom: null
            Zoom: null
        set_rf:
            '""When a different forest is given.""': null
        clear:
            '""Clear all relevant data from the widget.""': null
        _update_info_box:
            'Trees: {}': null
        _update_target_class_combo:
            Target class: null
            None: null
            Node color: null
        _clear_info_box:
            No forest on input.: null
        onDeleteWidget:
            '""When deleting the widget.""': null
        commit:
            '""Commit the selected tree to output.""': null
        send_report:
            '""Send report.""': null
    SklRandomForestAdapter:
        ? "\"\"Take a `RandomForest` and wrap all the trees into the `SklTreeAdapter`\n\
            \    instances that Pythagorean trees use.\"\""
        : null
        trees:
            '""Get the tree adapters in the random forest.""': null
        domain:
            '""Get the domain.""': null
    __main__: null
    iris: null
Orange/widgets/visualize/utils/heatmap.py:
    ColorMap:
        '""Base color map class.""': null
        replace:
            ColorMap: null
    CategoricalColorMap:
        '""A categorical color map.""': null
        replace:
            CategoricalColorMap: null
            colortable: null
            names: null
    GradientColorMap:
        '""Color map for the heatmap.""': null
        adjust_levels:
            ? "\"\"\n        Adjust the data low, high levels by applying the thresholding\
                \ and\n        centering.\n        \"\""
            : null
            low > high ({low} > {high}): null
        apply:
            ignore: null
            unsafe: null
        replace:
            GradientColorMap: null
            colortable: null
            thresholds: null
            center: null
            span: null
    normalized_indices:
        RowItem: null
        ColumnItem: null
    grid_layout_row_geometry:
        ? "\"\"\n    Return the geometry of the `row` in the grid layout.\n\n    If\
            \ the row is empty return an empty geometry\n    \"\""
        : null
    HeatmapGridWidget:
        ? "\"\"\n    A graphics widget with a annotated 2D grid of heatmaps.\n   \
            \ \"\""
        : null
        RowItem:
            ? "\"\"\n        A row group item\n\n        Attributes\n        ----------\n\
                \        title: str\n            Group title\n        indices : (N,\
                \ ) Sequence[int]\n            Indices in the input data to retrieve\
                \ the row subset for the group.\n        cluster : Optional[Tree]\n\
                \n        \"\""
            : null
        ColumnItem:
            ? "\"\"\n        A column group\n\n        Attributes\n        ----------\n\
                \        title: str\n            Column group title\n        indices:\
                \ (N, ) Sequence[int]\n            Indexes the input data to retrieve\
                \ the column subset for the group.\n        cluster: Optional[Tree]\n\
                \        \"\""
            : null
        Parts:
            RowItem: null
            ColumnItem: null
        clear:
            '""Clear the widget.""': null
        setHeatmaps:
            Parts: null
            '""Set the heatmap parts for display""': null
            row-labels-right: null
            column-labels-top: null
            column-labels-bottom: null
            annotation-legend-container: null
            row-annotation-legend-container: null
            col-annotation-legend-container: null
        legendVisible:
            '""Is the colormap legend visible.""': null
        setLegendVisible:
            '""Set colormap legend visible state.""': null
        setAspectRatioMode:
            ? "\"\"\n        Set the scale aspect mode.\n\n        The widget will\
                \ try to keep (hint) the scale ratio via the sizeHint\n        reimplementation.\n\
                \        \"\""
            : null
        setColumnLabels:
            '""Set the column labels to display. If None clear the row names.""': null
        setRowLabels:
            ? "\"\"\n        Set the row labels to display. If None clear the row\
                \ names.\n        \"\""
            : null
        setRowLabelsVisible:
            '""Set row labels visibility""': null
        setRowSideColorAnnotations:
            ? "\"\"\n        Set an optional row side color annotations.\n\n     \
                \   Parameters\n        ----------\n        data: Optional[np.ndarray]\n\
                \            A sequence such that it is accepted by `colormap.apply`.\
                \ If None\n            then the color annotations are cleared.\n \
                \       colormap: ColorMap\n        name: str\n            Name/title\
                \ for the annotation column.\n        \"\""
            : null
        setColumnSideColorAnnotations:
            ? "\"\"\n        Set an optional column color annotations.\n\n       \
                \ Parameters\n        ----------\n        data: Optional[np.ndarray]\n\
                \            A sequence such that it is accepted by `colormap.apply`.\
                \ If None\n            then the color annotations are cleared.\n \
                \       colormap: ColorMap\n        name: str\n            Name/title\
                \ for the annotation column.\n        \"\""
            : null
        headerGeometry:
            ? "\"\"Return the 'header' geometry.\n\n        This is the top part of\
                \ the widget spanning the top dendrogram,\n        column labels...\
                \ (can be empty).\n        \"\""
            : null
        footerGeometry:
            ? "\"\"Return the 'footer' geometry.\n\n        This is the bottom part\
                \ of the widget spanning the bottom column labels\n        when applicable\
                \ (can be empty).\n        \"\""
            : null
        heatmapAtPos:
            GraphicsHeatmapWidget: null
        selectedRows:
            '""Return the current selected rows.""': null
        selectRows:
            '""Select the specified rows. Previous selection is cleared.""': null
    GraphicsHeatmapWidget:
        clear:
            '""Clear/reset the widget.""': null
        setHeatmapData:
            '""Set the heatmap data for display.""': null
        heatmapCellAt:
            ? "\"\"Return the cell row, column from `pos` in local coordinates.\n\
                \        \"\""
            : null
        heatmapCellRect:
            ? "\"\"Return a rectangle in local coordinates containing the cell\n \
                \       at `row` and `column`.\n        \"\""
            : null
        rowRect:
            ? "\"\"\n        Return a QRectF in local coordinates containing the entire\
                \ row.\n        \"\""
            : null
        heatmapCellToolTip:
            '{}, {}: {:g}': null
    _GradientLegendAxisItem:
        boundingRect:
            top: null
            bottom: null
            tickFont: null
            '0.0000000': null
    GradientLegendWidget:
        __init__:
            sizePolicy: null
            top: null
        setColorMap:
            '""Set the color map""': null
        __update:
            '{:.6g}': null
    CategoricalColorLegend:
        __init__:
            sizePolicy: null
        _setup:
            X: null
        _updateFont:
            X: null
    SelectionManager:
        ? "\"\"\n    Selection manager for heatmap rows\n    \"\""
        : null
        select_rows:
            ? "\"\"Add `rows` to selection. If `heatmap` is provided the rows\n  \
                \      are mapped from the local indices to global heatmap indices.\
                \ If `clear`\n        then remove previous rows.\n        \"\""
            : null
        remove_rows:
            ? "\"\"Remove `rows` from the selection.\n        \"\""
            : null
        selection_start:
            ? "\"\" Selection  started by `heatmap_widget` due to `event`.\n     \
                \   \"\""
            : null
        selection_update:
            ? "\"\" Selection updated by `heatmap_widget due to `event` (mouse drag).\n\
                \        \"\""
            : null
        selection_finish:
            ? "\"\" Selection finished by `heatmap_widget due to `event`.\n      \
                \  \"\""
            : null
        selection_add:
            ? "\"\" Add/remove a selection range from `start` to `end`.\n        \"\
                \""
            : null
        update_selection_rects:
            ? "\"\" Update the selection rects.\n        \"\""
            : null
            group_selections:
                ? "\"\"Group selections along with heatmaps.\n            \"\""
                : null
Orange/widgets/visualize/utils/widget.py:
    OWProjectionWidgetBase:
        ? "\"\"\n    Base widget for widgets that use attribute data to set the colors,\
            \ labels,\n    shapes and sizes of points.\n\n    The widgets defines\
            \ settings `attr_color`, `attr_label`, `attr_shape`\n    and `attr_size`,\
            \ but leaves defining the gui to the derived widgets.\n    These are expected\
            \ to have controls that manipulate these settings,\n    and the controls\
            \ are expected to use attribute models.\n\n    The widgets also defines\
            \ attributes `data` and `valid_data` and expects\n    the derived widgets\
            \ to use them to store an instances of `data.Table`\n    and a bool `np.ndarray`\
            \ with indicators of valid (that is, shown)\n    data points.\n    \"\""
        : null
        Information:
            Points with undefined '{}' are shown in smaller size: null
            Points with undefined '{}' are shown as crossed circles: null
        init_attr_values:
            ? "\"\"\n        Set the models for `attr_color`, `attr_shape`, `attr_size`\
                \ and\n        `attr_label`. All values are set to `None`, except\
                \ `attr_color`\n        which is set to the class variable if it exists.\n\
                \        \"\""
            : null
            attr_color: null
            attr_shape: null
            attr_size: null
            attr_label: null
        get_coordinates_data:
            ? "\"\"A get coordinated method that returns no coordinates.\n\n     \
                \   Derived classes must override this method.\n        \"\""
            : null
        get_subset_mask:
            ? "\"\"\n        Return the bool array indicating the points in the subset\n\
                \n        The base method does nothing and would usually be overridden\
                \ by\n        a method that returns indicators from the subset signal.\n\
                \n        Do not confuse the subset with selection.\n\n        Returns:\n\
                \            (np.ndarray or `None`): a bool array of indicators\n\
                \        \"\""
            : null
        get_column:
            ? "\"\"\n        Retrieve the data from the given column in the data table\n\
                \n        The method:\n        - densifies sparse data,\n        -\
                \ converts arrays with dtype object to floats if the attribute is\n\
                \          actually primitive,\n        - filters out invalid data\
                \ (if `filter_valid` is `True`),\n        - merges infrequent (discrete)\
                \ values into a single value\n          (if `max_categories` is set).\n\
                \n        Tha latter feature is used for shapes and labels, where\
                \ only a\n        specified number of different values is shown, and\
                \ others are\n        merged into category 'Other'. In this case,\
                \ the method may return\n        either the data (e.g. color indices,\
                \ shape indices) or the list\n        of retained values, followed\
                \ by `['Other']`.\n\n        Args:\n            attr (:obj:~Orange.data.Variable):\
                \ the column to extract\n            filter_valid (bool): filter out\
                \ invalid data (default: `True`)\n            max_categories (int):\
                \ merge infrequent values (default: `None`);\n                ignored\
                \ for non-discrete attributes\n            return_labels (bool): return\
                \ a list of labels instead of data\n                (default: `False`)\n\
                \n        Returns:\n            (np.ndarray): (valid) data from the\
                \ column, or a list of labels\n        \"\""
            : null
            Other: null
        get_size_data:
            '""Return the column corresponding to `attr_size`""': null
        impute_sizes:
            ? "\"\"\n        Default imputation for size data\n\n        Let the graph\
                \ handle it, but add a warning if needed.\n\n        Args:\n     \
                \       size_data (np.ndarray): scaled points sizes\n        \"\""
            : null
        get_color_data:
            '""Return the column corresponding to color data""': null
        get_color_labels:
            ? "\"\"\n        Return labels for the color legend\n\n        Returns:\n\
                \            (list of str): labels\n        \"\""
            : null
        is_continuous_color:
            ? "\"\"\n        Tells whether the color is continuous\n\n        Returns:\n\
                \            (bool):\n        \"\""
            : null
        get_palette:
            ? "\"\"\n        Return a palette suitable for the current `attr_color`\n\
                \n        This method must be overridden if the widget offers coloring\
                \ that is\n        not based on attribute values.\n        \"\""
            : null
        can_draw_density:
            ? "\"\"\n        Tells whether the current data and settings are suitable\
                \ for drawing\n        densities\n\n        Returns:\n           \
                \ (bool):\n        \"\""
            : null
        get_label_data:
            '""Return the column corresponding to label data""': null
        get_shape_data:
            ? "\"\"\n        Return labels for the shape legend\n\n        Returns:\n\
                \            (list of str): labels\n        \"\""
            : null
        impute_shapes:
            ? "\"\"\n        Default imputation for shape data\n\n        Let the\
                \ graph handle it, but add a warning if needed.\n\n        Args:\n\
                \            shape_data (np.ndarray): scaled points sizes\n      \
                \      default_symbol (str): a string representing the symbol\n  \
                \      \"\""
            : null
        _point_tooltip:
            show_part:
                '{} = {}': null
                '... and {} others': null
                <b>{}</b>:<br/>: null
                <br/>: null
            Class: null
            Classes: null
            Meta: null
            Metas: null
            Feature: null
            Features: null
            <br/>: null
        get_tooltip:
            ? "\"\"\n        Return the tooltip string for the given points\n\n  \
                \      The method is called by the plot on mouse hover\n\n       \
                \ Args:\n            point_ids (list): indices into `data`\n\n   \
                \     Returns:\n            (str):\n        \"\""
            : null
            <hr/>: null
            '{} instances<hr/>{}<hr/>...': null
        keyPressEvent:
            '""Update the tip about using the modifier keys when selecting""': null
        keyReleaseEvent:
            '""Update the tip about using the modifier keys when selecting""': null
    OWDataProjectionWidget:
        ? "\"\"\n    Base widget for widgets that get Data and Data Subset (both\n\
            \    Orange.data.Table) on the input, and output Selected Data and Data\n\
            \    (both Orange.data.Table).\n\n    Beside that the widget displays\
            \ data as two-dimensional projection\n    of points.\n    \"\""
        : null
        Inputs:
            Data: null
            Data Subset: null
        Outputs:
            Selected Data: null
        Warning:
            Too many labels to show (zoom in or label only selected): null
            'Subset data contains some instances that do not appear in ': null
            input data: null
            No subset data instances appear in input data: null
            Increase opacity if subset is difficult to see: null
        graph.plot_widget.plotItem: null
        proj-x: null
        proj-y: null
        _add_buttons:
            auto_commit: null
        get_embedding:
            ? "\"\"A get embedding method.\n\n        Derived classes must override\
                \ this method. The overridden method\n        should return embedding\
                \ for all data (valid and invalid). Invalid\n        data embedding\
                \ coordinates should be set to 0 (in some cases to Nan).\n\n     \
                \   The method should also set self.valid_data.\n\n        Returns:\n\
                \            np.array: Array of embedding coordinates with shape\n\
                \            len(self.data) x 2\n        \"\""
            : null
        _get_selected_data:
            Group: null
        _get_send_report_caption:
            Color: null
            Label: null
            Shape: null
            Size: null
            Jittering: null
            '{} %': null
    OWAnchorProjectionWidget:
        '"" Base widget for widgets with graphs with anchors. ""': null
        Outputs:
            Components: null
        Error:
            Sparse data is not supported: null
            No projection due to no valid data: null
            At least two data instances are required: null
            An error occurred while projecting data.\n{}: null
        send_components:
            component: null
            components: null
    __main__: null
    OWProjectionWidgetWithName:
        projection: null
    iris: null
Orange/widgets/visualize/utils/owlegend.py:
    '""Legend classes to use with `QGraphicsScene` objects.""': null
    Anchorable:
        ? "\"\"Anchorable base class.\n\n    Subclassing the `Anchorable` class will\
            \ anchor the given\n    `QGraphicsWidget` to a position on the viewport.\
            \ This does require you to\n    use the `AnchorableGraphicsView` class,\
            \ it is made to be composable, so\n    that should not be a problem.\n\
            \n    Notes\n    -----\n    .. note:: Subclassing this class will not\
            \ make your widget movable, you\n        have to do that yourself. If\
            \ you do make your widget movable, this will\n        handle any further\
            \ positioning when the widget is moved.\n\n    \"\""
        : null
        topLeft: null
        topRight: null
        bottomLeft: null
        bottomRight: null
        __init__:
            bottomRight: null
        recalculate_offset:
            ? "\"\"This is called whenever the item is being moved and needs to\n\
                \        recalculate its offset.\"\""
            : null
        update_pos:
            ? "\"\"Update the widget position relative to the viewport.\n\n      \
                \  This is called whenever something happened with the view that caused\n\
                \        this item to move from its anchored position, so we have\
                \ to adjust the\n        position to maintain the effect of being\
                \ anchored.\"\""
            : null
        __calculate_actual_offset:
            ? "\"\"Take the offset specified in the constructor and calculate the\n\
                \        actual offset from the top left corner of the item so positioning\
                \ can\n        be done correctly.\"\""
            : null
    AnchorableGraphicsView:
        '""Subclass when wanting to use Anchorable items in your view.""': null
        update_anchored_items:
            '""Update all the items that subclass the `Anchorable` class.""': null
    ColorIndicator:
        ? "\"\"Base class for an item indicator.\n\n    Usually the little square\
            \ or circle in the legend in front of the text.\"\""
        : null
    LegendItemSquare:
        ? "\"\"Legend square item.\n\n    The legend square item is a small colored\
            \ square image that can be plugged\n    into the legend in front of the\
            \ text object.\n\n    This should only really be used in conjunction with\
            \ ˙LegendItem˙.\n\n    Parameters\n    ----------\n    color : QColor\n\
            \        The color of the square.\n    parent : QGraphicsItem\n\n    See\
            \ Also\n    --------\n    LegendItemCircle\n\n    \"\""
        : null
    LegendItemCircle:
        ? "\"\"Legend circle item.\n\n    The legend circle item is a small colored\
            \ circle image that can be plugged\n    into the legend in front of the\
            \ text object.\n\n    This should only really be used in conjunction with\
            \ ˙LegendItem˙.\n\n    Parameters\n    ----------\n    color : QColor\n\
            \        The color of the square.\n    parent : QGraphicsItem\n\n    See\
            \ Also\n    --------\n    LegendItemSquare\n\n    \"\""
        : null
    LegendItemTitle:
        ? "\"\"Legend item title - the text displayed in the legend.\n\n    This should\
            \ only really be used in conjunction with ˙LegendItem˙.\n\n    Parameters\n\
            \    ----------\n    text : str\n    parent : QGraphicsItem\n    font\
            \ : QFont\n        This\n\n    \"\""
        : null
    LegendItem:
        ? "\"\"Legend item - one entry in the legend.\n\n    This represents one entry\
            \ in the legend i.e. a color indicator and the text\n    beside it.\n\n\
            \    Parameters\n    ----------\n    color : QColor\n        The color\
            \ that the entry will represent.\n    title : str\n        The text that\
            \ will be displayed for the color.\n    parent : QGraphicsItem\n    color_indicator_cls\
            \ : ColorIndicator\n        The type of `ColorIndicator` that will be\
            \ used for the color.\n    font : QFont, optional\n\n    \"\""
        : null
    LegendGradient:
        ? "\"\"Gradient widget.\n\n    A gradient square bar that can be used to display\
            \ continuous values.\n\n    Parameters\n    ----------\n    palette :\
            \ iterable[QColor]\n    parent : QGraphicsWidget\n    orientation : Qt.Orientation\n\
            \n    Notes\n    -----\n    .. note:: While the gradient does support\
            \ any number of colors, any more\n        than 3 is not very readable.\
            \ This should not be a problem, since Orange\n        only implements\
            \ 2 or 3 colors.\n\n    \"\""
        : null
    ContinuousLegendItem:
        ? "\"\"Continuous legend item.\n\n    Contains a gradient bar with the color\
            \ ranges, as well as two labels - one\n    on each side of the gradient\
            \ bar.\n\n    Parameters\n    ----------\n    palette : iterable[QColor]\n\
            \    values : iterable[float...]\n        The number of values must match\
            \ the number of colors in passed in the\n        color palette.\n    parent\
            \ : QGraphicsWidget\n    font : QFont\n    orientation : Qt.Orientation\n\
            \n    \"\""
        : null
        _format_values:
            '""Get the formatted values to output.""': null
            '{:.3f}': null
    Legend:
        ? "\"\"Base legend class.\n\n    This class provides common attributes for\
            \ any legend subclasses:\n      - Behaviour on `QGraphicsScene`\n    \
            \  - Appearance of legend\n\n    Parameters\n    ----------\n    parent\
            \ : QGraphicsItem, optional\n    orientation : Qt.Orientation, optional\n\
            \        The default orientation is vertical\n    domain : Orange.data.domain.Domain,\
            \ optional\n        This field is left optional as in some cases, we may\
            \ want to simply\n        pass in a list that represents the legend.\n\
            \    items : Iterable[QColor, str]\n    bg_color : QColor, optional\n\
            \    font : QFont, optional\n    color_indicator_cls : ColorIndicator\n\
            \        The color indicator class that will be used to render the indicators.\n\
            \n    See Also\n    --------\n    OWDiscreteLegend\n    OWContinuousLegend\n\
            \    OWContinuousLegend\n\n    Notes\n    -----\n    .. warning:: If the\
            \ domain parameter is supplied, the items parameter will\n        be ignored.\n\
            \n    \"\""
        : null
        set_domain:
            ? "\"\"Handle receiving the domain object.\n\n        Parameters\n   \
                \     ----------\n        domain : Orange.data.domain.Domain\n\n \
                \       Returns\n        -------\n\n        Raises\n        ------\n\
                \        AttributeError\n            If the domain does not contain\
                \ the correct type of class variable.\n\n        \"\""
            : null
        set_items:
            ? "\"\"Handle receiving an array of items.\n\n        Parameters\n   \
                \     ----------\n        values : iterable[object, QColor]\n\n  \
                \      Returns\n        -------\n\n        \"\""
            : null
        setVisible:
            '""Only display the legend if it contains any items.""': null
    OWDiscreteLegend:
        ? "\"\"Discrete legend.\n\n    See Also\n    --------\n    Legend\n    OWContinuousLegend\n\
            \n    \"\""
        : null
        set_domain:
            '[OWDiscreteLegend] The class var provided ': null
            was not discrete.: null
    OWContinuousLegend:
        ? "\"\"Continuous legend.\n\n    See Also\n    --------\n    Legend\n    OWDiscreteLegend\n\
            \n    \"\""
        : null
        __init__:
            range: null
        set_domain:
            '[OWContinuousLegend] The class var provided ': null
            was not continuous.: null
    OWBinnedContinuousLegend:
        ? "\"\"Binned continuous legend in case you don't like gradients.\n\n    This\
            \ is not implemented yet, but in case it ever needs to be, the stub is\n\
            \    available.\n\n    See Also\n    --------\n    Legend\n    OWDiscreteLegend\n\
            \    OWContinuousLegend\n\n    \"\""
        : null
Orange/widgets/visualize/utils/__init__.py:
    ? '""

        Utility classes for visualization widgets

        ""'
    : null
    VizRankDialog:
        ? "\"\"\n    Base class for VizRank dialogs, providing a GUI with a table\
            \ and a button,\n    and the skeleton for managing the evaluation of visualizations.\n\
            \n    Derived classes must provide methods\n\n    - `iterate_states` for\
            \ generating combinations (e.g. pairs of attritutes),\n    - `compute_score(state)`\
            \ for computing the score of a combination,\n    - `row_for_state(state)`\
            \ that returns a list of items inserted into the\n       table for the\
            \ given state.\n\n    and, optionally,\n\n    - `state_count` that returns\
            \ the number of combinations (used for progress\n       bar)\n    - `on_selection_changed`\
            \ that handles event triggered when the user selects\n      a table row.\
            \ The method should emit signal\n      `VizRankDialog.selectionChanged(object)`.\n\
            \    - `bar_length` returns the length of the bar corresponding to the\
            \ score.\n\n    The class provides a table and a button. A widget constructs\
            \ a single\n    instance of this dialog in its `__init__`, like (in Sieve)\
            \ by using a\n    convenience method :obj:`add_vizrank`::\n\n        self.vizrank,\
            \ self.vizrank_button = SieveRank.add_vizrank(\n            box, self,\
            \ \"Score Combinations\", self.set_attr)\n\n    When the widget receives\
            \ new data, it must call the VizRankDialog's\n    method :obj:`VizRankDialog.initialize()`\
            \ to clear the GUI and reset the\n    state.\n\n    Clicking the Start\
            \ button calls method `run` (and renames the button to\n    Pause). Run\
            \ sets up a progress bar by getting the number of combinations\n    from\
            \ :obj:`VizRankDialog.state_count()`. It restores the paused state\n \
            \   (if any) and calls generator :obj:`VizRankDialog.iterate_states()`.\
            \ For\n    each generated state, it calls :obj:`VizRankDialog.score(state)`,\
            \ which\n    must return the score (lower is better) for this state. If\
            \ the returned\n    state is not `None`, the data returned by `row_for_state`\
            \ is inserted at\n    the appropriate place in the table.\n\n    Args:\n\
            \        master (Orange.widget.OWWidget): widget to which the dialog belongs\n\
            \n    Attributes:\n        master (Orange.widget.OWWidget): widget to\
            \ which the dialog belongs\n        captionTitle (str): the caption for\
            \ the dialog. This can be a class\n          attribute. `captionTitle`\
            \ is used by the `ProgressBarMixin`.\n    \"\""
        : null
        Information:
            There is nothing to rank.: null
        __init__:
            '""Initialize the attributes and set up the interface""': null
            Filter ...: null
            Start: null
        add_vizrank:
            ? "\"\"\n        Equip the widget with VizRank button and dialog, and\
                \ monkey patch the\n        widget's `closeEvent` and `hideEvent`\
                \ to close/hide the vizrank, too.\n\n        Args:\n            widget\
                \ (QWidget): the widget into whose layout to insert the button\n \
                \           master (Orange.widgets.widget.OWWidget): the master widget\n\
                \            button_label: the label for the button\n            set_attr_callback:\
                \ the callback for setting the projection chosen\n               \
                \ in the vizrank\n\n        Returns:\n            tuple with Vizrank\
                \ dialog instance and push button\n        \"\""
            : null
        reshow:
            ? "\"\"Put the widget on top of all windows\n        \"\""
            : null
        initialize:
            ? "\"\"\n        Clear and initialize the dialog.\n\n        This method\
                \ must be called by the widget when the data is reset,\n        e.g.\
                \ from `set_data` handler.\n        \"\""
            : null
            Start: null
        check_preconditions:
            '""Check whether there is sufficient data for ranking.""': null
        on_selection_changed:
            ? "\"\"\n        Set the new visualization in the widget when the user\
                \ select a\n        row in the table.\n\n        If derived class\
                \ does not reimplement this, the table gives the\n        information\
                \ but the user can't click it to select the visualization.\n\n   \
                \     Args:\n            selected: the index of the selected item\n\
                \            deselected: the index of the previously selected item\n\
                \        \"\""
            : null
        iterate_states:
            ? "\"\"\n        Generate all possible states (e.g. attribute combinations)\
                \ for the\n        given data. The content of the generated states\
                \ is specific to the\n        visualization.\n\n        This method\
                \ must be defined in the derived classes.\n\n        Args:\n     \
                \       initial_state: initial state; None if this is the first call\n\
                \        \"\""
            : null
        state_count:
            ? "\"\"\n        Return the number of states for the progress bar.\n\n\
                \        Derived classes should implement this to ensure the proper\
                \ behaviour of\n        the progress bar\"\""
            : null
        compute_score:
            ? "\"\"\n        Abstract method for computing the score for the given\
                \ state. Smaller\n        scores are better.\n\n        Args:\n  \
                \          state: the state, e.g. the combination of attributes as\
                \ generated\n                by :obj:`state_count`.\n        \"\""
            : null
        bar_length:
            ? "\"\"Compute the bar length (between 0 and 1) corresponding to the score.\n\
                \        Return `None` if the score cannot be normalized.\n      \
                \  \"\""
            : null
        row_for_state:
            ? "\"\"\n        Abstract method that return the items that are inserted\
                \ into the table.\n\n        Args:\n            score: score, computed\
                \ by :obj:`compute_score`\n            state: the state, e.g. combination\
                \ of attributes\n            \"\""
            : null
        on_done:
            Finished: null
        toggle:
            '""Start or pause the computation.""': null
            Pause: null
            Continue: null
        before_running:
            '""Code that is run before running vizrank in its own thread""': null
        stopped:
            '""Code that is run after stopping the vizrank thread""': null
    run_vizrank:
        Getting combinations...: null
        Getting scores...: null
    VizRankDialogAttr:
        ? "\"\"\n    VizRank dialog for single attributes. The class provides most\
            \ of the\n    needed methods, except for `initialize` which is expected\
            \ to store a\n    list of `Variable` instances to `self.attrs`, and method\n\
            \    `compute_score(state)` for scoring the combinations.\n\n    The state\
            \ is an attribute index.\n\n    When the user selects an attribute, the\
            \ dialog emits signal\n    `selectionChanged` with the attribute as parameter.\n\
            \    \"\""
        : null
        sizeHint:
            ? "\"\"Assuming a single columns in the table, return `QSize(160, 512)`\
                \ as\n        a reasonable default size.\"\""
            : null
        check_preconditions:
            '""Refuse ranking if there are no features or instances.""': null
    VizRankDialogAttrPair:
        ? "\"\"\n    VizRank dialog for pairs of attributes. The class provides most\
            \ of the\n    needed methods, except for `initialize` which is expected\
            \ to store a\n    list of `Variable` instances to `self.attrs`, and method\n\
            \    `compute_score(state)` for scoring the combinations.\n\n    The state\
            \ is a pair of indices into `self.attrs`.\n\n    When the user selects\
            \ a pair, the dialog emits signal `selectionChanged`\n    with a tuple\
            \ of variables as parameter.\n    \"\""
        : null
        __init__:
            xy_changed_manually: null
        sizeHint:
            ? "\"\"Assuming two columns in the table, return `QSize(320, 512)` as\n\
                \        a reasonable default size.\"\""
            : null
        check_preconditions:
            '""Refuse ranking if there are less than two feature or instances.""': null
        row_for_state:
            name: null
            ', ': null
    CanvasText:
        ? "\"\"QGraphicsTextItem with more convenient constructor\n\n       Args:\n\
            \           scene (QGraphicsScene): scene into which the text is placed\n\
            \           text (str): text; see also argument `html_text` (default:\
            \ `\"\"`)\n           x (int): x-coordinate (default: 0)\n           y\
            \ (int): y-coordinate (default: 0)\n           alignment (Qt.Alignment):\
            \ text alignment\n               (default: Qt.AlignLeft | Qt.AlignTop)\n\
            \           bold (bool): if `True`, font is set to bold (default: `False`)\n\
            \           font (QFont): text font\n           z (int): text layer\n\
            \           html_text (str): text as html; if present (default is `None`),\n\
            \               it overrides the `text` argument\n           tooltip (str):\
            \ text tooltip\n           show (bool): if `False`, the text is hidden\
            \ (default: `True`)\n           vertical (bool): if `True`, the text is\
            \ rotated by 90 degrees\n               (default: `False`)\n    \"\""
        : null
        elide:
            '...': null
        setPos:
            '""setPos with adjustment for alignment""': null
    CanvasRectangle:
        ? "\"\"QGraphicsRectItem with more convenient constructor\n\n    Args:\n \
            \       scene (QGraphicsScene): scene into which the rectangle is placed\n\
            \        x (int): x-coordinate (default: 0)\n        y (int): y-coordinate\
            \ (default: 0)\n        width (int): rectangle's width (default: 0)\n\
            \        height (int): rectangle's height (default: 0)\n        z (int):\
            \ z-layer\n        pen (QPen): pen for the border; if present, it overrides\
            \ the separate\n            arguments for color, width and style\n   \
            \     pen_color (QColor or QPen): the (color of) the pen\n           \
            \ (default: `QColor(128, 128, 128)`)\n        pen_width (int): pen width\n\
            \        pen_style (PenStyle): pen style (default: `Qt.SolidLine`)\n \
            \       brush_color (QColor): the color for the interior (default: same\
            \ as pen)\n        tooltip (str): tooltip\n        show (bool): if `False`,\
            \ the text is hidden (default: `True`)\n        onclick (callable): callback\
            \ for mouse click event\n    \"\""
        : null
    ViewWithPress:
        ? "\"\"QGraphicsView with a callback for mouse press event. The callback\n\
            \    is given as keyword argument `handler`.\n    \"\""
        : null
        __init__:
            handler: null
Orange/widgets/visualize/utils/scene.py:
    '""Common QGraphicsScene components that can be composed when needed.""': null
    UpdateItemsOnSelectGraphicsScene:
        ? "\"\"Calls the selection_changed method on items.\n\n    Whenever the scene\
            \ selection changes, this view will call the\n    ˙selection_changed˙\
            \ method on any item on the scene.\n\n    Notes\n    -----\n    .. note::\
            \ I suspect this is completely unnecessary, but have not been able\n \
            \       to find a reasonable way to keep the selection logic inside the\
            \ actual\n        `QGraphicsItem` objects\n\n    \"\""
        : null
        __handle_selection:
            selection_changed: null
Orange/widgets/visualize/utils/view.py:
    ? '""Common useful `QGraphicsView` classes that can be composed to achieve

        desired functionality.""'
    : null
    ZoomableGraphicsView:
        ? "\"\"Zoomable graphics view.\n\n    Composable graphics view that adds zoom\
            \ functionality.\n\n    It also handles automatic resizing of content\
            \ whenever the window is\n    resized.\n\n    Right click will reset the\
            \ zoom to a factor where the entire scene is\n    visible.\n\n    Parameters\n\
            \    ----------\n    scene : QGraphicsScene\n    padding : int or tuple,\
            \ optional\n        Specify the padding around the drawn widgets. Can\
            \ be an int, or tuple,\n        the tuple can contain either 2 or 4 elements.\n\
            \n    Notes\n    -----\n    .. note:: This view will NOT consume the wheel\
            \ event, so it would be wise\n        to use this component in conjuction\
            \ with the `PreventDefaultWheelEvent`\n        in most cases.\n    ..\
            \ note:: This view does however consume the right mouse click event.\n\
            \n    \"\""
        : null
        __handle_zoom:
            ? "\"\"Handle zoom event, direction is positive if zooming in, otherwise\n\
                \        negative.\"\""
            : null
        set_central_widget:
            ? "\"\"Set the central widget in the view.\n\n        This means that\
                \ the initial zoom will fit the central widget, and may\n        cut\
                \ out any other widgets.\n\n        Parameters\n        ----------\n\
                \        widget : QGraphicsWidget\n\n        \"\""
            : null
        central_widget_rect:
            ? "\"\"Get the bounding box of the central widget.\n\n        If a central\
                \ widget and padding are set, this method calculates the\n       \
                \ rect containing both of them. This is useful because if the padding\
                \ was\n        added directly onto the widget, the padding would be\
                \ rescaled as well.\n\n        If the central widget is not set, return\
                \ the scene rect instead.\n\n        Returns\n        -------\n  \
                \      QtCore.QRectF\n\n        \"\""
            : null
        recalculate_and_fit:
            ? "\"\"Recalculate the optimal zoom and fits the content into view.\n\n\
                \        Should be called if the scene contents change, so that the\
                \ optimal zoom\n        can be recalculated.\n\n        Returns\n\
                \        -------\n\n        \"\""
            : null
        reset_zoom:
            '""Reset the zoom to the optimal factor.""': null
    PannableGraphicsView:
        ? "\"\"Pannable graphics view.\n\n    Enables panning the graphics view.\n\
            \n    \"\""
        : null
    PreventDefaultWheelEvent:
        ? "\"\"Prevent the default wheel event.\n\n    The default wheel event pans\
            \ the view around, if using the\n    `ZoomableGraphicsView`, this will\
            \ prevent that behaviour.\n\n    \"\""
        : null
Orange/widgets/visualize/utils/lac.py:
    create_sql_contingency:
        '%s IS NOT NULL': null
        COUNT(%s): null
        float: null
    lac:
        ? "\"\"\n    k expected classes,\n    m data points,\n    each with dim dimensions\n\
            \    \"\""
        : null
        Initializing: null
        Done: null
    get_bin_centers:
        '[]()<>=≥': null
        '-': null
Orange/widgets/visualize/utils/component.py:
    '""Common gui.OWComponent components.""': null
    AnchorParameterSetter:
        Anchor: null
    OWGraphWithAnchors:
        ? "\"\"\n    Graph for projections in which dimensions can be manually moved\n\
            \n    Class is used as a graph base class for OWFreeViz and OWRadviz.\"\
            \""
        : null
Orange/widgets/visualize/utils/plotutils.py:
    TextItem:
        setAnchor: null
    InteractiveViewBox:
        updateScaleBox:
            ? "\"\"\n        Overload to use ViewBox.mapToView instead of mapRectFromParent\n\
                \        mapRectFromParent (from Qt) uses QTransform.invert() which\
                \ has\n        floating-point issues and can't invert the matrix with\
                \ large\n        coefficients. ViewBox.mapToView uses invertQTransform\
                \ from pyqtgraph.\n\n        This code, except for first three lines,\
                \ are copied from the overloaded\n        method.\n        \"\""
            : null
        mouseDragEvent:
            mouseMode: null
    DraggableItemsViewBox:
        ? "\"\"\n    A viewbox with draggable items\n\n    Graph that uses it must\
            \ provide two methods:\n    - `closest_draggable_item(pos)` returns an\
            \ int representing the id of the\n      draggable item that is closest\
            \ (and close enough) to `QPoint` pos, or\n      `None`;\n    - `show_indicator(item_id)`\
            \ shows or updates an indicator for moving\n      the item with the given\
            \ `item_id`.\n\n    Viewbox emits three signals:\n    - `started = Signal(item_id)`\n\
            \    - `moved = Signal(item_id, x, y)`\n    - `finished = Signal(item_id,\
            \ x, y)`\n    \"\""
        : null
    ElidedLabelsAxis:
        ? "\"\"\n    Horizontal axis that elides long text labels\n\n    The class\
            \ assumes that ticks with labels are distributed equally, and that\n \
            \   standard `QWidget.font()` is used for printing them.\n    \"\""
        : null
    PaletteItemSample:
        '""A color strip to insert into legends for discretized continuous values""': null
        __init__:
            ? "\"\"\n        :param palette: palette used for showing continuous values\n\
                \        :type palette: BinnedContinuousPalette\n        :param scale:\
                \ an instance of DiscretizedScale that defines the\n             \
                \         conversion of values into bins\n        :type scale: DiscretizedScale\n\
                \        \"\""
            : null
            '{{:.{}f}}': null
            '{} - {}': null
    SymbolItemSample:
        '""Adjust position for symbols""': null
    StyledAxisItem:
        __clear_labelStyle_color:
            color: null
    AxisItem:
        __init__:
            rotateTicks: null
        setRotateTicks:
            rotateTicks: null
        drawPicture:
            bottom: null
            top: null
            rotateTicks: null
            tickFont: null
            tickTextOffset: null
    PlotWidget:
        ? "\"\"\n    A pyqtgraph.PlotWidget with better QPalette integration.\n\n\
            \    A default constructed plot will respect and adapt to the current\
            \ palette\n    \"\""
        : null
        __init__:
            axisItems: null
            left: null
            bottom: null
    GraphicsView:
        ? "\"\"\n    A pyqtgraph.GraphicsView with better QPalette integration.\n\n\
            \    A default constructed plot will respect and adapt to the current\
            \ palette\n    \"\""
        : null
    PlotItem:
        ? "\"\"\n    A pyqtgraph.PlotItem with better QPalette integration.\n\n  \
            \  A default constructed plot will respect and adapt to the current palette\n\
            \    \"\""
        : null
        __init__:
            axisItems: null
            left: null
            bottom: null
Orange/widgets/visualize/utils/customizableplot.py:
    available_font_families:
        ? "\"\"\n    Function returns list of available font families.\n    Can be\
            \ used to instantiate font combo boxes.\n\n    Returns\n    -------\n\
            \    fonts: list\n        List of available font families.\n    \"\""
        : null
        .: null
    default_font_family:
        ? "\"\"\n    Function returns default font family used in Qt application.\n\
            \    Can be used to instantiate initial dialog state.\n\n    Returns\n\
            \    -------\n    font: str\n        Default font family.\n    \"\""
        : null
    default_font_size:
        ? "\"\"\n    Function returns default font size in points used in Qt application.\n\
            \    Can be used to instantiate initial dialog state.\n\n    Returns\n\
            \    -------\n    size: int\n        Default font size in points.\n  \
            \  \"\""
        : null
    Updater:
        '"" Class with helper functions and constants. ""': null
        Font family: null
        Font size: null
        Italic: null
        Width: null
        Opacity: null
        Style: null
        Antialias: null
        Solid line: null
        Dash line: null
        Dot line: null
        Dash dot line: null
        Dash dot dot line: null
        update_axes_titles_font:
            normal: null
            italic: null
            font-size: null
            '{font.pointSize()}pt': null
            font-family: null
            '{font.family()}': null
            font-style: null
            '{fstyle}': null
        update_axes_ticks_font:
            tickFont: null
        update_legend_font:
            size: null
        update_lines:
            pen: null
        update_inf_lines:
            label: null
    CommonParameterSetter:
        '"" Subclass to add ''setter'' functionality to a plot. ""': null
        Fonts: null
        Annotations: null
        Figure: null
        Font family: null
        Axis title: null
        Axis ticks: null
        Legend: null
        Label: null
        Line label: null
        x-axis title: null
        y-axis title: null
        Title: null
        Lines: null
        __init__:
            bottom: null
            left: null
Orange/widgets/visualize/utils/tree/treeadapter.py:
    '""Base tree adapter class with common methods needed for visualisations.""': null
    BaseTreeAdapter:
        ? "\"\"Base class for tree representation.\n\n    Any subclass should implement\
            \ the methods listed in this base class. Note\n    that some simple methods\
            \ do not need to reimplemented e.g. is_leaf since\n    it that is the\
            \ opposite of has_children.\n\n    \"\""
        : null
        weight:
            ? "\"\"Get the weight of the given node.\n\n        The weights of the\
                \ children always sum up to 1.\n\n        Parameters\n        ----------\n\
                \        node : object\n            The label of the node.\n\n   \
                \     Returns\n        -------\n        float\n            The weight\
                \ of the node relative to its siblings.\n\n        \"\""
            : null
        num_samples:
            ? "\"\"Get the number of samples that a given node contains.\n\n     \
                \   Parameters\n        ----------\n        node : object\n      \
                \      A unique identifier of a node.\n\n        Returns\n       \
                \ -------\n        int\n\n        \"\""
            : null
        parent:
            ? "\"\"Get the parent of a given node or ROOT_PARENT if the node is the\
                \ root.\n\n        Parameters\n        ----------\n        node :\
                \ object\n\n        Returns\n        -------\n        object\n\n \
                \       \"\""
            : null
        has_children:
            ? "\"\"Check if the given node has any children.\n\n        Parameters\n\
                \        ----------\n        node : object\n\n        Returns\n  \
                \      -------\n        bool\n\n        \"\""
            : null
        is_leaf:
            ? "\"\"Check if the given node is a leaf node.\n\n        Parameters\n\
                \        ----------\n        node : object\n\n        Returns\n  \
                \      -------\n        object\n\n        \"\""
            : null
        children:
            ? "\"\"Get all the children of a given node.\n\n        Parameters\n \
                \       ----------\n        node : object\n\n        Returns\n   \
                \     -------\n        Iterable[object]\n            A iterable object\
                \ containing the labels of the child nodes.\n\n        \"\""
            : null
        reverse_children:
            ? "\"\"Reverse children of a given node.\n\n        Parameters\n     \
                \   ----------\n        node : object\n        \"\""
            : null
        shuffle_children:
            ? "\"\"Randomly shuffle node's children in the entire tree.\n        \"\
                \""
            : null
        get_distribution:
            ? "\"\"Get the distribution of types for a given node.\n\n        This\
                \ may be the number of nodes that belong to each different classe\
                \ in\n        a node.\n\n        Parameters\n        ----------\n\
                \        node : object\n\n        Returns\n        -------\n     \
                \   Iterable[int, ...]\n            The return type is an iterable\
                \ with as many fields as there are\n            different classes\
                \ in the given node. The values of the fields are\n            the\
                \ number of nodes that belong to a given class inside the node.\n\n\
                \        \"\""
            : null
        get_impurity:
            ? "\"\"Get the impurity of a given node.\n\n        Parameters\n     \
                \   ----------\n        node : object\n\n        Returns\n       \
                \ -------\n        object\n\n        \"\""
            : null
        rules:
            ? "\"\"Get a list of rules that define the given node.\n\n        Parameters\n\
                \        ----------\n        node : object\n\n        Returns\n  \
                \      -------\n        Iterable[Rule]\n            A list of Rule\
                \ objects, can be of any type.\n\n        \"\""
            : null
        attribute:
            ? "\"\"Get the attribute that splits the given tree.\n\n        Parameters\n\
                \        ----------\n        node\n\n        Returns\n        -------\n\
                \n        \"\""
            : null
        is_root:
            ? "\"\"Check if a given node is the root node.\n\n        Parameters\n\
                \        ----------\n        node\n\n        Returns\n        -------\n\
                \n        \"\""
            : null
        leaves:
            ? "\"\"Get all the leavse that belong to the subtree of a given node.\n\
                \n        Parameters\n        ----------\n        node\n\n       \
                \ Returns\n        -------\n\n        \"\""
            : null
        get_instances_in_nodes:
            ? "\"\"Get all the instances belonging to a set of nodes for a given\n\
                \        dataset.\n\n        Parameters\n        ----------\n    \
                \    dataset : Table\n            A Orange Table dataset.\n      \
                \  nodes : iterable[node]\n            A list of tree nodes for which\
                \ we want the instances.\n\n        Returns\n        -------\n\n \
                \       \"\""
            : null
        max_depth:
            ? "\"\"Get the maximum depth that the tree reaches.\n\n        Returns\n\
                \        -------\n        int\n\n        \"\""
            : null
        num_nodes:
            ? "\"\"Get the total number of nodes that the tree contains.\n\n     \
                \   This does not mean the number of samples inside the entire tree,\
                \ just\n        the number of nodes.\n\n        Returns\n        -------\n\
                \        int\n\n        \"\""
            : null
        root:
            ? "\"\"Get the label of the root node.\n\n        Returns\n        -------\n\
                \        object\n\n        \"\""
            : null
Orange/widgets/visualize/utils/tree/skltreeadapter.py:
    '""Tree adapter class for sklearn trees.""': null
    SklTreeAdapter:
        ? "\"\"Sklear Tree Adapter.\n\n    An abstraction on top of the scikit learn\
            \ classification tree.\n\n    Parameters\n    ----------\n    model :\
            \ SklModel\n        An sklearn tree model instance.\n\n    \"\""
        : null
        rules:
            values: null
            _: null
        _subnode_range:
            ? "\"\"\n        Get the range of indices where there are subnodes of\
                \ the given node.\n\n        See Also\n        --------\n        Orange.widgets.model.owclassificationtreegraph.OWTreeGraph\n\
                \        \"\""
            : null
            find_largest_idx:
                ? "\"\"It is necessary to locate the node with the largest index in\
                    \ the\n            children in order to get a good range. This\
                    \ is necessary with trees\n            that are not right aligned,\
                    \ which can happen when visualising\n            random forest\
                    \ trees.\"\""
                : null
        get_samples_in_leaves:
            ? "\"\"Get an array of instance indices that belong to each leaf.\n\n\
                \        For a given dataset X, separate the instances out into an\
                \ array, so\n        they are grouped together based on what leaf\
                \ they belong to.\n\n        Examples\n        --------\n        Given\
                \ a tree with two leaf nodes ( A <- R -> B ) and the dataset X =\n\
                \        [ 10, 20, 30, 40, 50, 60 ], where 10, 20 and 40 belong to\
                \ leaf A, and\n        the rest to leaf B, the following structure\
                \ will be returned (where\n        array is the numpy array):\n  \
                \      [array([ 0, 1, 3 ]), array([ 2, 4, 5 ])]\n\n        The first\
                \ array represents the indices of the values that belong to the\n\
                \        first leaft, so calling X[ 0, 1, 3 ] = [ 10, 20, 40 ]\n\n\
                \        Parameters\n        ----------\n        data\n          \
                \  A matrix containing the data instances.\n\n        Returns\n  \
                \      -------\n        np.array\n            The indices of instances\
                \ belonging to a given leaf.\n\n        \"\""
            : null
Orange/widgets/visualize/utils/tree/rules.py:
    ? '"""Rules for classification and regression trees.


        Tree visualisations usually need to show the rules of nodes, these classes
        make

        merging these rules simple (otherwise you have repeating rules e.g. `age <
        3`

        and `age < 2` which can be merged into `age < 2`.


        Subclasses of the `Rule` class should provide a nice interface to merge rules

        together through the `merge_with` method. Of course, this should not be forced

        where it doesn''t make sense e.g. merging a discrete rule (e.g.

        :math:`x \in \{red, blue, green\}`) and a continuous rule (e.g.

        :math:`x \leq 5`).


        ""'
    : null
    Rule:
        '""The base Rule class for tree rules.""': null
        merge_with:
            ? "\"\"Merge the current rule with the given rule.\n\n        Parameters\n\
                \        ----------\n        rule : Rule\n\n        Returns\n    \
                \    -------\n        Rule\n\n        \"\""
            : null
    DiscreteRule:
        ? "\"\"Discrete rule class for handling Indicator rules.\n\n    Parameters\n\
            \    ----------\n    attr_name : str\n    equals : bool\n        Should\
            \ indicate whether or not the rule equals the value or not.\n    value\
            \ : object\n\n    Examples\n    --------\n    >>> print(DiscreteRule('age',\
            \ True, 30))\n    age = 30\n\n    >>> print(DiscreteRule('name', False,\
            \ 'John'))\n    name ≠ John\n\n    Notes\n    -----\n    .. note:: Merging\
            \ discrete rules is currently not implemented, the new rule\n        is\
            \ simply returned and a warning is issued.\n\n    \"\""
        : null
        merge_with:
            Merged two discrete rules `%s` and `%s`: null
        description:
            '{} {}': null
            '=': null
            ≠: null
        __str__:
            '{} {} {}': null
            '=': null
            ≠: null
        __repr__:
            DiscreteRule(attr_name='%s', equals=%s, value=%s): null
    ContinuousRule:
        ? "\"\"Continuous rule class for handling numeric rules.\n\n    Parameters\n\
            \    ----------\n    attr_name : str\n    greater : bool\n        Should\
            \ indicate whether the variable must be greater than the value.\n    value\
            \ : int\n    inclusive : bool, optional\n        Should the variable range\
            \ include the value or not\n        (LT <> LTE | GT <> GTE). Default is\
            \ False.\n\n    Examples\n    --------\n    >>> print(ContinuousRule('age',\
            \ False, 30, inclusive=True))\n    age ≤ 30.000\n\n    >>> print(ContinuousRule('age',\
            \ True, 30))\n    age > 30.000\n\n    Notes\n    -----\n    .. note::\
            \ Continuous rules can currently only be merged with other\n        continuous\
            \ rules.\n\n    \"\""
        : null
        merge_with:
            'Continuous rules can currently only be ': null
            merged with other continuous rules: null
        description:
            '%s %.3f': null
            '>': null
            ≤: null
        __str__:
            '%s %s %.3f': null
            '>': null
            ≤: null
        __repr__:
            'ContinuousRule(attr_name=''%s'', greater=%s, value=%s, ': null
            inclusive=%s): null
    IntervalRule:
        ? "\"\"Interval rule class for ranges of continuous values.\n\n    Parameters\n\
            \    ----------\n    attr_name : str\n    left_rule : ContinuousRule\n\
            \        The smaller (left) part of the interval.\n    right_rule : ContinuousRule\n\
            \        The larger (right) part of the interval.\n\n    Examples\n  \
            \  --------\n    >>> print(IntervalRule('Rule',\n    >>>             \
            \       ContinuousRule('Rule', True, 1, inclusive=True),\n    >>>    \
            \                ContinuousRule('Rule', False, 3)))\n    Rule ∈ [1.000,\
            \ 3.000)\n\n    Notes\n    -----\n    .. note:: Currently, only cases\
            \ which appear in classification and\n        regression trees are implemented.\
            \ An interval can not be made up of two\n        parts (e.g. (-∞, -1)\
            \ ∪ (1, ∞)).\n\n    \"\""
        : null
        __init__:
            'The left rule must be an instance of the `ContinuousRule` ': null
            class.: null
            'The right rule must be an instance of the `ContinuousRule` ': null
        description:
            ∈ %s%.3f, %.3f%s: null
            '[': null
            (: null
            ']': null
            ): null
        __str__:
            '%s ∈ %s%.3f, %.3f%s': null
            '[': null
            (: null
            ']': null
            ): null
        __repr__:
            IntervalRule(attr_name='%s', left_rule=%s, right_rule=%s): null
Orange/widgets/evaluate/owpredictions.py:
    PredictorSlot: null
    predictor: null
    name: null
    results: null
    OWPredictions:
        Predictions: null
        icons/Predictions.svg: null
        Display predictions of models for an input dataset.: null
        Inputs:
            Data: null
            Predictors: null
        Outputs:
            Predictions: null
            Evaluation Results: null
        Warning:
            Empty dataset: null
            Some model(s) predict a different target (see more ...)\n{}: null
            'Instances with missing targets ': null
            are ignored while scoring.: null
        Error:
            Some predictor(s) failed (see more ...)\n{}: null
            Some scorer(s) failed (see more ...)\n{}: null
        __init__:
            Show probabilities for: null
            selected_classes: null
            class_values: null
            Restore Original Order: null
            Show rows in the original order: null
        _call_predictors:
            '{predictor.name}: {err}': null
        _update_scores:
            N/A: null
            NA: null
            '{score:.3f}': null
            \n: null
        _set_errors:
            \n: null
            '- {p.predictor.name}: {p.results}': null
            '- {pred.name} predicts ''{pred.domain.class_var.name}''': null
        _get_details:
            Data:<br>: null
            <hr>: null
            'Model: {number} model{s}': null
            ' ({n_predictors - n_valid} failed)': null
            <ul>: null
            <li>{name}</li>: null
            </ul>: null
            Model:<br>No model on input.: null
        _all_color_values:
            ? "\"\"\n        Return list of colors together with their values from\
                \ all predictors\n        classes. Colors and values are sorted according\
                \ to the values order\n        for simpler comparison.\n        \"\
                \""
            : null
        _colors_match:
            ? "\"\"\n        Test whether colors for values match. Colors matches\
                \ when all\n        values match for shorter list and colors match\
                \ for shorter list.\n        It is assumed that values will be sorted\
                \ together with their colors.\n        \"\""
            : null
        _get_colors:
            ? "\"\"\n        Defines colors for values. If colors match in all models\
                \ use the union\n        otherwise use standard colors.\n        \"\
                \""
            : null
        _add_classification_out_columns:
            '{name} ({value})': null
        send_report:
            \n: null
            <br>: null
            '<br>Showing probabilities for: ': null
            ', ': null
            Info: null
            Data & Predictions: null
            Scores: null
    PredictionsItemDelegate:
        ? "\"\"\n    A Item Delegate for custom formatting of predictions/probabilities\n\
            \    \"\""
        : null
        setFormat:
            '{{value:{self.target_format[1:]}}}': null
            ' \N{RIGHTWARDS ARROW} ': null
            ' : ': null
            '{{dist[{i}]:.2f}}': null
            '-': null
            '{value!s}': null
            ', ': null
            p({val}): null
    SharedSelectionStore:
        ? "\"\"\n    An object shared between multiple selection models\n\n    The\
            \ object assumes that the underlying models are AbstractSortTableModel.\n\
            \    Internally, the object stores indices of unmapped, source rows (as\
            \ int).\n\n    The class implements method `select` with the same signature\
            \ as\n    QItemSelectionModel.select. Selection models that share this\
            \ object\n    must call this method. After changing the selection, this\
            \ method will\n    call `emit_selection_rows_changed` of all selection\
            \ models, so they\n    can emit the signal selectionChanged.\n    \"\""
        : null
        rows:
            '""Indices of selected rows in the source model""': null
        register:
            ? "\"\"\n        Add a selection mode to the list of models\n\n      \
                \  Args:\n            selection_model (SharedSelectionModel): a new\
                \ model\n        \"\""
            : null
        unregister:
            ? "\"\"\n        Remove a selection mode to the list of models\n\n   \
                \     Args:\n            selection_model (SharedSelectionModel): a\
                \ model to remove\n        \"\""
            : null
        select:
            ? "\"\"\n        (De)Select given rows\n\n        Args:\n            selection\
                \ (QModelIndex or QItemSelection):\n                rows to select;\
                \ indices are mapped to rows in the view\n            flags (QItemSelectionModel.SelectionFlags):\n\
                \                flags that tell whether to Clear, Select, Deselect\
                \ or Toggle\n        \"\""
            : null
        select_rows:
            ? "\"\"\n        (De)Select given rows\n\n        Args:\n            selection\
                \ (set of int):\n                rows to select; indices refer to\
                \ unmapped rows in model, not view\n            flags (QItemSelectionModel.SelectionFlags):\n\
                \                flags that tell whether to Clear, Select, Deselect\
                \ or Toggle\n        \"\""
            : null
        clear_selection:
            '""Clear selection and emit changeSelection signal to all models""': null
        reset:
            '""Clear selection without emiting a signal,""': null
        _emit_changed:
            ? "\"\"\n        A context manager that calls `emit_selection_rows_changed\
                \ after\n        changing a selection.\n        \"\""
            : null
    SharedSelectionModel:
        ? "\"\"\n    A selection model that shares the selection with its peers.\n\
            \n    It assumes that the underlying model is a AbstractTableModel.\n\
            \    \"\""
        : null
        selection_from_rows:
            ? "\"\"\n        Return selection across all columns for given row indices\
                \ (as ints)\n\n        Args:\n            rows (sequence of int):\
                \ row indices, as shown in the view, not model\n\n        Returns:\
                \ QItemSelection\n        \"\""
            : null
        emit_selection_rows_changed:
            ? "\"\"\n        Given a sequence of indices of selected and deselected\
                \ rows,\n        emit a selectionChanged signal.\n\n        Args:\n\
                \            selected (Sequence[int]): indices of selected rows\n\
                \            deselected (Sequence[int]): indices of deselected rows\n\
                \        \"\""
            : null
    TableView:
        sizeHintForColumn:
            ? "\"\"\n        Reimplemented from `QTableView.sizeHintForColumn`\n\n\
                \        Note: This does not match the QTableView's implementation,\n\
                \        in particular size hints from editor/index widgets are not\
                \ taken\n        into account.\n\n        Parameters\n        ----------\n\
                \        column : int\n        \"\""
            : null
    tool_tip:
        '{!s} {!s}': null
    __main__: null
    iris.tab: null
    To err is human: null
Orange/widgets/evaluate/owrocanalysis.py:
    ROCPoints: null
    fpr: null
    tpr: null
    thresholds: null
    ROCCurve: null
    points: null
    hull: null
    ROCAveragedVert: null
    tpr_std: null
    ROCAveragedThresh: null
    fpr_std: null
    ROCData: null
    merged: null
    folds: null
    avg_vertical: null
    avg_threshold: null
    roc_data_from_results:
        ? "\"\"\n    Compute ROC Curve(s) from evaluation results.\n\n    :param Orange.evaluation.Results\
            \ results:\n        Evaluation results.\n    :param int clf_index:\n \
            \       Learner index in the `results`.\n    :param int target:\n    \
            \    Target class index (i.e. positive class).\n    :rval ROCData:\n \
            \       A instance holding the computed curves.\n    \"\""
        : null
    PlotCurve: null
    curve: null
    curve_item: null
    hull_item: null
    plot_curve:
        +: null
        ? "\"\"\n    Construct a `PlotCurve` for the given `ROCCurve`.\n\n    :param\
            \ ROCCurve curve:\n        Source curve.\n\n    The other parameters are\
            \ passed to pg.PlotDataItem\n\n    :rtype: PlotCurve\n    \"\""
        : null
        extend_to_origin:
            Extend ROCPoints to include coordinate origin if not already present: null
    PlotAvgCurve: null
    confint_item: null
    plot_avg_curve:
        +: null
        ? "\"\"\n    Construct a `PlotAvgCurve` for the given `curve`.\n\n    :param\
            \ curve: Source curve.\n    :type curve: ROCAveragedVert or ROCAveragedThresh\n\
            \n    The other parameters are passed to pg.PlotDataItem\n\n    :rtype:\
            \ PlotAvgCurve\n    \"\""
        : null
    Some: null
    val: null
    once:
        ? "\"\"\n    Return a function that will be called only once, and it's result\
            \ cached.\n    \"\""
        : null
    PlotCurves: null
    merge: null
    InfiniteLine:
        ? "\"\"pyqtgraph.InfiniteLine extended to support antialiasing.\n    \"\""
        : null
    OWROCAnalysis:
        ROC Analysis: null
        'Display the Receiver Operating Characteristics curve ': null
        based on the evaluation of classifiers.: null
        icons/ROCAnalysis.svg: null
        Inputs:
            Evaluation Results: null
        plot: null
        __init__:
            Plot: null
            target_index: null
            Target: null
            Classifiers: null
            selected_classifiers: null
            classifier_names: null
            Curves: null
            roc_averaging: null
            Merge Predictions from Folds: null
            Mean TP Rate: null
            Mean TP and FP at Threshold: null
            Show Individual Curves: null
            display_convex_curve: null
            Show convex ROC curves: null
            display_convex_hull: null
            Show ROC convex hull: null
            Analysis: null
            display_def_threshold: null
            Default threshold (0.5) point: null
            display_perf_line: null
            Show performance line: null
            fp_cost: null
            'FP Cost:': null
            fn_cost: null
            'FN Cost:': null
            target_prior: null
            ' %': null
            Auto: null
            'Prior probability:': null
            bottom: null
            FP Rate (1-Specificity): null
            left: null
            TP Rate (Sensitivity): null
        set_results:
            '""Set the input evaluation results.""': null
        clear:
            '""Clear the widget state.""': null
        _initialize:
            learner_names: null
            '#{}': null
        _set_target_prior:
            ? "\"\"\n        This function sets the initial target class probability\
                \ prior value\n        based on the input data.\n        \"\""
            : null
            'color: gray;': null
        curve_data:
            '""Return `ROCData'' for the given target and classifier.""': null
        plot_curves:
            '""Return a set of functions `plot_curves` generating plot curves.""': null
        _setup_plot:
            merge_averaging:
                '{:.3f}': null
            Some ROC curves are undefined: null
            All ROC curves are undefined: null
        _update_axes_ticks:
            enumticks:
                '{x:.2f}': null
            bottom: null
            left: null
        _on_mouse_moved:
            Thresholds:\n: null
            \n: null
            ({:s}) {:.3f}: null
        _on_target_prior_changed:
            'color: black;': null
        send_report:
            Target class: null
            Costs: null
            FP = {}, FN = {}: null
            Target probability: null
            '{} %': null
    interp:
        ? "\"\"\n    Like numpy.interp except for handling of running sequences of\n\
            \    same values in `xp`.\n    \"\""
        : null
        xp and fp must have the same shape: null
        right: null
    roc_curve_vertical_average:
        No curves: null
    roc_curve_threshold_average:
        No curves: null
        left: null
    RocPoint: null
    threshold: null
    roc_iso_performance_line:
        ? "\"\"\n    Return the indices where a line with `slope` touches the ROC\
            \ convex hull.\n    \"\""
        : null
    distance_to_line:
        ? "\"\"\n    Return the distance to a line ax + by + c = 0\n    \"\""
        : null
    _create_results:
        heart_disease: null
        '1100111001001000': null
    __main__: null
Orange/widgets/evaluate/owconfusionmatrix.py:
    '""Confusion matrix widget""': null
    confusion_matrix:
        ? "\"\"\n    Compute confusion matrix\n\n    Args:\n        res (Orange.evaluation.Results):\
            \ evaluation results\n        index (int): model index\n\n    Returns:\
            \ Confusion matrix\n    \"\""
        : null
    BorderedItemDelegate:
        ? "\"\"Item delegate that paints border at the specified sides\n\n    Data\
            \ for `BorderRole` is a string containing letters t, r, b and/or l,\n\
            \    which defines the sides at which the border is drawn.\n\n    Role\
            \ `BorderColorRole` sets the color for the cell. If not color is given,\n\
            \    `self.color` is used as default.\n\n    Args:\n        color (QColor):\
            \ default color (default default is black)\n    \"\""
        : null
        paint:
            '""Overloads `paint` to draw borders""': null
            t: null
            r: null
            b: null
            l: null
    OWConfusionMatrix:
        '""Confusion matrix widget""': null
        Confusion Matrix: null
        'Display a confusion matrix constructed from ': null
        the results of classifier evaluations.: null
        icons/ConfusionMatrix.svg: null
        Inputs:
            Evaluation Results: null
        Outputs:
            Selected Data: null
        Number of instances: null
        Proportion of predicted: null
        Proportion of actual: null
        'Clicking on cells or in headers outputs the corresponding ': null
        data instances: null
        click_cell: null
        Error:
            Confusion Matrix cannot show regression results.: null
            Evaluation Results input contains invalid values: null
            Empty result on input. Nothing to display.: null
        __init__:
            selected_learner: null
            learners: null
            Learners: null
            append_predictions: null
            Predictions: null
            append_probabilities: null
            Probabilities: null
            autocommit: null
            selected_quantity: null
            'Show: ': null
            Select Correct: null
            Select Misclassified: null
            Clear Selection: null
        sizeHint:
            '""Initial size""': null
        _init_table:
            Predicted: null
            Actual: null
            br: null
            ' ': null
        set_results:
            '""Set the input results.""': null
            N-ARY SUMMATION: null
            learner_names: null
            'Learner #{i + 1}': null
        clear:
            '""Reset the widget, clear controls""': null
        select_correct:
            '""Select the diagonal elements of the matrix""': null
        select_wrong:
            '""Select the off-diagonal elements of the matrix""': null
        select_none:
            '""Reset selection""': null
        cell_clicked:
            '""Handle cell click event""': null
        _prepare_data:
            '{}({})': null
            p({}): null
        commit:
            '""Output data instances corresponding to selected cells""': null
        _update:
            '{}': null
            '{:2.1f} %': null
            NA: null
            trbl: null
            'actual: {}\npredicted: {}': null
            t: null
            l: null
        send_report:
            '""Send report""': null
            Confusion matrix for {} (showing {}): null
        migrate_settings:
            selected_learner: null
    __main__: null
    iris: null
Orange/widgets/evaluate/owcalibrationplot.py:
    metric_definition: null
    name: null
    functions: null
    short_names: null
    explanation: null
    Calibration curve: null
    Classification accuracy: null
    F1: null
    Sensitivity and specificity: null
    sens: null
    spec: null
    '<p><b>Sensitivity</b> (falling) is the proportion of correctly ': null
    detected positive instances (TP&nbsp;/&nbsp;P).</p>: null
    '<p><b>Specificity</b> (rising) is the proportion of detected ': null
    negative instances (TN&nbsp;/&nbsp;N).</p>: null
    Precision and recall: null
    prec: null
    recall: null
    '<p><b>Precision</b> (rising) is the fraction of retrieved instances ': null
    that are relevant, TP&nbsp;/&nbsp;(TP&nbsp;+&nbsp;FP).</p>: null
    '<p><b>Recall</b> (falling) is the proportion of discovered relevant ': null
    instances, TP&nbsp;/&nbsp;P.</p>: null
    Pos and neg predictive value: null
    PPV: null
    TPV: null
    '<p><b>Positive predictive value</b> (rising) is the proportion of ': null
    correct positives, TP&nbsp;/&nbsp;(TP&nbsp;+&nbsp;FP).</p>: null
    '<p><b>Negative predictive value</b> is the proportion of correct ': null
    negatives, TN&nbsp;/&nbsp;(TN&nbsp;+&nbsp;FN).</p>: null
    True and false positive rate: null
    TPR: null
    FPR: null
    '<p><b>True and false positive rate</b> are proportions of detected ': null
    and omitted positive instances</p>: null
    ParameterSetter:
        axis_items:
            item: null
    OWCalibrationPlot:
        Calibration Plot: null
        Calibration plot based on evaluation of classifiers.: null
        icons/CalibrationPlot.svg: null
        Inputs:
            Evaluation Results: null
        Outputs:
            Calibrated Model: null
        Error:
            'Calibration plot requires a categorical ': null
            target variable.: null
            Empty result on input. Nothing to display.: null
            Remove test data instances with unknown classes.: null
            All data instances belong to target class.: null
            No data instances belong to target class.: null
        Warning:
            Test folds where all data belongs to (non)-target are not shown.: null
            Instance for which the model couldn't compute probabilities are: null
            skipped.: null
            No valid data for model(s) {}: null
        Information:
            'Can''t output a model: {}': null
        plot: null
        __init__:
            Settings: null
            target_index: null
            'Target:': null
            display_rug: null
            Show rug: null
            fold_curves: null
            Curves for individual folds: null
            selected_classifiers: null
            classifier_names: null
            Classifier: null
            Metrics: null
            score: null
            output_calibration: null
            Sigmoid calibration: null
            Isotonic calibration: null
            Output model calibration: null
            Info: null
            auto_commit: null
            bottom: null
            left: null
        _set_explanation:
            bottom: null
            Predicted probability: null
            Threshold probability to classify as positive: null
            left: null
        _initialize:
            learner_names: null
            '#{}': null
        _rug:
            pen: null
            pairs: null
        _prob_curve:
            +: null
        _setup_plot:
            ', ': null
            k: null
        get_info_text:
            elided:
                '...': null
            ? "\"\"<table>\n                            <tr>\n                   \
                \             <th align='right'>Threshold: p=</th>\n             \
                \                   <td colspan='4'>{self.threshold:.2f}<br/></td>\n\
                \                            </tr>\"\""
            : null
            ? "\"\"<table>\n                            <tr>\n                   \
                \             <th align='right'>Threshold:</th>\n                \
                \                <td colspan='4'>p = {self.threshold:.2f}<br/>\n \
                \                               </td>\n                          \
                \      <tr/>\n                            </tr>\"\""
            : null
            ? "\"\"<tr>\n                                <th></th>\n             \
                \                   {\"<td></td>\".join(f\"<td align='right'>{n}</td>\"\
                \n                                  for n in short_names)}\n     \
                \                       </tr>\"\""
            : null
            <tr><th align='right'>{elided(name)}:</th>: null
            <td>/</td>: null
            <td>{curve[ind]:.3f}</td>: null
            </tr>: null
            <table>: null
        commit:
            each training data sample produces a different model: null
            'test results do not contain stored models - try testing ': null
            on separate data or on training data: null
            select a single model - the widget can output only one: null
            cannot calibrate non-binary classes: null
            \n - {problem}: null
        send_report:
            Target class: null
            Output model calibration: null
            Sigmoid calibration: null
            Isotonic calibration: null
    __main__: null
Orange/widgets/evaluate/__init__.py:
    ? '""

        Widgets from Evaluate category


        ""'
    : null
    Evaluate: null
    Evaluate classification/regression performance.: null
    '#C3F3F3': null
    icons/Category-Evaluate.svg: null
Orange/widgets/evaluate/utils.py:
    check_results_adequacy:
        invalid_results: null
        Results do not include information on test data.: null
        Categorical target variable is required.: null
        Empty result on input. Nothing to display.: null
        Results contain invalid values.: null
    results_for_preview:
        heart_disease: null
        l2: null
        l1: null
        LR l2: null
        LR l1: null
        SVM: null
        Nu SVM: null
    AUC: null
    CA: null
    F1: null
    Precision: null
    Recall: null
    MSE: null
    RMSE: null
    MAE: null
    R2: null
    learner_name:
        ? "\"\"Return the value of `learner.name` if it exists, or the learner's type\n\
            \    name otherwise\"\""
        : null
        name: null
    usable_scorers:
        abstract: null
    scorer_caller:
        thunked:
            ignore: null
            ((F-score|Precision)) is ill-defined.*: null
            weighted: null
    ScoreTable:
        ItemDelegate:
            displayText:
                '{value:.3f}': null
        __init__:
            Method: null
        update_header:
            Model: null
            Train time [s]: null
            Test time [s]: null
Orange/widgets/evaluate/contexthandlers.py:
    EvaluationResultsContextHandler:
        '""Context handler for evaluation results""': null
Orange/widgets/evaluate/owliftcurve.py:
    CurveData: null
    contacted: null
    respondents: null
    thresholds: null
    PointsAndHull: null
    points: null
    hull: null
    ParameterSetter:
        Wide line: null
        Thin Line: null
        Default Line: null
        Solid line: null
        Dash line: null
        axis_items:
            item: null
    OWLiftCurve:
        Lift Curve: null
        'Construct and display a lift curve ': null
        from the evaluation of classifiers.: null
        icons/LiftCurve.svg: null
        lift: null
        cumulative gain: null
        Inputs:
            Evaluation Results: null
        Warning:
            Some curves are undefined; check models and data: null
        Error:
            No defined curves; check models and data: null
        plot: null
        Lift: null
        TP Rate: null
        __init__:
            Curve: null
            target_index: null
            'Target: ': null
            curve_type: null
            Lift Curve: null
            Cumulative Gains: null
            selected_classifiers: null
            classifier_names: null
            Models: null
            display_convex_hull: null
            Show convex hull: null
            Settings: null
            bottom: null
            P Rate: null
            left: null
        _initialize:
            learner_names: null
            '#{i}': null
        _set_left_label:
            left: null
        send_report:
            Target class: null
    cumulative_gains:
        array dimensions don't match: null
        mergesort: null
    __main__: null
Orange/widgets/evaluate/owtestandscore.py:
    InputLearner:
        Try[Orange.evaluation.Results]: null
        Try[float]: null
    Try:
        '""Try to walk in a Turing tar pit.""': null
        Success:
            '""Data type for instance constructed on success""': null
            __value: null
            __repr__:
                '{}({!r})': null
        Fail:
            '""Data type for instance constructed on fail""': null
            __exception: null
            __repr__:
                '{}({!r})': null
    State:
        ? "\"\"\n    OWTestAndScore's runtime state.\n    \"\""
        : null
        Waiting: null
        Running: null
        Done: null
        Cancelled: null
    OWTestAndScore:
        Test and Score: null
        Cross-validation accuracy estimation.: null
        icons/TestLearners1.svg: null
        Cross Validation: null
        CV: null
        Orange.widgets.evaluate.owtestlearners.OWTestLearners: null
        Inputs:
            Data: null
            Test Data: null
            Learner: null
            Preprocessor: null
        Outputs:
            Predictions: null
            Evaluation Results: null
        Click on the table header to select shown columns: null
        click_header: null
        (None, show average over classes): null
        Error:
            Test dataset is empty.: null
            Test data input requires a target variable.: null
            Number of folds exceeds the data size: null
            'Test and train datasets ': null
            have different target variables.: null
            Not enough memory.: null
            Test data may be incompatible with train data.: null
            '{}': null
        Warning:
            Instances with unknown target values were removed from{}data.: null
            Missing separate test data input.: null
            Some scores could not be computed.: null
            'Test data is present but unused. ': null
            Select 'Test on test data' to use it.: null
            'Can''t run stratified {}-fold cross validation; ': null
            the least common class has only {} instances.: null
        Information:
            Train data has been sampled: null
            Test data has been sampled: null
            Test data has been transformed to match the train data.: null
            Stratification is ignored for regression: null
        __init__:
            resampling: null
            Cross validation: null
            n_folds: null
            'Number of folds: ': null
            cv_stratified: null
            Stratified: null
            Cross validation by feature: null
            fold_feature: null
            Random sampling: null
            n_repeats: null
            'Repeat train/test: ': null
            sample_size: null
            'Training set size: ': null
            '{} %': null
            shuffle_stratified: null
            Leave one out: null
            Test on train data: null
            Test on test data: null
            class_selection: null
            Evaluation results for target: null
            comparison_criterion: null
            'Compare models by:': null
            use_rope: null
            'Negligible diff.: ': null
            rope: null
            '<small>Table shows probabilities that the score for the model in ': null
            'the row is higher than that of the model in the column. ': null
            'Small numbers show the probability that the difference is ': null
            negligible.</small>: null
        set_learner:
            ? "\"\"\n        Set the input `learner` at `index`.\n\n        Parameters\n\
                \        ----------\n        index: int\n        learner: Orange.base.Learner\n\
                \        \"\""
            : null
        set_train_data:
            ? "\"\"\n        Set the input training dataset.\n\n        Parameters\n\
                \        ----------\n        data : Optional[Orange.data.Table]\n\
                \        \"\""
            : null
            Train dataset is empty.: null
            Train data input requires a target variable.: null
            Too many target variables.: null
            Target variable has no values.: null
            Target variable has only one value.: null
            Data has no features to learn from.: null
        set_test_data:
            ? "\"\"\n        Set the input separate testing dataset.\n\n        Parameters\n\
                \        ----------\n        data : Optional[Orange.data.Table]\n\
                \        \"\""
            : null
        _which_missing_data:
            ' ': null
            ' train ': null
            ' test ': null
        set_preprocessor:
            ? "\"\"\n        Set the input preprocessor to apply on the training data.\n\
                \        \"\""
            : null
        handleNewSignals:
            '""Reimplemented from OWWidget.handleNewSignals.""': null
        update_stats_model:
            '{:.3f}': null
            '{} (error)': null
            '{name} failed with error:\n': null
            '{exc.__class__.__name__}: {exc!s}': null
            \n: null
        _scores_by_folds:
            weighted: null
        _fill_table:
            '{p0:.3f}<br/><small>{rope:.3f}</small>': null
            p({row_name} > {col_name}) = {p0:.3f}\n: null
            p({row_name} = {col_name}) = {rope:.3f}: null
            '{p1:.3f}<br/><small>{rope:.3f}</small>': null
            p({col_name} > {row_name}) = {p1:.3f}\n: null
            p({col_name} = {row_name}) = {rope:.3f}: null
            '{p0:.3f}': null
            p({row_name} > {col_name}) = {p0:.3f}: null
            '{p1:.3f}': null
            p({col_name} > {row_name}) = {p1:.3f}: null
        _set_cells_na:
            NA: null
            comparison cannot be computed: null
        commit:
            ? "\"\"\n        Commit the results to output.\n        \"\""
            : null
        send_report:
            '""Report on the testing schema and results""': null
            'Stratified ': null
            Sampling type: null
            '{}{}-fold Cross validation': null
            Leave one out: null
            '{}Shuffle split, {} random samples with {}% data ': null
            No sampling, test on training data: null
            No sampling, test on testing data: null
            Target class: null
            (): null
            Settings: null
            Scores: null
        migrate_settings:
            resampling: null
            context_settings: null
            classes: null
        __update:
            self.resampling %s: null
        __submit:
            ? "\"\"\n        Submit a testing function for evaluation\n\n        MUST\
                \ not be called if an evaluation is already pending/running.\n   \
                \     Cancel the existing task first.\n\n        Parameters\n    \
                \    ----------\n        testfunc : Callable[[Callable[float]], Results])\n\
                \            Must be a callable taking a single `callback` argument\
                \ and\n            returning a Results instance\n        \"\""
            : null
            Running: null
        __task_complete:
            Future[Results]: null
            'testing error (in __task_complete):': null
            \n: null
        cancel:
            ? "\"\"\n        Cancel the current/pending evaluation (if any).\n   \
                \     \"\""
            : null
    UserInterrupt:
        ? "\"\"\n    A BaseException subclass used for cooperative task/thread cancellation\n\
            \    \"\""
        : null
    results_add_by_model:
        is_empty:
            models: null
            row_indices: null
        probabilities: null
    results_one_vs_rest:
        I({}=={}): null
        'False': null
        'True': null
    __main__: null
    iris: null
Orange/widgets/evaluate/tests/base.py:
    EvaluateTest:
        test_many_evaluation_results:
            iris: null
            Evaluation Results: null
Orange/widgets/model/owknn.py:
    OWKNNLearner:
        kNN: null
        Predict according to the nearest training instances.: null
        icons/KNN.svg: null
        Orange.widgets.classify.owknn.OWKNNLearner: null
        Orange.widgets.regression.owknnregression.OWKNNRegression: null
        k nearest: null
        knearest: null
        neighbor: null
        neighbour: null
        uniform: null
        distance: null
        euclidean: null
        manhattan: null
        chebyshev: null
        mahalanobis: null
        add_main_layout:
            Neighbors: null
            n_neighbors: null
            'Number of neighbors:': null
            metric_index: null
            'Metric:': null
            weight_index: null
            'Weight:': null
        get_learner_parameters:
            Number of neighbours: null
            Metric: null
            Weight: null
    __main__: null
    iris: null
Orange/widgets/model/owconstant.py:
    OWConstant:
        Constant: null
        'Predict the most frequent class or mean value ': null
        from the training set.: null
        icons/Constant.svg: null
        Orange.widgets.classify.owmajority.OWMajority: null
        Orange.widgets.regression.owmean.OWMean: null
        majority: null
        mean: null
    __main__: null
    iris: null
Orange/widgets/model/owsvm.py:
    OWSVM:
        SVM: null
        'Support Vector Machines map inputs to higher-dimensional ': null
        feature spaces.: null
        icons/SVM.svg: null
        Orange.widgets.classify.owsvmclassification.OWSVMClassification: null
        Orange.widgets.regression.owsvmregression.OWSVMRegression: null
        support vector machines: null
        Outputs:
            Support Vectors: null
            Support vectors: null
        Warning:
            Input data is sparse, default preprocessing is to scale it.: null
        auto: null
        Linear: null
        x⋅y: null
        Polynomial: null
        (g x⋅y + c)<sup>d</sup>: null
        RBF: null
        exp(-g|x-y|²): null
        Sigmoid: null
        tanh(g x⋅y + c): null
        _add_type_box:
            svm_type: null
            SVM Type: null
            SVM: null
            C: null
            epsilon: null
            'Cost (C):': null
            'Regression loss epsilon (ε):': null
            ν-SVM: null
            nu_C: null
            nu: null
            'Regression cost (C):': null
            'Complexity bound (ν):': null
        _add_kernel_box:
            Kernel: null
            kernel_type: null
            'Kernel: %(kernel_eq)s': null
            gamma: null
            ' g: ': null
            coef0: null
            ' c: ': null
            degree: null
            ' d: ': null
        _add_optimization_box:
            Optimization Parameters: null
            tol: null
            'Numerical tolerance: ': null
            max_iter: null
            'Iteration limit: ': null
            limit_iter: null
        create_learner:
            linear: null
            poly: null
            rbf: null
            sigmoid: null
            kernel: null
            degree: null
            gamma: null
            coef0: null
            probability: null
            tol: null
            max_iter: null
            preprocessors: null
        get_learner_parameters:
            SVM type: null
            SVM, C={}, ε={}: null
            ν-SVM, ν={}, C={}: null
            Numerical tolerance: null
            '{:.6}': null
            Iteration limt: null
            unlimited: null
        _report_kernel_parameters:
            Kernel: null
            Linear: null
            Polynomial, ({g:.4} x⋅y + {c:.4})<sup>{d}</sup>: null
            RBF, exp(-{:.4}|x-y|²): null
            Sigmoid, tanh({g:.4} x⋅y + {c:.4}): null
    __main__: null
    iris: null
Orange/widgets/model/owlogisticregression.py:
    OWLogisticRegression:
        Logistic Regression: null
        'The logistic regression classification algorithm with ': null
        LASSO (L1) or ridge (L2) regularization.: null
        icons/LogisticRegression.svg: null
        Orange.widgets.classify.owlogisticregression.OWLogisticRegression: null
        Outputs:
            Coefficients: null
        Lasso (L1): null
        Ridge (L2): null
        l1: null
        l2: null
        Warning:
            Weighting by class may decrease performance.: null
        add_main_layout:
            penalty_type: null
            'Regularization type: ': null
            'Strength:': null
            Weak: null
            margin-top:6px: null
            C_index: null
            Strong: null
            class_weight: null
            Balance class distribution: null
            Weigh classes inversely proportional to their frequencies.: null
        set_c:
            C={}: null
            C={:.3f}: null
        create_learner:
            balanced: null
        get_learner_parameters:
            Regularization: null
            '{}, C={}, class weights={}': null
    create_coef_table:
        name: null
        intercept: null
        coefficients: null
    __main__: null
    zoo: null
Orange/widgets/model/owloadmodel.py:
    OWLoadModel:
        Load Model: null
        Load a model from an input file.: null
        Orange.widgets.classify.owloadclassifier.OWLoadClassifier: null
        icons/LoadModel.svg: null
        file: null
        open: null
        model: null
        Outputs:
            Model: null
        Error:
            An error occured while reading '{}': null
        ;;: null
        __init__:
            File: null
            '...': null
            Reload: null
        browse_file:
            Open Distance File: null
        open_file:
            rb: null
    OWLoadModelDropHandler:
        canDropFile:
            .pkcls: null
        parametersFromFile:
            recent_paths: null
    __main__: null
Orange/widgets/model/owstack.py:
    OWStackedLearner:
        Stacking: null
        Stack multiple models.: null
        icons/Stacking.svg: null
        Stack: null
        Inputs:
            Learners: null
            Aggregate: null
        get_learner_parameters:
            Base learners: null
            Aggregator: null
            default: null
    __main__: null
    iris: null
Orange/widgets/model/__init__.py:
    '""Learners""': null
    Model: null
    Prediction.: null
    '#FAC1D9': null
    icons/Category-Model.svg: null
Orange/widgets/model/owsavemodel.py:
    OWSaveModel:
        Save Model: null
        Save a trained model to an output file.: null
        icons/SaveModel.svg: null
        Orange.widgets.classify.owsaveclassifier.OWSaveClassifier: null
        Inputs:
            Model: null
        Pickled model (*.pkcls): null
        do_save:
            wb: null
    __main__: null
Orange/widgets/model/owrandomforest.py:
    OWRandomForest:
        Random Forest: null
        Predict using an ensemble of decision trees.: null
        icons/RandomForest.svg: null
        Orange.widgets.classify.owrandomforest.OWRandomForest: null
        Orange.widgets.regression.owrandomforestregression.OWRandomForestRegression: null
        Error:
            Insufficient number of attributes ({}): null
        Warning:
            Weighting by class may decrease performance.: null
        add_main_layout:
            Basic Properties: null
            n_estimators: null
            'Number of trees: ': null
            max_features: null
            'Number of attributes considered at each split: ': null
            use_max_features: null
            use_random_state: null
            Replicable training: null
            class_weight: null
            Balance class distribution: null
            Weigh classes inversely proportional to their frequencies.: null
            Growth Control: null
            max_depth: null
            'Limit depth of individual trees: ': null
            use_max_depth: null
            min_samples_split: null
            'Do not split subsets smaller than: ': null
            use_min_samples_split: null
        create_learner:
            n_estimators: null
            max_features: null
            random_state: null
            max_depth: null
            min_samples_split: null
            class_weight: null
            balanced: null
        get_learner_parameters:
            '""Called by send report to list the parameters of the learner.""': null
            Number of trees: null
            Maximal number of considered features: null
            unlimited: null
            Replicable training: null
            'No': null
            'Yes': null
            Maximal tree depth: null
            Stop splitting nodes with maximum instances: null
            Class weights: null
    __main__: null
    iris: null
Orange/widgets/model/owlinearregression.py:
    OWLinearRegression:
        Linear Regression: null
        'A linear regression algorithm with optional L1 (LASSO), ': null
        L2 (ridge) or L1L2 (elastic net) regularization.: null
        icons/LinearRegression.svg: null
        Orange.widgets.regression.owlinearregression.OWLinearRegression: null
        ridge: null
        lasso: null
        elastic net: null
        Outputs:
            Coefficients: null
        No regularization: null
        Ridge regression (L2): null
        Lasso regression (L1): null
        Elastic net regression: null
        add_main_layout:
            Parameters: null
            fit_intercept: null
            Fit intercept (unchecking it fixes it to zero): null
            Regularization: null
            reg_type: null
            'Regularization strength:': null
            alpha_index: null
            'Elastic net mixing:': null
            L1: null
            l2_ratio: null
            L2: null
        _set_alpha_label:
            'Alpha: {}': null
        _set_l2_ratio_label:
            '{:.{}f} : {:.{}f}': null
        update_model:
            coef: null
            name: null
            intercept: null
            coefficients: null
        get_learner_parameters:
            No Regularization: null
            Ridge Regression (L2) with α={}: null
            Lasso Regression (L1) with α={}: null
            Elastic Net Regression with α={}: null
            ' and L1:L2 ratio of {}:{}': null
            Regularization: null
            Fit intercept: null
            'No': null
            'Yes': null
    __main__: null
    housing: null
Orange/widgets/model/owtree.py:
    '""Tree learner widget""': null
    OWTreeLearner:
        '""Tree algorithm with forward pruning.""': null
        Tree: Drevo
        A tree algorithm with forward pruning.: Gradnja drevesa z rezanjem.
        icons/Tree.svg: false
        Orange.widgets.classify.owclassificationtree.OWClassificationTree: false
        Orange.widgets.regression.owregressiontree.OWRegressionTree: false
        Orange.widgets.classify.owclassificationtree.OWTreeLearner: false
        Orange.widgets.regression.owregressiontree.OWTreeLearner: false
        Classification Tree: Klasifikacijsko drevo
        'Min. number of instances in leaves: ': 'Min. število primerov v listu: '
        limit_min_leaf: false
        min_leaf: false
        'Do not split subsets smaller than: ': 'Ne deli podmnožic manjših od: '
        limit_min_internal: false
        min_internal: false
        'Limit the maximal tree depth to: ': 'Omeji globino drevesa na: '
        limit_depth: false
        max_depth: false
        'Stop when majority reaches [%]: ': 'Ustavi delitev, ko delež večinskega razreda
            doseže [%]: '
        limit_majority: false
        sufficient_majority: false
        add_main_layout:
            Parameters: Parametri
            binary_trees: false
            Induce binary tree: Sestavi binarno drevo
        get_learner_parameters:
            Pruning: Rezanje
            ', ': true
            at least {number} instance{s} in leaves: null
            at least {number} instance{s} in internal nodes: null
            maximum depth {}: dovoljena globina {}
            None: Brez
            Splitting: Delitev
            'Stop splitting when majority reaches %d%% ': Ustavi, ko delež večinskega
                razreda doseže %d%%
            (classification only): (samo za klasifikacijo)
            Binary trees: Dvojiško drevo
            'No': Ne
            'Yes': Da
    __main__: false
    iris: false
Orange/widgets/model/owrules.py:
    CustomRuleClassifier:
        ? "\"\"\n    Custom rule induction classifier. Instances are classifier following\n\
            \    either an unordered set of rules or a decision list.\n    \"\""
        : null
        __init__:
            Rule ordering: null
            Covering algorithm: null
        predict:
            ordered: null
            exclusive: null
            unordered: null
            weighted: null
    CustomRuleLearner:
        ? "\"\"\n    Custom CN2 inducer that construct either a list of ordered rules\
            \ or\n    a set of unordered rules. Returns a CustomRuleClassifier if\
            \ called\n    with data.\n\n    See Also\n    --------\n    For more information\
            \ about function calls and the algorithm, refer\n    to the base rule\
            \ induction learner.\n    \"\""
        : null
        Custom rule inducer: null
        __init__:
            Rule ordering: null
            Covering algorithm: null
            exclusive: null
            weighted: null
            Gamma: null
            Beam width: null
            Evaluation measure: null
            entropy: null
            laplace: null
            wracc: null
            Minimum rule coverage: null
            Maximum rule length: null
            Default alpha: null
            Parent alpha: null
        set_progress_advance_callback:
            ? "\"\"\n        Assign callback to update the corresponding widget's\
                \ progress\n        bar after each generated rule. Callback is used\
                \ to ensure that\n        the progress bar is always accessed correctly\
                \ (additional\n        widgets may however use the generated learner).\n\
                \        \"\""
            : null
        clear_progress_advance_callback:
            ? "\"\"\n        Make sure to clear the callback function immediately\
                \ after the\n        classifier is trained.\n        \"\""
            : null
        find_rules_and_measure_progress:
            ? "\"\"\n        The top-level control procedure of the separate-and-conquer\n\
                \        algorithm. For given data and target class (may be None),\
                \ return\n        a list of rules which all must strictly adhere to\
                \ the\n        requirements of rule finder's validators.\n\n     \
                \   To induce decision lists (ordered rules), set target class to\n\
                \        None. To induce rule sets (unordered rules), learn rules\
                \ for\n        each class individually, in regard to the original\
                \ learning\n        data.\n\n        Parameters\n        ----------\n\
                \        X, Y, W : ndarray\n            Learning data.\n        target_class\
                \ : int\n            Index of the class to model.\n        base_rules\
                \ : list of Rule\n            An optional list of initial rules to\
                \ constrain the search.\n        domain : Orange.data.domain.Domain\n\
                \            Data domain, used to calculate class distributions.\n\
                \        progress_amount: int, percentage\n            Part of the\
                \ learning algorithm covered by this function\n            call.\n\
                \n        Returns\n        -------\n        rule_list : list of Rule\n\
                \            Induced rules.\n        \"\""
            : null
        fit_storage:
            ordered: null
            weighted: null
            unordered: null
    OWRuleLearner:
        CN2 Rule Induction: null
        Induce rules from data using CN2 algorithm.: null
        icons/CN2RuleInduction.svg: null
        Orange.widgets.classify.owrules.OWRuleLearner: null
        ordered: null
        unordered: null
        exclusive: null
        weighted: null
        entropy: null
        laplace: null
        wracc: null
        CN2 rule inducer: null
        add_main_layout:
            Rule ordering: null
            rule_ordering: null
            Ordered: null
            Unordered: null
            Covering algorithm: null
            covering_algorithm: null
            Exclusive: null
            Weighted: null
            gamma: null
            'γ:': null
            weighted: null
            Rule search: null
            evaluation_measure: null
            'Evaluation measure:': null
            Entropy: null
            Laplace accuracy: null
            WRAcc: null
            beam_width: null
            'Beam width:': null
            Rule filtering: null
            min_covered_examples: null
            'Minimum rule coverage:': null
            max_rule_length: null
            'Maximum rule length:': null
            default_alpha: null
            'Statistical significance (default α):': null
            checked_default_alpha: null
            parent_alpha: null
            'Relative significance (parent α):': null
            checked_parent_alpha: null
        settings_changed:
            weighted: null
        update_model:
            ? "\"\"\n        Reimplemented from OWBaseLearner.\n        \"\""
            : null
        create_learner:
            ? "\"\"\n        Reimplemented from OWBaseLearner.\n        \"\""
            : null
        get_learner_parameters:
            Rule ordering: null
            Covering algorithm: null
            Gamma: null
            Evaluation measure: null
            Beam width: null
            Minimum rule coverage: null
            Maximum rule length: null
            Default alpha: null
            Parent alpha: null
    __main__: null
    iris: null
Orange/widgets/model/owcalibratedlearner.py:
    OWCalibratedLearner:
        Calibrated Learner: null
        'Wraps another learner with probability calibration and ': null
        decision threshold optimization: null
        icons/CalibratedLearner.svg: null
        calibration: null
        threshold: null
        Sigmoid calibration: null
        Isotonic calibration: null
        No calibration: null
        Sigmoid: null
        Isotonic: null
        Optimize classification accuracy: null
        Optimize F1 score: null
        No threshold optimization: null
        CA: null
        F1: null
        Inputs:
            Base Learner: null
        add_main_layout:
            calibration: null
            Probability calibration: null
            threshold: null
            Decision threshold optimization: null
        _set_default_name:
            ' + ': null
        get_learner_parameters:
            Calibrate probabilities: null
            Threshold optimization: null
    __main__: null
    heart_disease: null
Orange/widgets/model/owneuralnetwork.py:
    Task:
        ? "\"\"\n    A class that will hold the state for an learner evaluation.\n\
            \    \"\""
        : null
        setFuture:
            future is already set: null
        cancel:
            ? "\"\"\n        Cancel the task.\n\n        Set the `cancelled` field\
                \ to True and block until the future is done.\n        \"\""
            : null
    OWNNLearner:
        Neural Network: null
        'A multi-layer perceptron (MLP) algorithm with ': null
        backpropagation.: null
        icons/NN.svg: null
        mlp: null
        identity: null
        logistic: null
        tanh: null
        relu: null
        Identity: null
        Logistic: null
        ReLu: null
        lbfgs: null
        sgd: null
        adam: null
        L-BFGS-B: null
        SGD: null
        Adam: null
        100,: null
        add_main_layout:
            'Neurons in hidden layers:': null
            hidden_layers_input: null
            'A list of integers defining neurons. Length of list ': null
            defines the number of layers. E.g. 4, 2, 2, 3.: null
            e.g. 10,: null
            'Activation:': null
            activation_index: null
            'Solver:': null
            solver_index: null
            alpha_index: null
            'Maximal number of iterations:': null
            max_iterations: null
            'Max iterations:': null
            replicable: null
            Replicable training: null
        set_alpha:
            'Regularization, α={}:': null
        setup_layout:
            Cancel: null
        get_learner_parameters:
            Hidden layers: null
            ', ': null
            Activation: null
            Solver: null
            Alpha: null
            Max iterations: null
            Replicable training: null
        get_hidden_layers:
            '''\d+': null
            10,: null
        __update:
            max_iter: null
        _task_finished:
            ? "\"\"\n        Parameters\n        ----------\n        f : Future\n\
                \            The future instance holding the built model\n       \
                \ \"\""
            : null
        cancel:
            ? "\"\"\n        Cancel the current task (if any).\n        \"\""
            : null
        migrate_settings:
            alpha: null
            alpha_index: null
    __main__: null
    iris: null
Orange/widgets/model/owcurvefit.py:
    isclose: null
    inf: null
    nan: null
    arccos: null
    arccosh: null
    arcsin: null
    arcsinh: null
    arctan: null
    arctan2: null
    arctanh: null
    ceil: null
    copysign: null
    cos: null
    cosh: null
    degrees: null
    e: null
    exp: null
    expm1: null
    fabs: null
    floor: null
    fmod: null
    gcd: null
    hypot: null
    isfinite: null
    isinf: null
    isnan: null
    ldexp: null
    log: null
    log10: null
    log1p: null
    log2: null
    pi: null
    power: null
    radians: null
    remainder: null
    sin: null
    sinh: null
    sqrt: null
    tan: null
    tanh: null
    trunc: null
    round: null
    abs: null
    any: null
    all: null
    Parameter:
        __repr__:
            'Parameter(name={self.name}, initial={self.initial}, ': null
            'use_lower={self.use_lower}, lower={self.lower}, ': null
            use_upper={self.use_upper}, upper={self.upper}): null
    ParametersWidget:
        _setup_gui:
            Name: null
            Initial value: null
            Lower bound: null
            Upper bound: null
            +: null
        _add_row:
            p{row_id + 1}: null
            ×: null
            minimum: null
            maximum: null
    OWCurveFit:
        Curve Fit: null
        Fit a function to data.: null
        icons/CurveFit.svg: null
        function: null
        Outputs:
            Coefficients: null
        Warning:
            Duplicated parameter name.: null
            'Unused parameter ''{}'' in ': null
            '''Parameters'' declaration.': null
            Provide data on the input.: null
        Error:
            Invalid expression.: null
            Missing a fitting parameter.\n: null
            Use 'Feature Constructor' widget instead.: null
            Unknown parameter '{}'.\n: null
            Declare the parameter in 'Parameters' box: null
            'Some parameters and features have the same ': null
            name '{}'.: null
        Select Feature: null
        Select Parameter: null
        Select Function: null
        add_main_layout:
            Parameters: null
            Expression: null
            expression: null
            Expression...: null
            _feature: null
            _parameter: null
            _function: null
        __on_function_added:
            arctan2: null
            copysign: null
            fmod: null
            gcd: null
            hypot: null
            isclose: null
            ldexp: null
            power: null
            remainder: null
            (,): null
            (): null
        get_learner_parameters:
            Expression: null
        check_data:
            Data has no continuous features.: null
        __validate_expression:
            eval: null
    __main__: null
    housing: null
Orange/widgets/model/owsgd.py:
    OWSGD:
        Stochastic Gradient Descent: null
        'Minimize an objective function using a stochastic ': null
        approximation of gradient descent.: null
        icons/SGD.svg: null
        Orange.widgets.regression.owsgdregression.OWSGDRegression: null
        sgd: null
        Outputs:
            Coefficients: null
        Squared Loss: null
        squared_error: null
        Huber: null
        huber: null
        ε insensitive: null
        epsilon_insensitive: null
        Squared ε insensitive: null
        squared_epsilon_insensitive: null
        Hinge: null
        hinge: null
        Logistic regression: null
        log: null
        Modified Huber: null
        modified_huber: null
        Squared Hinge: null
        squared_hinge: null
        Perceptron: null
        perceptron: null
        None: null
        none: null
        Lasso (L1): null
        l1: null
        Ridge (L2): null
        l2: null
        Elastic Net: null
        elasticnet: null
        Constant: null
        constant: null
        Optimal: null
        optimal: null
        Inverse scaling: null
        invscaling: null
        SGD: null
        _add_algorithm_to_layout:
            Loss functions: null
            cls_loss_function_index: null
            cls_epsilon: null
            'ε: ': null
            'Classification: ': null
            reg_loss_function_index: null
            reg_epsilon: null
            'Regression: ': null
        _add_regularization_to_layout:
            Regularization: null
            penalty_index: null
            l1_ratio: null
            'Mixing: ': null
            alpha: null
            'Strength (α): ': null
        _add_learning_params_to_layout:
            Optimization: null
            learning_rate_index: null
            'Learning rate: ': null
            eta0: null
            'Initial learning rate (η<sub>0</sub>): ': null
            power_t: null
            'Inverse scaling exponent (t): ': null
            max_iter: null
            'Number of iterations: ': null
            tol: null
            'Tolerance (stopping criterion): ': null
            tol_enabled: null
            shuffle: null
            Shuffle data after each iteration: null
            random_state: null
            'Fixed seed for random shuffling: ': null
            use_random_state: null
        _on_cls_loss_change:
            huber: null
            epsilon_insensitive: null
            squared_epsilon_insensitive: null
        _on_reg_loss_change:
            huber: null
            epsilon_insensitive: null
            squared_epsilon_insensitive: null
        _on_regularization_change:
            l1: null
            l2: null
            elasticnet: null
        _on_learning_rate_change:
            constant: null
            invscaling: null
        create_learner:
            random_state: null
        get_learner_parameters:
            Classification loss function: null
            huber: null
            epsilon_insensitive: null
            squared_epsilon_insensitive: null
            Epsilon (ε) for classification: null
            Regression loss function: null
            Epsilon (ε) for regression: null
            Regularization: null
            l1: null
            l2: null
            elasticnet: null
            Regularization strength (α): null
            Elastic Net mixing parameter (L1 ratio): null
            Learning rate: null
            constant: null
            invscaling: null
            Initial learning rate (η<sub>0</sub>): null
            Inverse scaling exponent (t): null
            Shuffle data after each iteration: null
            Random seed for shuffling: null
        update_model:
            coef: null
            name: null
            intercept: null
            coefficients: null
        migrate_settings:
            max_iter: null
            n_iter: null
            tol_enabled: null
    __main__: null
    iris: null
Orange/widgets/model/ownaivebayes.py:
    ? '""Naive Bayes Learner

        ""'
    : null
    OWNaiveBayes:
        Naive Bayes: null
        'A fast and simple probabilistic classifier based on ': null
        Bayes' theorem with the assumption of feature independence.: null
        icons/NaiveBayes.svg: null
        Orange.widgets.classify.ownaivebayes.OWNaiveBayes: null
    __main__: null
    iris: null
Orange/widgets/model/owgradientboosting.py:
    LearnerItemModel:
        Extreme Gradient Boosting (xgboost): null
        xgboost: null
        Extreme Gradient Boosting Random Forest (xgboost): null
        Gradient Boosting (catboost): null
        catboost: null
        _add_data:
            '{name}': null
            '{lib} is not installed': null
    BaseEditor:
        _add_main_layout:
            callback: null
            alignment: null
            controlWidth: null
            Basic Properties: null
            n_estimators: null
            'Number of trees:': null
            learning_rate: null
            'Learning rate: ': null
            random_state: null
            Replicable training: null
            Growth Control: null
            max_depth: null
            'Limit depth of individual trees: ': null
            Subsampling: null
        get_arguments:
            n_estimators: null
            learning_rate: null
            random_state: null
            max_depth: null
        get_learner_parameters:
            Method: null
            Number of trees: null
            Learning rate: null
            Replicable training: null
            'Yes': null
            'No': null
            Maximum tree depth: null
    RegEditor:
        _add_main_layout:
            'Regularization:': null
            lambda_index: null
        _set_lambda_label:
            'Lambda: {}': null
        get_arguments:
            reg_lambda: null
        get_learner_parameters:
            Regularization strength: null
    GBLearnerEditor:
        _add_main_layout:
            subsample: null
            'Fraction of training instances: ': null
            min_samples_split: null
            'Do not split subsets smaller than: ': null
        get_arguments:
            subsample: null
            min_samples_split: null
        get_learner_parameters:
            Fraction of training instances: null
            Stop splitting nodes with maximum instances: null
    CatGBLearnerEditor:
        _add_main_layout:
            colsample_bylevel: null
            'Fraction of features for each tree: ': null
        get_arguments:
            colsample_bylevel: null
        get_learner_parameters:
            Fraction of features for each tree: null
    XGBBaseEditor:
        _add_main_layout:
            callback: null
            alignment: null
            controlWidth: null
            subsample: null
            'Fraction of training instances: ': null
            colsample_bytree: null
            'Fraction of features for each tree: ': null
            colsample_bylevel: null
            'Fraction of features for each level: ': null
            colsample_bynode: null
            'Fraction of features for each split: ': null
        get_arguments:
            subsample: null
            colsample_bytree: null
            colsample_bylevel: null
            colsample_bynode: null
        get_learner_parameters:
            Fraction of training instances: null
            Fraction of features for each tree: null
            Fraction of features for each level: null
            Fraction of features for each split: null
    OWGradientBoosting:
        Gradient Boosting: null
        Predict using gradient boosting on decision trees.: null
        icons/GradientBoosting.svg: null
        catboost: null
        gradient: null
        boost: null
        tree: null
        forest: null
        xgb: null
        gb: null
        extreme: null
        add_main_layout:
            Method: null
            method_index: null
    __main__: null
    iris: null
Orange/widgets/model/owadaboost.py:
    OWAdaBoost:
        AdaBoost: null
        'An ensemble meta-algorithm that combines weak learners ': null
        'and adapts to the ''hardness'' of each training sample. ': null
        icons/AdaBoost.svg: null
        Orange.widgets.classify.owadaboost.OWAdaBoostClassification: null
        Orange.widgets.regression.owadaboostregression.OWAdaBoostRegression: null
        boost: null
        Inputs:
            Learner: null
        SAMME: null
        SAMME.R: null
        Linear: null
        Square: null
        Exponential: null
        Error:
            The base learner does not support weights.: null
        add_main_layout:
            Parameters: null
            'Base estimator: ': null
            n_estimators: null
            'Number of estimators:': null
            learning_rate: null
            'Learning rate:': null
            random_seed: null
            'Fixed seed for random generator:': null
            use_random_seed: null
            Boosting method: null
            algorithm_index: null
            'Classification algorithm:': null
            loss_index: null
            'Regression loss function:': null
        set_base_learner:
            'Base estimator: INVALID': null
            'Base estimator: %s': null
        get_learner_parameters:
            Base estimator: null
            Number of estimators: null
            Algorithm (classification): null
            Loss (regression): null
    __main__: null
    iris: null
Orange/widgets/report/owreport.py:
    OWReport: null
    HAVE_REPORT: null
    __main__: null
    iris: null
Orange/widgets/report/report.py:
    DataReport:
        ? "\"\"\n    A report subclass that adds data related methods to the Report.\n\
            \    \"\""
        : null
        report_data:
            ? "\"\"\n        Add description of data table to the report.\n\n    \
                \    See :obj:`describe_data` for details.\n\n        The first argument,\
                \ `name` can be omitted.\n\n        :param name: report section name\
                \ (can be omitted)\n        :type name: str or tuple or OrderedDict\n\
                \        :param data: data whose description is added to the report\n\
                \        :type data: Orange.data.Table\n        \"\""
            : null
        report_domain:
            ? "\"\"\n        Add description of domain to the report.\n\n        See\
                \ :obj:`describe_domain` for details.\n\n        The first argument,\
                \ `name` can be omitted.\n\n        :param name: report section name\
                \ (can be omitted)\n        :type name: str or tuple or OrderedDict\n\
                \        :param domain: domain whose description is added to the report\n\
                \        :type domain: Orange.data.Domain\n        \"\""
            : null
        report_data_brief:
            ? "\"\"\n        Add description of data table to the report.\n\n    \
                \    See :obj:`describe_data_brief` for details.\n\n        The first\
                \ argument, `name` can be omitted.\n\n        :param name: report\
                \ section name (can be omitted)\n        :type name: str or tuple\
                \ or OrderedDict\n        :param data: data whose description is added\
                \ to the report\n        :type data: Orange.data.Table\n        \"\
                \""
            : null
    describe_data:
        ? "\"\"\n    Return an :obj:`OrderedDict` describing the data\n\n    Description\
            \ contains keys \"Data instances\" (with the number of instances)\n  \
            \  and \"Features\", \"Meta attributes\" and \"Targets\" with the corresponding\n\
            \    clipped lists of names. If the domain contains no meta attributes\
            \ or\n    targets, the value is `False`, which prevents it from being\
            \ rendered.\n\n    :param data: data\n    :type data: Orange.data.Table\n\
            \    :rtype: OrderedDict\n    \"\""
        : null
        Data instances: null
    describe_data_brief:
        ? "\"\"\n    Return an :obj:`OrderedDict` with a brief description of data.\n\
            \n    Description contains keys \"Data instances\" with the number of\
            \ instances,\n    \"Features\" and \"Meta attributes\" with the corresponding\
            \ numbers, and\n    \"Targets\", which contains a name, if there is a\
            \ single target, or the\n    number of targets if there are multiple.\n\
            \n    :param data: data\n    :type data: Orange.data.Table\n    :rtype:\
            \ OrderedDict\n    \"\""
        : null
        Data instances: null
    describe_domain:
        ? "\"\"\n    Return an :obj:`OrderedDict` describing a domain\n\n    Description\
            \ contains keys \"Features\", \"Meta attributes\" and \"Targets\"\n  \
            \  with the corresponding clipped lists of names. If the domain contains\
            \ no\n    meta attributes or targets, the value is `False`, which prevents\
            \ it from\n    being rendered by :obj:`~Orange.widgets.report.render_items`.\n\
            \n    :param domain: domain\n    :type domain: Orange.data.Domain\n  \
            \  :rtype: OrderedDict\n    \"\""
        : null
        clip_attrs:
            ' (total: {{}} {})': null
        Features: null
        features: null
        Meta attributes: null
        meta attributes: null
        Target: null
        targets variables: null
    describe_domain_brief:
        ? "\"\"\n    Return an :obj:`OrderedDict` with the number of features, metas\
            \ and classes\n\n    Description contains \"Features\" and \"Meta attributes\"\
            \ with the number of\n    featuers, and \"Targets\" that contains either\
            \ a name, if there is a single\n    target, or the number of targets if\
            \ there are multiple.\n\n    :param domain: data\n    :type domain: Orange.data.Domain\n\
            \    :rtype: OrderedDict\n    \"\""
        : null
        Features: null
        None: null
        Meta attributes: null
        Target: null
        Class '{}': null
        Numeric variable '{}': null
        Targets: null
Orange/widgets/report/tests/__init__.py:
    suite: null
    __main__: null
Orange/widgets/data/owpurgedomain.py:
    OWPurgeDomain:
        Purge Domain: null
        'Remove redundant values and features from the dataset. ': null
        Sort values.: null
        icons/PurgeDomain.svg: null
        Transform: null
        remove: null
        delete: null
        unused: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        sortValues: null
        Sort categorical feature values: null
        removeValues: null
        Remove unused feature values: null
        removeAttributes: null
        Remove constant features: null
        sortClasses: null
        Sort categorical class values: null
        removeClasses: null
        Remove unused class variable values: null
        removeClassAttribute: null
        Remove constant class variables: null
        removeMetaAttributeValues: null
        Remove unused meta attribute values: null
        removeMetaAttributes: null
        Remove constant meta attributes: null
        Sorted features: null
        resortedAttrs: null
        Reduced features: null
        reducedAttrs: null
        Removed features: null
        removedAttrs: null
        Sorted classes: null
        resortedClasses: null
        Reduced classes: null
        reducedClasses: null
        Removed classes: null
        removedClasses: null
        Reduced metas: null
        reducedMetas: null
        Removed metas: null
        removedMetas: null
        __init__:
            '-': null
            Features: null
            'Sorted: %(resortedAttrs)s, ': null
            'reduced: %(reducedAttrs)s, removed: %(removedAttrs)s': null
            Classes: null
            'Sorted: %(resortedClasses)s,': null
            'reduced: %(reducedClasses)s, removed: %(removedClasses)s': null
            Meta attributes: null
            'Reduced: %(reducedMetas)s, removed: %(removedMetas)s': null
            autoSend: null
        setData:
            '-': null
        commit:
            removed: null
            reduced: null
            sorted: null
        send_report:
            list_opts:
                '; ': null
                no changes: null
            Settings: null
            Features: null
            Classes: null
            Metas: null
            Statistics: null
    __main__: null
    https://datasets.biolab.si/core/car.tab: null
    buying: null
    v-high: null
Orange/widgets/data/owconcatenate.py:
    ? '""

        Concatenate

        ===========


        Concatenate (append) two or more datasets.


        ""'
    : null
    OWConcatenate:
        Concatenate: null
        Concatenate (append) two or more datasets.: null
        Transform: null
        icons/Concatenate.svg: null
        append: null
        join: null
        extend: null
        Inputs:
            Primary Data: null
            Additional Data: null
        Outputs:
            Data: null
        Error:
            Inputs must be of the same type.: null
        Warning:
            Variables with duplicated names have been renamed.: null
        Source ID: null
        all variables that appear in input tables: null
        only variables that appear in all tables: null
        Class attribute: null
        Attribute: null
        Meta attribute: null
        __init__:
            Variable Merging: null
            merge_type: null
            'When there is no primary table, ': null
            'the output should contain:': null
            'The resulting table will have a class only if there ': null
            is no conflict between input classes.: null
            ignore_compute_value: null
            Treat variables with the same name as the same variable,\n: null
            even if they are computed using different formulae.: null
            Source Identification: null
            append_source_column: null
            Append data source IDs: null
            'Feature name:': null
            source_attr_name: null
            'Place:': null
            source_column_role: null
            auto_commit: null
        commit:
            name: null
            '{} ({})': null
            class_vars: null
            attributes: null
            metas: null
        send_report:
            Domain: null
            from primary data: null
            Source data ID: null
            '{} (as {})': null
        merge_domains:
            attributes: null
            class_vars: null
            metas: null
        _unique_vars:
            AttrDesc: null
            template: null
            original: null
            values: null
            number_of_decimals: null
    __main__: null
    iris: null
    zoo: null
Orange/widgets/data/owpaintdata.py:
    indices_to_mask:
        ? "\"\"\n    Convert an array of integer indices into a boolean mask index.\n\
            \    The elements in indices must be unique.\n\n    :param ndarray[int]\
            \ indices: Integer indices.\n    :param int size: Size of the resulting\
            \ mask.\n\n    \"\""
        : null
    split_on_condition:
        ? "\"\"\n    Split an array in two parts based on a boolean mask array `condition`.\n\
            \    \"\""
        : null
    stack_on_condition:
        ? "\"\"\n    Inverse of `split_on_condition`.\n    \"\""
        : null
    Append: null
    points: null
    Insert: null
    indices: null
    Move: null
    delta: null
    DeleteIndices: null
    Composite: null
    f: null
    g: null
    AirBrush: null
    pos: null
    radius: null
    intensity: null
    rstate: null
    Jitter: null
    Magnet: null
    density: null
    SelectRegion: null
    region: null
    DeleteSelection: null
    MoveSelection: null
    transform:
        ? "\"\"\n    Generic transform for base commands\n\n    :param command: An\
            \ instance of base command\n    :param ndarray data: Input data array\n\
            \    :rval:\n        A (transformed_data, command) tuple of the transformed\
            \ input data\n        and a base command expressing the inverse operation.\n\
            \    \"\""
        : null
    PaintViewBox:
        __init__:
            mousePressEvent: null
            mouseMoveEvent: null
            mouseReleaseEvent: null
            mouseClickEvent: null
            mouseDragEvent: null
            mouseEnterEvent: null
            mouseLeaveEvent: null
    DataTool:
        ? "\"\"\n    A base class for data tools that operate on PaintViewBox.\n \
            \   \"\""
        : null
        mapToPlot:
            ? "\"\"Map a point in ViewBox local coordinates into plot coordinates.\n\
                \        \"\""
            : null
        activate:
            '""Activate the tool""': null
        deactivate:
            '""Deactivate a tool""': null
    PutInstanceTool:
        ? "\"\"\n    Add a single data instance with a mouse click.\n    \"\""
        : null
    PenTool:
        ? "\"\"\n    Add points on a path specified with a mouse drag.\n    \"\""
        : null
    AirBrushTool:
        ? "\"\"\n    Add points with an 'air brush'.\n    \"\""
        : null
    MagnetTool:
        ? "\"\"\n    Draw points closer to the mouse position.\n    \"\""
        : null
    JitterTool:
        ? "\"\"\n    Jitter points around the mouse position.\n    \"\""
        : null
    SelectTool:
        __init__:
            Delete: null
            Backspace: null
    SimpleUndoCommand:
        ? "\"\"\n    :param function redo: A function expressing a redo action.\n\
            \    :param function undo: A function expressing a undo action.\n    \"\
            \""
        : null
    UndoCommand:
        ? "\"\"An QUndoCommand applying a data transformation operation\n    \"\""
        : null
    _icon:
        icons/paintdata: null
    OWPaintData:
        Brush: null
        Create multiple instances: null
        brush.svg: null
        Put: null
        Put individual instances: null
        put.svg: null
        Select: null
        Select and move instances: null
        select-transparent_42px.png: null
        Jitter: null
        Jitter instances: null
        jitter.svg: null
        Magnet: null
        Attract multiple instances: null
        magnet.svg: null
        Clear: null
        Clear the plot: null
        ../../../icons/Dlg_clear.png: null
        Paint Data: null
        Create data by painting data points on a plane.: null
        icons/PaintData.svg: null
        create: null
        draw: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        Painted data: null
        x: null
        y: null
        C1: null
        C2: null
        plot: null
        Warning:
            Input data has no variables: null
            Numeric target value can not be used.: null
            Sparse data is ignored.: null
            'Some variables have been renamed ': null
            to avoid duplicates.\n{}: null
        Information:
            Paint Data uses data from the first two attributes.: null
        _init_ui:
            Names: null
            attr1: null
            'Variable X: ': null
            attr2: null
            'Variable Y: ': null
            hasAttr2: null
            Labels: null
            +: null
            Add new class label: null
            MINUS SIGN: null
            Remove selected class label: null
            Tools: null
            brushRadius: null
            'Radius:': null
            density: null
            'Intensity:': null
            symbol_size: null
            'Symbol:': null
            Reset to Input Data: null
            autocommit: null
            bottom: null
            left: null
        set_dimensions:
            left: null
        set_data:
            '""Set the input_data and call reset_to_input""': null
            C1: null
        reset_to_input:
            '""Reset the painting to input data if present.""': null
        add_new_class_label:
            C: null
        remove_selected_class_label:
            Delete class label: null
        _on_editing_started:
            macro: null
        execute:
            Non normalized command: null
        _add_command:
            Name: null
            Delete: null
            Move: null
            unreachable: null
        _replot:
            +: null
        _attr_name_changed:
            bottom: null
            left: null
        commit:
            Class: null
            ', ': null
            bottom: null
            left: null
        send_report:
            x: null
            y: null
            Axis x: null
            Axis y: null
            Number of points: null
            Painted data: null
    __main__: null
Orange/widgets/data/owfile.py:
    Automatically detect type: Samodejno zaznaj tip datoteke
    add_origin:
        ? "\"\"\n    Adds attribute with file location to each string variable\n \
            \   Used for relative filenames stored in string variables (e.g. pictures)\n\
            \    TODO: we should consider a cleaner solution (special variable type,\
            \ ...)\n    \"\""
        : null
        type: false
        origin: false
    OWFile:
        File: Datoteka
        orange.widgets.data.file: false
        'Read data from an input file or network ': 'Preberi podatke iz datoteke ali
            omrežja '
        and send a data table to the output.: in jih pošlji na izhod.
        icons/File.svg: false
        Data: Podatki
        file: datoteka
        load: naloži
        read: preberi
        open: odpri
        Outputs:
            Data: Podatki
            Attribute-valued dataset read from the input file.: Podatki iz datoteke
                ali omrežja
        sample-datasets: false
        iris.tab: false
        titanic.tab: false
        housing.tab: false
        heart_disease.tab: false
        brown-selected.tab: false
        zoo.tab: false
        Information:
            No file selected.: Datoteka ni izbrana.
        Warning:
            The file is too large to load automatically.: Datoteka je prevelika za
                samodejno branje.
            ' Press Reload to load.': ' Pritisni Ponovno naloži za branje.'
            Read warning:\n{}: Opozorilo ob branju:\n{}
            Categorical variables with >100 values may decrease performance.: Kategorične
                spremenljivke z >100 vrednostmi lahko upočasne delovanje.
            'Some variables have been renamed ': 'Nekatere spremenljivke so bile preimenovane
                v izogib '
            to avoid duplicates.\n{}: ponovljenim imenom.\n{}
            Most widgets do not support multiple targets: Večina gradnikov ne podpira
                večih ciljnih spremenljivk.
        Error:
            File not found.: Datoteka ni najdena
            Missing reader.: Bralnik za ta tip ne obstaja
            Error listing available sheets.: Napaka ob ustvarjanju seznama listov.
            Read error:\n{}: Napaka ob branju:\n{}
        'Use CSV File Import widget for advanced options ': 'Uporavi Bralnik CSV za
            napredne možnosti '
        for comma-separated files: za datoteke ločene z vejico
        use-csv-file-import: falxe
        'This widget loads only tabular data. Use other widgets to load ': 'Ta gradnik
            nalaga le tabelarične podatke. Uporabi druge gradnike za branje '
        other data types like models, distance matrices and networks.: drugih vrst
            podatkov, kot so modeli, matrike razdalj in mreže.
        other-data-types: false
        __init__:
            read: false
            EXTENSIONS: false
            group_readers_per_addon_key:
                package:
                    .: false
                    Orange.data: false
                    '0': false
            Source: Vir
            source: false
            'File:': 'Datoteka:'
            '...': true
            Reload: Ponovno naloži
            Sheet: List
            'URL:': true
            File Type: Vrsta datoteke
            Info: true
            No data loaded.: Podatki niso naloženi.
            Columns (Double click to edit): Stolpci (dvoklikni za urejanje)
            Reset: Povrni
            Apply: Uveljavi
            Browse documentation datasets: Odpri podatke iz dokumentacije
        _url_set:
            http://: true
        browse_file:
            File: Datoteka
            Cannot find the directory with documentation datasets: Ne najdem mape
                s podatki iz dokumentacije
            ~/: false
        load_data:
            No data.: Ni podatkov.
        _get_reader:
            Can not find reader "{qname}": Bralnik "{qname}" ne obstaja
        _describe:
            missing_prop:
                ({prop * 100:.1f}% missing values): ({prop * 100:.1f}% manjkajočih
                    vrednosti)
                (no missing values): (ni manjkajočih vrednosti)
            attributes: false
            Name: Ime
            Description: Opis
            <b>{descs[0]}</b>: false
            <p>{'<br/>'.join(descs)}</p>: false
            <p>{len(table)} {pl(len(table), 'instance|instances')}: <p>{len(table)}
                {plsi(len(table), 'primer|primera|primeri|primerov')}
            <br/>{nattrs} {pl(nattrs, 'feature|features')} {missing_in_attr}: <br/>{nattrs}
                {plsi(nattrs, 'spremenljivka|spremenljivki|spremenljivke|spremenljivk')}
                {missing_in_attr}
            <br/>Regression; numerical class {missing_in_class}: <br/>Regresija {missing_in_class}
            '<br/>Classification; categorical class ': '<br/>Klasifikacija: '
            with {nvals} {pl(nvals, 'value|values')} {missing_in_class}: '{nvals}
                {plsi(nvals, ''razredom|razredoma|razredi|razredi'')} {missing_in_class}'
            '<br/>Multi-target; ': '<br/>Večrazredni; '
            '{ntargets} target {pl(ntargets, ''variable|variables'')} ': '{ntargets}
                {plsi(ntargets, ''ciljna spremenljivka|ciljni spremenljivki|ciljne
                spremenljivke|ciljnih spremenljivk'')}'
            '{missing_in_class}': null
            <br/>Data has no target variable.: <br/>Podatki nimajo ciljne spremenljivke
            <br/>{nmetas} {pl(nmetas, 'meta variable|meta variables')}: <br/>{nmetas}
                {plsi(nmetas, 'meta spremenljvka|meta spremenljivki|meta spremenljivke|meta
                spremenljivk')}
            </p>: false
            Timestamp: false
            '<p>First entry: {table[0, ''Timestamp'']}<br/>': '<p>Prvi vnos: {table[0,
                ''Timestamp'']}<br/>'
            'Last entry: {table[-1, ''Timestamp'']}</p>': 'Zadnji vnos: {table[-1,
                ''Timestamp'']}</p>'
            <br/>: false
        retrieveSpecificSettings:
            modified_variables: null
        apply_domain_edit:
            attributes: null
            'Renamed: {'', ''.join(renamed)}': 'Preimenovano: {'', ''.join(renamed)}'
            ', ': false
        send_report:
            get_ext_name:
                unknown: neznan
            File: Datoteka
            No file.: Ni datoteke.
            '~': false
            /: false
            \\: false
            ' ({self.sheet_combo.currentText()})': false
            File name: Ime datoteke
            Format: Oblika
            Data: Podatki
            Resource: Vir
        dragEnterEvent:
            '""Accept drops of valid file urls""': null
        dropEvent:
            '""Handle file drops""': null
        workflowEnvChanged:
            ? "\"\"\n        Function called when environment changes (e.g. while\
                \ saving the scheme)\n        It make sure that all environment connected\
                \ values are modified\n        (e.g. relative file paths are changed)\n\
                \        \"\""
            : null
    OWFileDropHandler:
        canDropUrl:
            http: false
            https: false
            ftp: false
        parametersFromUrl:
            recent_paths: false
            source: false
            recent_urls: false
    __main__: false
Orange/widgets/data/owpivot.py:
    AggregationFunctionsEnum:
        __str__:
            _: null
            ' ': null
    Pivot:
        __init__:
            Row variable should be DiscreteVariable: null
            ' or ContinuousVariable': null
            Column variable should be DiscreteVariable: null
            Total: null
            total: null
        _create_group_tables:
            ({str(fun).lower()}): null
            '{var.name} ({str(fun).lower()})': null
            table: null
            total_h: null
            total_v: null
            total: null
        _create_pivot_tables:
            table: null
            total_h: null
            total_v: null
            total: null
        __get_pivot_tab_domain:
            map_values:
                nan: null
            have_date: null
            have_time: null
            '{v}': null
            Total: null
            Aggregate: null
        __get_pivot_tab_x:
            fill_value: null
            dtype: null
        count_defined:
            nan: null
    BorderedItemDelegate:
        paint:
            '""Overloads `paint` to draw borders""': null
    PivotTableView:
        Total: null
        _draw_lines:
            t: null
        _resize:
            ' ': null
    OWPivot:
        Pivot Table: null
        Reshape data table based on column values.: null
        Transform: null
        icons/Pivot.svg: null
        pivot: null
        group: null
        aggregate: null
        Inputs:
            Data: null
        Outputs:
            Pivot Table: null
            Filtered Data: null
            Grouped Data: null
        Warning:
            Column feature should be selected.: null
            Some aggregations ({}) cannot be computed.: null
            Some variables have been renamed in some tables: null
            to avoid duplicates.\n{}: null
            Selected variable has too many values.: null
            At least 1 primitive variable is required.: null
        _add_control_area_controls:
            Rows: null
            row_feature: null
            Columns: null
            col_feature: null
            (Same as rows): null
            Values: null
            val_feature: null
            (None): null
            auto_commit: null
        __add_aggregation_controls:
            Aggregations: null
        skipped_aggs:
            ', ': null
        init_attr_values:
            row_feature: null
            col_feature: null
            val_feature: null
        send_report:
            Row feature: null
            Column feature: null
            Value feature: null
            Group by: null
    __main__: null
    heart_disease: null
Orange/widgets/data/owrandomize.py:
    OWRandomize:
        Randomize: null
        Randomize features, class and/or metas in data table.: null
        Transform: null
        icons/Random.svg: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        __init__:
            Shuffled columns: null
            shuffle_class: null
            Classes: null
            shuffle_attrs: null
            Features: null
            shuffle_metas: null
            Metas: null
            Shuffled rows: null
            None: null
            scope_prop: null
            All: null
            random_seed: null
            Replicable shuffling: null
        _set_scope_label:
            '{}%': null
        send_report:
            classes: null
            features: null
            metas: null
            none: null
            ' and ': null
            ', ': null
            Settings: null
            Shuffled columns: null
            Proportion of shuffled rows: null
            '{}%': null
            Replicable: null
            'yes': null
            'no': null
    __main__: null
    iris: null
Orange/widgets/data/owsql.py:
    is_postgres:
        display_name: null
        PostgreSQL: null
    OWSql:
        SQL Table: null
        orange.widgets.data.sql: null
        Load dataset from SQL.: null
        icons/SQLTable.svg: null
        Data: null
        load: null
        Outputs:
            Data: null
            Attribute-valued dataset read from the input file.: null
        Information:
            Data description was generated from a sample.: null
        Warning:
            'Database is missing extensions: {}': null
        Error:
            Please install a backend to use this widget.: null
        _add_tables_controls:
            Tables: null
            table: null
            materialize: null
            'Materialize to table ': null
            Save results of the query in a table: null
            materialize_table_name: null
            Execute: null
            guess_values: null
            Auto-discover categorical variables: null
            download: null
            Download data to local memory: null
        highlight_error:
            'QLineEdit {border: 2px solid red;}': null
            server: null
            host: null
            role: null
            database: null
        on_connection_success:
            missing_extension: null
            ', ': null
        on_connection_error:
            \n: null
        refresh_tables:
            Select a table: null
            Custom SQL: null
        select_table:
            Custom SQL: null
            Table: null
            (None): null
        get_table:
            Table: null
            (None): null
            Custom SQL: null
            Query: null
            Specify a table name to materialize the query: null
            'DROP TABLE IF EXISTS ': null
            'CREATE TABLE ': null
            ' AS ': null
            'ANALYZE ': null
            'Attribute discovery might take ': null
            a long time on large tables.\n: null
            Do you want to auto discover attributes?: null
            'Yes': null
            'No': null
            Yes, on a sample: null
            'Data appears to be big. Do you really ': null
            want to download it to local memory?: null
            Yes, a sample: null
            Warning: null
            Data is too big to download.\n: null
            Question: null
        migrate_settings:
            host: null
            port: null
            username: null
            password: null
    __main__: null
Orange/widgets/data/owdiscretize.py:
    OWDiscretize:
        Discretize: null
        Discretize the numeric data features.: null
        Transform: null
        icons/Discretize.svg: null
        bin: null
        categorical: null
        nominal: null
        ordinal: null
        Inputs:
            Data: null
            Input data table: null
        Outputs:
            Data: null
            Table with discretized features: null
        __init__:
            Default Discretization: null
            _default_method_: null
            Default: null
            Leave numeric: null
            Entropy-MDL discretization: null
            Equal-frequency discretization: null
            Equal-width discretization: null
            Remove numeric variables: null
            Manual: null
            Equal: null
            _intbox:
                'Num. of intervals:': null
            default_k: null
            manual_cut_editline:
                e.g. 0.0, 0.5, 1.0: null
                'Enter fixed discretization cut points (a comma ': null
                'separated list of strictly increasing numbers e.g. ': null
                0.0, 0.5, 1.0).: null
            ', ': null
            set_manual_default_cuts:
                ',': null
            default_cutpoints: null
            Individual Attribute Settings: null
            method: null
            k: null
            Remove attribute: null
            set_manual_cuts:
                ',': null
            cutpoints: null
            CC: null
            Copy the current cut points to manual mode: null
            autosend: null
        _update_points:
            ? "\"\"\n        Update the induced cut points.\n        \"\""
            : null
        _copy_to_manual:
            ', ': null
        discretized_domain:
            ? "\"\"\n        Return the current effective discretized domain.\n  \
                \      \"\""
            : null
        send_report:
            Default method: null
            Thresholds: null
            leave numeric: null
        migrate_settings:
            default_method: null
            default_method_name: null
    Default: null
    method: null
    Leave: null
    MDL: null
    EqualFreq: null
    k: null
    EqualWidth: null
    Remove: null
    Custom: null
    points: null
    DState: null
    disc_var: null
    DiscDelegate:
        initStyleOption:
            ': ': null
        cutsText:
            '...': null
            <removed>: null
            ', ': null
            (leave): null
            (entropy): null
            (equal frequency k={}): null
            (equal width k={}): null
            (removed): null
            (custom): null
            ' ': null
    IncreasingNumbersListValidator:
        ? "\"\"\n    Match a comma separated list of non-empty and increasing number\
            \ strings.\n\n    Example\n    -------\n    >>> v = IncreasingNumbersListValidator()\n\
            \    >>> v.validate(\"\", 0)   # Acceptable\n    (2, '', 0)\n    >>> v.validate(\"\
            1\", 1)  # Acceptable\n    (2, '1', 1)\n    >>> v.validate(\"1,,\", 1)\
            \  # Intermediate\n    (1, '1,,', 1)\n    \"\""
        : null
        itersplit:
            '"(?<!\\),': null
        validate:
            '"([+-]?\s?\d*\s?\d*\.?\d*\s?\d*)': null
        fixup:
            ? "\"\"\n        Fixup the input. Remove empty parts from the string.\n\
                \        \"\""
            : null
            ', ': null
    show_tip:
        ::show_tip_qlabel: null
        tip-label: null
        QTipLabel: null
        hide-timer: null
    __main__: null
    brown-selected: null
Orange/widgets/data/owtable.py:
    RichTableModel:
        ? "\"\"A TableModel with some extra bells and whistles/\n\n    (adds support\
            \ for gui.BarRole, include variable labels and icons\n    in the header)\n\
            \    \"\""
        : false
        __init__:
            _: false
        headerData:
            \n: false
    TableSliceProxy:
        setRowSlice:
            invalid stride: false
    TableSlot: false
    input_id: false
    table: false
    summary: false
    view: false
    OWDataTable:
        Data Table: Tabela
        View the dataset in a spreadsheet.: Pregled podatkov v tabeli
        icons/Table.svg: false
        Inputs:
            Data: Podatki
        Outputs:
            Selected Data: Izbor podatkov
        __init__:
            Info: true
            Variables: Spremenljivke
            show_attribute_labels: false
            Show variable labels (if present): Pokaži oznake spremenljivk
            show_distributions: false
            Visualize numeric values: Vizualiziraj številske vrednosti
            color_by_class: false
            Color by instance classes: Obarvaj primere glede na razred
            Selection: Izbor
            select_rows: false
            Select full rows: Izbiraj cele vrstice
            Restore Original Order: Izvirni vrstni red
            Show rows in the original order: Pokaži vrstice v izvirnem vrstnem redu
            auto_commit: false
        set_dataset:
            '""Set the input dataset.""': false
            name: false
            Data: Podatki
        insert_dataset:
            name: false
            Data: Podatki
        handleNewSignals:
            update:
                _update_info: false
        _setup_table_view:
            ? "\"\"Setup the `view` (QTableView) with `data` (Orange.data.Table)\n\
                \        \"\""
            : false
        set_corner_text:
            '""Set table corner text.""': false
            btn: false
            btnfailed: false
            darwin: false
        _set_input_summary:
            \n: false
        _info_box_text:
            format_part:
                ' ({perc:.1f} % missing data)': ' ({perc:.1f} % manjkajočih podatkov)'
                sparse: redki
                tags: oznake
                ' ({tag}, density {dens:.2f} %)': ' ({tag}, gostota {dens:.2f} %)'
            desc:
                No {part}s: null
                1 {part}: null
                '{n} {part}s': null
            No data.: Ni podatkov.
            '{summary.len.result()} instances': null
            ~{summary.approx_len} instances: null
            '{summary.len} instances': null
            ' (no missing data)': ' (ni manjkajočih podatkov)'
            feature: null
            No target variable.: Ni ciljne spremenljivke
            outcome: null
            Numeric outcome: Numerična ciljna spremenljivka
            'Target with ': null
            value: null
            meta attribute: null
            '{ninst} {pls(ninst, ''instance'')}': '{ninst} {plsi(ninst, ''vrstica|vrstici|vrstice|vrstic'')}'
            ~{ninst} {pls(ninst, 'instance')}: ~{ninst} {plsi(ninst, 'vrstica|vrstici|vrstice|vrstic')}
            '{nattrs}  {pls(nattrs, ''feature'')}': '{nattrs}  {plsi(nattrs, ''spremenljivk|spremenljivki|spremenljivke|spremenljivk'')}'
            '{nclasses} {pls(nclasses, ''outcome'')}': '{nclasses} {plsi(nclasses,
                ''ciljna spremenljivka|ciljni spremenljivki|ciljne spremenljivke|ciljnih
                spremenljivk'')}'
            Target with {nvalues} {pls(nvalues, 'value')}: Razred, {nvalues} {plsi(nvalues,
                'kategorija|kategoriji|kategorije|kategorij')}
            '{nmetas} {pls(nmetas, ''meta attribute'')}': '{nmetas} meta {plsi(nmetas,
                ''spremenljivka|spremenljivki|spremenljivke|spremenljivk'')}'
            No meta attributes.: Brez meta spremenljivk
        _on_current_tab_changed:
            '""Update the status bar on current tab change""': false
        _update_variable_labels:
            Update the variable labels visibility for `view`: false
            _: false
            \n: false
        _on_show_variable_labels_changed:
            '""The variable labels (var.attribues) visibility was changed.""': false
        restore_order:
            '""Restore the original data order of the current view.""': false
        get_selection:
            ? "\"\"\n        Return the selected row and column indices of the selection\
                \ in view.\n        \"\""
            : false
        commit:
            ? "\"\"\n        Commit/send the current selected row/column selection.\n\
                \        \"\""
            : false
            select_vars:
                '""select variables for role (TableModel.DomainRole)""': null
        copy:
            ? "\"\"\n        Copy current table selection to the clipboard.\n    \
                \    \"\""
            : false
    DenseArray: false
    nans: false
    non_nans: false
    stats: false
    SparseArray: false
    SparseBoolArray: false
    NotAvailable: false
    Summary: false
    len: false
    domain: false
    X: false
    Y: false
    M: false
    ApproxSummary: false
    approx_len: false
    __main__: false
    iris: false
    brown-selected: false
    housing: false
Orange/widgets/data/owmelt.py:
    item: null
    value: null
    row: null
    MeltContextHandler:
        match:
            idvar: null
        encode_setting:
            idvar: null
        decode_setting:
            idvar: null
    OWMelt:
        Melt: null
        Convert wide data to narrow data, a list of item-value pairs: null
        Transform: null
        icons/Melt.svg: null
        shopping list: null
        wide: null
        narrow: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        Information:
            No columns with unique values\n: null
            Only columns with unique valules are useful for row identifiers.: null
        __init__:
            Unique Row Identifier: null
            Row number: null
            idvar: null
            A column with identifier, like customer's id: null
            Filter: null
            only_numeric: null
            Ignore non-numeric features: null
            exclude_zeros: null
            Exclude zero values: null
            Besides missing values, also omit items with zero values: null
            Names for generated features: null
            'Item:': null
            item_var_name: null
            'padding-left: 3px': null
            'Value:': null
            value_var_name: null
        send_report:
            Settings: null
            Row identifier: null
            Ignore non-numeric features: null
            Exclude zero values: null
            Output: null
        _store_output_desc:
            Item column: null
            Value column: null
            Number of items: null
    __main__: null
    zoo: null
Orange/widgets/data/oweditdomain.py:
    ? '""

        Edit Domain

        -----------


        A widget for manual editing of a domain''s attributes.


        ""'
    : null
    A: null
    B: null
    V: null
    H: null
    unique:
        ? "\"\"\n    Return unique elements in `sequence`, preserving their (first\
            \ seen) order.\n    \"\""
        : null
    _DataType:
        __eq__:
            '""Equal if `other` has the same type and all elements compare equal.""': null
        name_type:
            ? "\"\"\n        Returns a tuple with name and type of the variable.\n\
                \        It is used since it is forbidden to use names of variables\
                \ in settings.\n        \"\""
            : null
            Categorical: null
            Real: null
            Time: null
            String: null
    Categorical:
        Categorical: null
        name: null
        categories: null
        annotations: null
        linked: null
    Real:
        Real: null
        name: null
        format: null
        annotations: null
        linked: null
    String:
        String: null
        name: null
        annotations: null
        linked: null
    Time:
        Time: null
        name: null
        annotations: null
        linked: null
    Rename:
        Rename: null
        name: null
        ? "\"\"\n    Rename a variable.\n\n    Parameters\n    ----------\n    name\
            \ : str\n        The new name\n    \"\""
        : null
    CategoriesMapping:
        CategoriesMapping: null
        mapping: null
        ? "\"\"\n    Change categories of a categorical variable.\n\n    Parameters\n\
            \    ----------\n    mapping : CategoriesMappingType\n    \"\""
        : null
    Annotate:
        Annotate: null
        annotations: null
        ? "\"\"\n    Replace variable annotations.\n    \"\""
        : null
    Unlink:
        Unlink: null
        '""Unlink variable from its source, that is, remove compute_value""': null
    CategoricalVector:
        CategoricalVector: null
        vtype: null
        data: null
    RealVector:
        RealVector: null
        vtype: null
        data: null
    StringVector:
        StringVector: null
        vtype: null
        data: null
    TimeVector:
        TimeVector: null
        vtype: null
        data: null
    AsString:
        AsString: null
        '""Reinterpret a data vector as a string.""': null
    AsContinuous:
        AsContinuous: null
        ? "\"\"\n    Reinterpret as a continuous variable (values that do not parse\
            \ as\n    float are NaN).\n    \"\""
        : null
        __call__:
            g: null
    AsCategorical:
        AsCategorical: null
        '""Reinterpret as a categorical variable""': null
    AsTime:
        AsTime: null
        '""Reinterpret as a datetime vector""': null
        __call__:
            M8[us]: null
            data:
                coerce: null
                M8[us]: null
    deconstruct:
        ? "\"\"\n    Deconstruct a tuple subclass to its class name and its contents.\n\
            \n    Parameters\n    ----------\n    obj : A tuple\n\n    Returns\n \
            \   -------\n    value: Tuple[str, Tuple[Any, ...]]\n    \"\""
        : null
    reconstruct:
        ? "\"\"\n    Reconstruct a tuple subclass (inverse of deconstruct).\n\n  \
            \  Parameters\n    ----------\n    tname : str\n        Type name\n  \
            \  args : Tuple[Any, ...]\n\n    Returns\n    -------\n    rval: Tuple[Any,\
            \ ...]\n    \"\""
        : null
    formatter_for_dtype:
        __formatter: null
    masked_unique:
        O: null
        masked value if present must be in last position: null
    categorical_from_vector:
        __formater: null
        '?': null
    categorize_unique:
        masked value if present must be last: null
    DictItemsModel:
        ? "\"\"A Qt Item Model class displaying the contents of a python\n    dictionary.\n\
            \n    \"\""
        : null
        __init__:
            Key: null
            Value: null
    VariableEditor:
        ? "\"\"\n    An editor widget for a variable.\n\n    Can edit the variable\
            \ name, and its attributes dictionary.\n    \"\""
        : null
        __init__:
            editor-form-layout: null
            name-editor: null
            'Name:': null
            Unlink variable from its source variable: null
            'Make Orange forget that the variable is derived from ': null
            another.\n: null
            'Use this for instance when you want to consider variables ': null
            'with the same name but from different sources as the same ': null
            variable.: null
            annotation-pairs-edit: null
            annotate-action-group: null
            +: null
            action-add-label: null
            Add a new label.: null
            \N{MINUS SIGN}: null
            action-delete-label: null
            Remove selected label.: null
            Add: null
            Remove: null
            'Labels:': null
        set_data:
            ? "\"\"\n        Set the variable to edit.\n        \"\""
            : null
        get_data:
            ? "\"\"Retrieve the modified variable.\n        \"\""
            : null
        clear:
            ? "\"\"Clear the editor state.\n        \"\""
            : null
    GroupItemsDialog:
        ? "\"\"\n    A dialog for group less frequent values.\n    \"\""
        : null
        other: null
        __init__:
            Group selected values: null
            Group values with less than: null
            Group all except: null
            selected_radio: null
            occurrences: null
            most frequent values: null
            frequent_abs_spin: null
            X: null
            frequent_rel_spin: null
            ' %': null
            n_values_spin: null
            'New value name: ': null
            name_line_edit: null
            dialog-button-box: null
        get_merge_attributes:
            ? "\"\"\n        Returns attributes that will be merged\n\n        Returns\n\
                \        -------\n        List of attributes' to be merged names\n\
                \        \"\""
            : null
        get_merged_value_name:
            ? "\"\"\n        Returns\n        -------\n        New label of merged\
                \ values\n        \"\""
            : null
        get_dialog_settings:
            ? "\"\"\n        Returns\n        -------\n        Return the dictionary\
                \ with vlues set by user in each of the line edits\n        and selected\
                \ radio button.\n        \"\""
            : null
            frequent_abs_spin: null
            frequent_rel_spin: null
            n_values_spin: null
            name_line_edit: null
            selected_radio: null
    CountedListModel:
        ? "\"\"\n    A list model counting how many times unique `key` values appear\
            \ in\n    the list.\n\n    The counts are cached and invalidated on any\
            \ change to the model involving\n    the changes to `keyRoles`.\n    \"\
            \""
        : null
        invalidateCounts:
            ? "\"\"\n        Invalidate the cached counts.\n        \"\""
            : null
        __counts:
            key value '{key}' is not hashable: null
        key:
            ? "\"\"\n        Return the 'key' value that is to be counted.\n\n   \
                \     The default implementation returns Qt.EditRole value for the\
                \ index\n\n        Parameters\n        ----------\n        index :\
                \ QModelIndex\n            The model index.\n\n        Returns\n \
                \       -------\n        key : Any\n        \"\""
            : null
        keyRoles:
            ? "\"\"\n        Return a set of item roles on which `key` depends.\n\n\
                \        The counts are invalidated and recomputed whenever any of\
                \ the roles in\n        this set changes.\n\n        By default the\
                \ only role returned is Qt.EditRole\n        \"\""
            : null
    CountedStateModel:
        ? "\"\"\n    Count by EditRole (name) and EditStateRole (ItemEditState)\n\
            \    \"\""
        : null
    CategoriesEditDelegate:
        ? "\"\"\n    Display delegate for editing categories.\n\n    Displayed items\
            \ are styled for add, remove, merge and rename operations.\n    \"\""
        : null
        initStyleOption:
            (dropped): null
            (added): null
            '{sourcename} \N{RIGHTWARDS ARROW} {text}': null
            (merged): null
            ' ': null
        createEditor:
            QStyleOptionViewItem: null
        updateEditorGeometry:
            QStyleOptionViewItem: null
    DiscreteVariableEditor:
        ? "\"\"An editor widget for editing a discrete variable.\n\n    Extends the\
            \ :class:`VariableEditor` to enable editing of\n    variables values.\n\
            \    \"\""
        : null
        __init__:
            action-group-categories: null
            Move up: null
            \N{UPWARDS ARROW}: null
            Move the selected item up.: null
            Move down: null
            \N{DOWNWARDS ARROW}: null
            Move the selected item down.: null
            Add: null
            +: null
            action-add-item: null
            Append a new item.: null
            Remove item: null
            \N{MINUS SIGN}: null
            action-remove-item: null
            Delete the selected item.: null
            Rename selected items: null
            '=': null
            action-rename-selected-items: null
            Rename selected items.: null
            Merge: null
            M: null
            action-activate-merge-dialog: null
            Merge infrequent items.: null
            Remove: null
            Merge selected items: null
            Merge infrequent: null
            'Values:': null
        set_data_categorical:
            ? "\"\"\n        Set the variable to edit.\n\n        `values` is needed\
                \ for categorical features to perform grouping.\n        \"\""
            : null
            'invalid mapping: {!r}': null
        __categories_mapping:
            ? "\"\"\n        Encode and return the current state as a CategoriesMappingType\n\
                \        \"\""
            : null
        get_data:
            ? "\"\"Retrieve the modified variable\n        \"\""
            : null
            '{mapping}, {var}': null
        clear:
            ? "\"\"Clear the model state.\n        \"\""
            : null
        _remove_category:
            ? "\"\"\n        Remove the current selected category.\n\n        If the\
                \ item is an existing category present in the source variable it\n\
                \        is marked as removed in the view. But if it was added in\
                \ the set\n        transformation it is removed entirely from the\
                \ model and view.\n        \"\""
            : null
            invalid state '{}' for {}: null
        _add_category:
            ? "\"\"\n        Add a new category\n        \"\""
            : null
        _merge_categories:
            ? "\"\"\n        Merge less common categories into one with the dialog\
                \ for merge\n        selection.\n        \"\""
            : null
            Import Options: null
        _rename_selected_categories:
            ? "\"\"\n        Rename selected categories and merging them.\n\n    \
                \    Popup an editable combo box for selection/edit of a new value.\n\
                \        \"\""
            : null
    VariableEditDelegate:
        categorical: null
        numeric: null
        string: null
        time: null
        initStyleOption:
            '{} \N{RIGHTWARDS ARROW} {}': null
            ' (reinterpreted as ': null
            '{self.ReinterpretNames[type(tr)]})': null
        helpEvent:
            Name `{name}` is duplicated: null
    ReinterpretVariableEditor:
        ? "\"\"\n    A 'compound' variable editor capable of variable type reinterpretations.\n\
            \    \"\""
        : null
        __init__:
            decorate:
                '""insert an type combo box into a `editor`''s layout.""': null
                type-combo: null
                Categorical: null
                Numeric: null
                Text: null
                Time: null
                'Type:': null
        set_data:
            ? "\"\"\n        Set the editor data.\n\n        Note\n        ----\n\
                \        This must be a `DataVector` as the vector's values are needed\
                \ for type\n        reinterpretation/casts.\n\n        If the `transform`\
                \ sequence contains ReinterpretTransform then it\n        must be\
                \ in the first position.\n        \"\""
            : null
            type-combo: null
        __reinterpret_activated:
            type-combo: null
    OWEditDomain:
        Edit Domain: null
        Rename variables, edit categories and variable annotations.: null
        icons/EditDomain.svg: null
        rename: null
        drop: null
        reorder: null
        order: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        Error:
            A variable name is duplicated.: null
        __init__:
            Variables: null
            Edit: null
            output_table_name: null
            'Output table name: ': null
            Reset All: null
            button-reset-all: null
            Reset all variables to their input state.: null
            Reset Selected: null
            button-reset: null
            Rest selected variable to its input state.: null
            Apply: null
            button-apply: null
            Apply changes and commit data on output.: null
        set_data:
            '""Set input dataset.""': null
        clear:
            '""Clear the widget state.""': null
        reset_selected:
            '""Reset the currently selected variable to its original state.""': null
        reset_all:
            '""Reset all variables to their original state.""': null
        selected_var_index:
            '""Return the current selected variable index.""': null
        _restore:
            ? "\"\"\n        Restore the edit transform from saved state.\n      \
                \  \"\""
            : null
        _on_variable_changed:
            '""User edited the current variable in editor.""': null
        _restore_transform:
            'Failed to restore transform: {}, {!r}': null
        _set_modified:
            button-apply: null
        commit:
            ? "\"\"\n        Apply the changes to the input data and send the changed\
                \ data to output.\n        \"\""
            : null
        storeSpecificSettings:
            ? "\"\"\n        Update setting before context closes - also when widget\
                \ closes.\n        \"\""
            : null
        send_report:
            <ul>: null
            <li>{}</li>: null
            </ul>: null
            No changes: null
        migrate_context:
            domain_change_hints: null
            Orange.data.variable: null
            DiscreteVariable: null
            Categorical: null
            TimeVariable: null
            Time: null
            ContinuousVariable: null
            Real: null
            f: null
            StringVariable: null
            String: null
            _domain_change_store: null
    enumerate_columns:
        x: null
        y: null
        m: null
    table_column_data:
        M8[us]: null
        __formatter: null
        '?': null
    report_transform:
        ? "\"\"\n    Return a html fragment summarizing the changes applied by `trs`\
            \ list.\n\n    Parameters\n    ----------\n    var : Variable\n      \
            \  A variable descriptor no which trs operates\n    trs : List[Transform]\n\
            \        A non empty list of `Transform` instances.\n\n    Returns\n \
            \   -------\n    report : str\n    \"\""
        : null
        C: null
        N: null
        S: null
        T: null
        type_char:
            '?': null
        strike:
            <s>{}</s>: null
        i:
            <i>{}</i>: null
        text:
            <span>{}</span>: null
        '{} → ({}) {}': null
        '{} → {}': null
        (unlinked from source): null
        Values: null
        '&nbsp;': null
        (added): null
        ' → ': null
        Labels: null
        <s>: null
        ' : ': null
        </s>: null
        (new): null
        '<div style=''font-weight: bold;''>{}</div>': null
        <div>{}:</div>: null
        <br/>\n: null
        '<div style=''padding-left: 1em;''>': null
        </div>: null
        \n: null
    abstract:
        ? "\"\"\n    Return `Varaible` descriptor for an `Orange.data.Variable` instance.\n\
            \n    Parameters\n    ----------\n    var : Orange.data.Variable\n\n \
            \   Returns\n    -------\n    var : Variable\n    \"\""
        : null
        f: null
    _parse_attributes:
        '{}={}': null
    apply_transform:
        ? "\"\"\n    Apply a list of `Transform` instances on an `Orange.data.Variable`.\n\
            \    \"\""
        : null
    ftry:
        ? "\"\"\n    Wrap a `func` such that if `errors` occur `default` is returned\
            \ instead.\"\""
        : null
    DictMissingConst:
        ? "\"\"\n    `dict` with a constant for `__missing__()` value.\n    \"\""
        : null
        __missing: null
    make_dict_mapper:
        ? "\"\"\n    Wrap a `mapping` into a callable ufunc-like function with\n \
            \   `out`, `dtype`, `where`, ... parameters. If `dtype` is passed to\n\
            \    `make_dict_mapper` it is used as a the default return dtype,\n  \
            \  otherwise the default dtype is `object`.\n    \"\""
        : null
        mapper:
            unsafe: null
    time_parse:
        __: null
        coerce: null
        _is_dates_only: null
    nan: null
    as_float_or_nan:
        ? "\"\"\n    Convert elements of the input array using builtin `float`, fill\
            \ elements\n    where conversion failed with NaN.\n    \"\""
        : null
        unsafe: null
    apply_reinterpret:
        ? "\"\"\n    Apply a re-interpret transform to an `Orange.data.Table`'s column\n\
            \    \"\""
        : null
    orange_isna:
        ? "\"\"\n    Return a bool mask masking N/A elements in `data` for the `variable`.\n\
            \    \"\""
        : null
    ToStringTransform:
        ? "\"\"\n    Transform a variable to string.\n    \"\""
        : null
    datetime_to_epoch:
        '""Convert datetime to epoch""': null
        M8[us]: null
    ReparseTimeTransform:
        ? "\"\"\n    Re-parse the column's string repr as datetime.\n    \"\""
        : null
        transform:
            coerce: null
    LookupMappingTransform:
        ? "\"\"\n    Map values via a dictionary lookup.\n    \"\""
        : null
    column_str_repr:
        '""Return a array of str representations of coldata for the `variable.""': null
    column_str_repr_discrete:
        '?': null
    column_str_repr_string:
        '?': null
    __main__: null
    iris: null
Orange/widgets/data/owneighbors.py:
    Euclidean: null
    Manhattan: null
    Mahalanobis: null
    Cosine: null
    Jaccard: null
    Spearman: null
    Absolute Spearman: null
    Pearson: null
    Absolute Pearson: null
    OWNeighbors:
        Neighbors: null
        Compute nearest neighbors in data according to reference.: null
        icons/Neighbors.svg: null
        Unsupervised: null
        orangecontrib.prototypes.widgets.owneighbours.OWNeighbours: null
        Inputs:
            Data: null
            Reference: null
        Outputs:
            Neighbors: null
        Info:
            Input data includes reference instance(s).\n: null
            Reference instances are excluded from the output.: null
        Warning:
            Every data instance is same as some reference: null
        Error:
            Data and reference have different features: null
        __init__:
            distance_index: null
            'Distance metric: ': null
            n_neighbors: null
            'Limit number of neighbors to:': null
            limit_neighbors: null
        _data_with_similarity:
            distance: null
    __main__: null
    iris.tab: null
Orange/widgets/data/owmergedata.py:
    Instance id: null
    Row index: null
    ConditionBox:
        RowItems: null
        pre_label: null
        left_combo: null
        in_label: null
        right_combo: null
        remove_button: null
        add_row:
            and: null
            ×: null
        add_plus_row:
            +: null
    DomainModelWithTooltips:
        data:
            Match rows sequentially: null
            'Re-match rows from tables obtained from the same ': null
            source,\n: null
            'e.g. data from the same file that was split within ': null
            the workflow.: null
    MergeDataContextHandler:
        settings_from_widget:
            attr_pairs: null
        settings_to_widget:
            attr_pairs: null
        match:
            attr_pairs: null
    OWMergeData:
        Merge Data: null
        Merge datasets based on the values of selected features.: null
        Transform: null
        icons/MergeData.svg: null
        join: null
        Inputs:
            Data: null
            Data A: null
            Extra Data: null
            Data B: null
        Outputs:
            Data: null
            Merged Data A+B: null
            Merged Data B+A: null
            Merged Data: null
        Append columns from Extra data: null
        Find matching pairs of rows: null
        Concatenate tables: null
        The first table may contain, for instance, city names,\n: null
        and the second would be a list of cities and their coordinates.\n: null
        Columns with coordinates would then be appended to the output.: null
        'Input tables contain different features describing the same data ': null
        instances.\n: null
        Output contains matched instances. Rows without matches are removed.: null
        'Output contains all instances. Data from merged instances is ': null
        merged into single rows.: null
        Confused about merging options?\nSee the tooltips!: null
        merging_types: null
        Warning:
            'Some variables have been renamed ': null
            to avoid duplicates.\n{}: null
        Error:
            Numeric and non-numeric columns ({} and {}) cannot be matched.: null
            Row index cannot be matched with {}.: null
            Instance cannot be matched with {}.: null
            Some combinations of values on the left appear in multiple rows.\n: null
            'For this type of merging, every possible combination of values ': null
            on the left should appear at most once.: null
            Some combinations of values on the right appear in multiple rows.: null
            \n: null
            'Every possible combination of values on the right should appear ': null
            at most once.: null
        __init__:
            merging: null
            Merging: null
            matches: null
            Row matching: null
        send_report:
            Merging: null
            Match: null
            ', ': null
            '{self._get_col_name(left)} with {self._get_col_name(right)}': null
        _get_col_name:
            '''{obj.name}''': null
        _compute_reduced_extra_data:
            ? "\"\"Prepare a table with extra columns that will appear in the merged\n\
                \        table\"\""
            : null
        _values:
            '""Return an iterotor over keys for rows of the table.""': null
        _left_join_indices:
            ? "\"\"Compute a two-row array of indices:\n        - the first row contains\
                \ indices for the primary table,\n        - the second row contains\
                \ the matching rows in the extra table or -1\"\""
            : null
        _inner_join_indices:
            ? "\"\"Use _augment_indices to compute the array of indices,\n       \
                \ then remove those with no match in the second table\"\""
            : null
        _outer_join_indices:
            ? "\"\"Use _augment_indices to compute the array of indices,\n       \
                \ then add rows in the second table without a match in the first\"\
                \""
            : null
        _join_table_by_indices:
            ? "\"\"Join (horizontally) self.data and reduced_extra, taking the pairs\n\
                \        of rows given in indices\"\""
            : null
            name: null
            attributes: null
        _domain_rename_duplicates:
            ? "\"\"Check for duplicate variable names in domain. If any, rename\n\
                \        the variables, by replacing them with new ones (names are\n\
                \        appended a number). \"\""
            : null
            ', ': null
        _join_array_by_indices:
            ? "\"\"Join (horizontally) two arrays, taking pairs of rows given in indices\n\
                \        \"\""
            : null
        migrate_settings:
            mig_value:
                Position (index): null
                Source position (index): null
            augment: null
            merge: null
            combine: null
            merging: null
            attr_pairs: null
            attr_{oper}_data: null
            attr_{oper}_extra: null
            context_settings: null
    __main__: null
    tests/data-gender-region: null
    tests/data-regions: null
Orange/widgets/data/owgroupby.py:
    Aggregation: null
    function: null
    types: null
    concatenate:
        ? "\"\"\n    Concatenate values of series if value is not missing (nan or\
            \ empty string\n    for StringVariable)\n    \"\""
        : null
        ' ': null
    Mean: null
    mean: null
    Median: null
    median: null
    Mode: null
    Standard deviation: null
    std: null
    Variance: null
    var: null
    Sum: null
    sum: null
    Concatenate: null
    Min. value: null
    min: null
    Max. value: null
    max: null
    Span: null
    First value: null
    first: null
    Last value: null
    last: null
    Random value: null
    Count defined: null
    count: null
    Count: null
    size: null
    Proportion defined: null
    _run:
        Aggregating: null
    Attributes: null
    Aggregations: null
    VarTableModel:
        __init__:
            OWGroupBy: null
        set_domain:
            ? "\"\"\n        Reset the table view to new domain\n        \"\""
            : null
        update_aggregation:
            ? "\"\"\n        Reset the aggregation values in the table for the attribute\n\
                \        \"\""
            : null
        data:
            ' and {len(aggs) - 3} more': null
            ', ': null
    AggregateListViewSearch:
        '""ListViewSearch that disables unselecting all items in the list""': null
    CheckBox:
        nextCheckState:
            ? "\"\"\n        Custom behaviour for switching between steps. It is required\
                \ since\n        sometimes user will select different types of attributes\
                \ at the same\n        time. In this case we step between unchecked,\
                \ partially checked and\n        checked or just between unchecked\
                \ and checked - depending on situation\n        \"\""
            : null
    OWGroupBy:
        Group by: null
        Transform: null
        icons/GroupBy.svg: null
        aggregate: null
        group by: null
        Inputs:
            Data: null
            Input data table: null
        Outputs:
            Data: null
            Aggregated data: null
        Error:
            '{}': null
        __init_control_area:
            '""Init all controls in the control area""': null
            Group by: null
            auto_commit: null
        __init_main_area:
            '""Init all controls in the main area""': null
            ' ': null
            Aggregations: null
        __rows_selected:
            '""Callback for table selection change; update checkboxes""': null
        __gb_changed:
            ? "\"\"\n        Callback for Group-by attributes selection change; update\
                \ attribute\n        and call commit\n        \"\""
            : null
        __aggregation_changed:
            ? "\"\"\n        Callback for aggregation change; update aggregations\
                \ dictionary and call\n        commit\n        \"\""
            : null
        get_selected_attributes:
            '""Get select attributes in the table""': null
        _set_gb_selection:
            '""Set selection in groupby list according to self.gb_attrs""': null
        __aggregation_compatible:
            '""Check a compatibility of aggregation with the variable""': null
    __main__: null
    iris: null
Orange/widgets/data/owcreateclass.py:
    '""Widget for creating classes from non-numeric attribute by substrings""': null
    map_by_substring:
        ? "\"\"\n    Map values in a using a list of patterns. The patterns are considered\
            \ in\n    order of appearance.\n\n    Args:\n        a (np.array): input\
            \ array of `dtype` `str`\n        patterns (list of str): list of strings\n\
            \        case_sensitive (bool): case sensitive match\n        match_beginning\
            \ (bool): match only at the beginning of the string\n        map_values\
            \ (list of int): list of len(pattens);\n                             \
            \     contains return values for each pattern\n\n    Returns:\n      \
            \  np.array of floats representing indices of matched patterns\n    \"\
            \""
        : null
    ValueFromStringSubstring:
        ? "\"\"\n    Transformation that computes a discrete variable from a string\
            \ variable by\n    pattern matching.\n\n    Given patterns `[\"abc\",\
            \ \"a\", \"bc\", \"\"]`, string data\n    `[\"abcd\", \"aa\", \"bcd\"\
            , \"rabc\", \"x\"]` is transformed to values of the new\n    attribute\
            \ with indices`[0, 1, 2, 0, 3]`.\n\n    Args:\n        variable (:obj:`~Orange.data.StringVariable`):\
            \ the original variable\n        patterns (list of str): list of string\
            \ patterns\n        case_sensitive (bool, optional): if set to `True`,\
            \ the match is case\n            sensitive\n        match_beginning (bool,\
            \ optional): if set to `True`, the pattern must\n            appear at\
            \ the beginning of the string\n    \"\""
        : null
        transform:
            ? "\"\"\n        Transform the given data.\n\n        Args:\n        \
                \    c (np.array): an array of type that can be cast to dtype `str`\n\
                \n        Returns:\n            np.array of floats representing indices\
                \ of matched patterns\n        \"\""
            : null
    ValueFromDiscreteSubstring:
        ? "\"\"\n    Transformation that computes a discrete variable from discrete\
            \ variable by\n    pattern matching.\n\n    Say that the original attribute\
            \ has values\n    `[\"abcd\", \"aa\", \"bcd\", \"rabc\", \"x\"]`. Given\
            \ patterns\n    `[\"abc\", \"a\", \"bc\", \"\"]`, the values are mapped\
            \ to the values of the new\n    attribute with indices`[0, 1, 2, 0, 3]`.\n\
            \n    Args:\n        variable (:obj:`~Orange.data.DiscreteVariable`):\
            \ the original variable\n        patterns (list of str): list of string\
            \ patterns\n        case_sensitive (bool, optional): if set to `True`,\
            \ the match is case\n            sensitive\n        match_beginning (bool,\
            \ optional): if set to `True`, the pattern must\n            appear at\
            \ the beginning of the string\n    \"\""
        : null
        __setattr__:
            ? "\"\"__setattr__ is overloaded to recompute the lookup table when the\n\
                \        patterns, the original attribute or the flags change.\"\""
            : null
            patterns: null
            case_sensitive: null
            match_beginning: null
            variable: null
            map_values: null
    unique_in_order_mapping:
        ? "\"\" Return\n    - unique elements of the input list (in the order of appearance)\n\
            \    - indices of the input list onto the returned uniques\n    \"\""
        : null
    OWCreateClass:
        Create Class: null
        Create class attribute from a string attribute: null
        icons/CreateClass.svg: null
        Transform: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        class: null
        Warning:
            Data contains only numeric variables.: null
        Error:
            Class name duplicated.: null
            Class name should not be empty.: null
        __init__:
            class_name: null
            New Class Name: null
            Match by Substring: null
            attribute: null
            'From column:': null
            Name: null
            Substring: null
            Count: null
            +: null
            Options: null
            match_beginning: null
            Match only at the beginning: null
            case_sensitive: null
            Case sensitive: null
            Apply: null
        active_rules:
            ? "\"\"\n        Returns the class names and patterns corresponding to\
                \ the currently\n            selected attribute. If the attribute\
                \ is not yet in the dictionary,\n            set the default.\n  \
                \      \"\""
            : null
        rules_to_edits:
            '""Fill the line edites with the rules from the current settings.""': null
        set_data:
            '""Input data signal handler.""': null
        update_rules:
            ? "\"\"Called when the rules are changed: adjust the number of lines in\n\
                \        the form and fill them, update the counts. The widget does\
                \ not have\n        auto-apply.\"\""
            : null
        adjust_n_rule_rows:
            '""Add or remove lines if needed and fix the tab order.""': null
            _add_line:
                ×: null
                'color: gray': null
        add_row:
            '""Append a new row at the end.""': null
        remove_row:
            '""Remove a row.""': null
        sync_edit:
            '""Handle changes in line edits: update the active rules and counts""': null
        class_labels:
            ? "\"\"Construct a list of class labels. Empty labels are replaced with\n\
                \        C1, C2, C3. If C<n> already appears in the list of values\
                \ given by\n        the user, the labels start at C<n+1> instead.\n\
                \        \"\""
            : null
            ^C\\d+: null
            C{}: null
        update_counts:
            '""Recompute and update the counts of matches.""': null
            _matcher:
                ? "\"\"Return indices of strings into patterns; consider case\n  \
                    \          sensitivity and matching at the beginning. The given\
                    \ strings are\n            assumed to be in lower case if match\
                    \ is case insensitive. Patterns\n            are fixed on the\
                    \ fly.\"\""
                : null
            _string_counts:
                ? "\"\"\n            Generate pairs of arrays for each rule until\
                    \ running out of data\n            instances. np.sum over the\
                    \ two arrays in each pair gives the\n            number of matches\
                    \ of the remaining instances (considering the\n            order\
                    \ of patterns) and of the original data.\n\n            For _string_counts,\
                    \ the arrays contain bool masks referring to the\n           \
                    \ original data\n            \"\""
                : null
            _discrete_counts:
                ? "\"\"\n            Generate pairs similar to _string_counts, except\
                    \ that the arrays\n            contain bin counts for the attribute's\
                    \ values matching the pattern.\n            \"\""
                : null
            _clear_labels:
                '""Clear all labels""': null
            _set_labels:
                '""Set the labels to show the counts""': null
                '{}': null
                + {}: null
                '{} of the {} matching instances are already ': null
                covered above: null
                All matching instances are already covered above: null
            _set_placeholders:
                '""Set placeholders for empty edit lines""': null
                (remaining instances): null
                (unused): null
        apply:
            '""Output the transformed data.""': null
        send_report:
            _cond_part:
                '<b>{}</b> ': null
                if <b>{}</b> contains <b>{}</b>: null
                otherwise: null
            _count_part:
                'all {} matching instances are already covered ': null
                above: null
                '{} matching instances (+ {} that are already ': null
                covered above: null
                '{} matching instances': null
            Input: null
            Source attribute: null
            <li>{}; {}</li>: null
            Output: null
            Class name: null
            <ol>{}</ol>: null
    __main__: null
    zoo: null
Orange/widgets/data/owimpute.py:
    DisplayFormatDelegate:
        initStyleOption:
            method: null
    AsDefault:
        Default (above): null
        '{var.name}': null
    RowMask: null
    mask: null
    var_key:
        '{}.{}': null
    OWImpute:
        Impute: null
        Impute missing values in the data table.: null
        icons/Impute.svg: null
        substitute: null
        missing: null
        Transform: null
        Inputs:
            Data: null
            Learner: null
        Outputs:
            Data: null
        Error:
            Imputation failed for '{}': null
            Model based imputer does not work for sparse data: null
        Warning:
            Default method can not handle '{}': null
        __init__:
            Default Method: null
            'Fixed values; numeric variables:': null
            default_numeric_value: null
            ', time:': null
            default_time: null
            Individual Attribute Settings: null
            Restore All to Default: null
            autocommit: null
        set_default_method:
            ? "\"\"Set the current selected default imputation method.\n        \"\
                \""
            : null
        get_method_for_column:
            ? "\"\"\n        Return the imputation method for column by its index.\n\
                \        \"\""
            : null
        __commit_finish:
            get_variable:
                Error for %s: null
            create_data:
                Error: null
                Unknown: null
        send_report:
            '{} ({})': null
            Default method: null
            Specific imputers: null
            ', ': null
            Method: null
        _store_state:
            ? "\"\"\n        Save the current variable imputation state\n        \"\
                \""
            : null
        _restore_state:
            ? "\"\"\n        Restore the variable imputation state from the saved\
                \ state\n        \"\""
            : null
    __sample_data:
        c{i}: null
        t{i}: null
    __main__: null
    brown-selected: null
Orange/widgets/data/owcorrelations.py:
    ? '""

        Correlations widget

        ""'
    : null
    CorrelationType:
        ? "\"\"\n    Correlation type enumerator. Possible correlations: Pearson,\
            \ Spearman.\n    \"\""
        : null
        items:
            ? "\"\"\n        Texts for correlation types. Can be used in gui controls\
                \ (eg. combobox).\n        \"\""
            : null
            Pearson correlation: null
            Spearman correlation: null
    KMeansCorrelationHeuristic:
        ? "\"\"\n    Heuristic to obtain the most promising attribute pairs, when\
            \ there are too\n    many attributes to calculate correlations for all\
            \ possible pairs.\n    \"\""
        : null
        get_clusters_of_attributes:
            ? "\"\"\n        Generates groupes of attribute IDs, grouped by cluster.\
                \ Clusters are\n        obtained by KMeans algorithm.\n\n        :return:\
                \ generator of attributes grouped by cluster\n        \"\""
            : null
        get_states:
            ? "\"\"\n        Generates states (attribute pairs) - the most promising\
                \ first, i.e.\n        states within clusters, following by states\
                \ among clusters.\n\n        :param initial_state: initial state;\
                \ None if this is the first call\n        :return: generator of tuples\
                \ of states\n        \"\""
            : null
    CorrelationRank:
        ? "\"\"\n    Correlations rank widget.\n    \"\""
        : null
        row_for_state:
            name: null
            '{:+.3f}': null
    OWCorrelations:
        Correlations: null
        Compute all pairwise attribute correlations.: null
        icons/Correlations.svg: null
        Unsupervised: null
        Inputs:
            Data: null
        Outputs:
            Data: null
            Features: null
            Correlations: null
        Information:
            Constant features have been removed.: null
        Warning:
            At least two numeric features are needed.: null
            At least two instances are needed.: null
        __init__:
            correlation_type: null
            (All combinations): null
            feature: null
        set_data:
            removed: null
        commit:
            Correlation: null
            FDR: null
            Feature 1: null
            Feature 2: null
            Correlations: null
        migrate_context:
            selection: null
    __main__: null
    iris: null
Orange/widgets/data/owcontinuize.py:
    OWContinuize:
        Continuize: null
        'Transform categorical attributes into numeric and, ': null
        optionally, normalize numeric values.: null
        icons/Continuize.svg: null
        Transform: null
        encode: null
        dummy: null
        numeric: null
        one-hot: null
        binary: null
        treatment: null
        contrast: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        First value as base: null
        Most frequent value as base: null
        One attribute per value: null
        Ignore multinomial attributes: null
        Remove categorical attributes: null
        Treat as ordinal: null
        Divide by number of values: null
        Leave them as they are: null
        Standardize to μ=0, σ²=1: null
        Center to μ=0: null
        Scale to σ²=1: null
        Normalize to interval [-1, 1]: null
        Normalize to interval [0, 1]: null
        Leave it as it is: null
        One class per value: null
        __init__:
            multinomial_treatment: null
            Categorical Features: null
            continuous_treatment: null
            Numeric Features: null
            class_treatment: null
            Categorical Outcome(s): null
            autosend: null
        send_report:
            Settings: null
            Categorical features: null
            Numeric features: null
            Class: null
        migrate_settings:
            continuous_treatment: null
            zero_based: null
    make_indicator_var:
        '{}={}': null
    continuize_domain:
        needs_dist:
            Does the `var` need a distribution given specified flags: null
        continuizer requires data: null
    continuize_var:
        continuize_discrete:
            '{0.name} is a multinomial variable': null
            Invalid value of `multinomial_treatment`: null
        Non-primitive variables cannot be continuized: null
    _ensure_dist:
        Need a distribution or data.: null
    DomainContinuizer:
        __call__:
            Domain has multinomial attributes: null
    __main__: null
    iris: null
Orange/widgets/data/__init__.py:
    Data: null
    orange.widgets.data: null
    '""Widgets for data manipulation.""': null
    ? '""

        This category contains widgets for data manipulation. This includes

        loading, importing, saving, preprocessing, selection, etc.


        ""'
    : null
    icons/Category-Data.svg: null
    '#FFD39F': null
Orange/widgets/data/owunique.py:
    OWUnique:
        Unique: null
        icons/Unique.svg: null
        Filter instances unique by specified key attribute(s).: null
        Transform: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        Last instance: null
        First instance: null
        Middle instance: null
        Random instance: null
        Discard non-unique instances: null
        __init__:
            selected_vars: null
            Group by: null
            tiebreaker: null
            'Instance to select in each group:': null
            autocommit: null
            Commit: null
    __main__: null
    iris: null
Orange/widgets/data/owpreprocess.py:
    _NoneDisc:
        ? "\"\"Discretize all variables into None.\n\n    Used in combination with\
            \ preprocess.Discretize to remove\n    all discrete features from the\
            \ domain.\n\n    \"\""
        : null
    DiscretizeEditor:
        ? "\"\"\n    Editor for preprocess.Discretize.\n    \"\""
        : null
        n: null
        force: null
        None: null
        Equal width discretization: null
        Equal frequency discretization: null
        Remove numeric features: null
        Entropy-MDL discretization: null
        __init__:
            Number of intervals (for equal width/frequency): null
        setParameters:
            method: null
            n: null
        parameters:
            method: null
            n: null
        createinstance:
            method: null
        __repr__:
            ', Number of intervals: {}': null
            '{}{}': null
    ContinuizeEditor:
        Most frequent is base: null
        One feature per value: null
        Remove non-binary features: null
        Remove categorical features: null
        Treat as ordinal: null
        Divide by number of values: null
        setParameters:
            multinomial_treatment: null
        parameters:
            multinomial_treatment: null
        createinstance:
            multinomial_treatment: null
    RemoveSparseEditor:
        missing: null
        zeros: null
        __init__:
            Remove features with too many: null
            missing values: null
            zeros: null
            'Threshold:': null
            Percentage: null
            Fixed: null
        parameters:
            fixedThresh: null
            percThresh: null
            useFixedThreshold: null
            filter0: null
        setParameters:
            percThresh: null
            fixedThresh: null
            useFixedThreshold: null
            filter0: null
        createinstance:
            filter0: null
            useFixedThreshold: null
            fixedThresh: null
            percThresh: null
    ImputeEditor:
        Don't impute.: null
        Replace with constant: null
        Average/Most frequent: null
        Model based imputer: null
        Replace with random value: null
        Remove rows with missing values.: null
        setParameters:
            method: null
        parameters:
            method: null
        createinstance:
            method: null
    UnivariateFeatureSelect:
        __init__:
            Score: null
            Number of features: null
            'Fixed:': null
            'Proportion:': null
            '%': null
        setItems:
            text: null
        setParameters:
            score: null
            strategy: null
            k: null
            p: null
        parameters:
            score: null
            strategy: null
            p: null
            k: null
    FeatureSelectEditor:
        Information Gain: null
        Gain ratio: null
        Gini index: null
        ReliefF: null
        Fast Correlation Based Filter: null
        ANOVA: null
        Chi2: null
        RReliefF: null
        Univariate Linear Regression: null
        __init__:
            text: null
            Information Gain: null
            tooltip: null
            Gain Ratio: null
            Gini Index: null
            ReliefF: null
            Fast Correlation Based Filter: null
            ANOVA: null
            Chi2: null
            RReliefF: null
            Univariate Linear Regression: null
        createinstance:
            score: null
            strategy: null
            k: null
            p: null
        __repr__:
            'Score: {}, Strategy (Fixed): {}': null
            score: null
            k: null
    RandomFeatureSelectEditor:
        __init__:
            Number of features: null
            Fixed: null
            Percentage: null
            '%': null
        setParameters:
            strategy: null
            k: null
            p: null
        parameters:
            strategy: null
            p: null
            k: null
        createinstance:
            strategy: null
            k: null
            p: null
    index_to_enum:
        ? "\"\"Enums, by default, are not int-comparable, so use an ad-hoc mapping\
            \ of\n    int to enum value at that position\"\""
        : null
    enum_to_index:
        ? "\"\"Enums, by default, are not int-comparable, so use an ad-hoc mapping\
            \ of\n    enum key to its int position\"\""
        : null
    Scale: null
    Randomize: null
    PCA: null
    CUR: null
    Description:
        ? "\"\"\n    A description of an action/function.\n    \"\""
        : null
    icon_path:
        icons/: null
    Discretize: null
    orange.preprocess.discretize: null
    Discretization: null
    Discretize Continuous Variables: null
    Discretize.svg: null
    Continuize: null
    orange.preprocess.continuize: null
    Continuization: null
    Continuize Discrete Variables: null
    Continuize.svg: null
    Impute: null
    orange.preprocess.impute: null
    Impute Missing Values: null
    Impute.svg: null
    Feature Selection: null
    orange.preprocess.fss: null
    Select Relevant Features: null
    SelectColumns.svg: null
    Random Feature Selection: null
    orange.preprocess.randomfss: null
    Select Random Features: null
    SelectColumnsRandom.svg: null
    Normalize: null
    orange.preprocess.scale: null
    Normalize Features: null
    Normalize.svg: null
    orange.preprocess.randomize: null
    Randomization: null
    Random.svg: null
    Remove Sparse: null
    orange.preprocess.remove_sparse: null
    Remove Sparse Features: null
    PurgeDomain.svg: null
    orange.preprocess.pca: null
    Principal Component Analysis: null
    PCA.svg: null
    orange.preprocess.cur: null
    CUR Matrix Decomposition: null
    OWPreprocess:
        Preprocess: null
        Construct a data preprocessing pipeline.: null
        Transform: null
        icons/Preprocess.svg: null
        process: null
        Inputs:
            Data: null
        Outputs:
            Preprocessor: null
            Preprocessed Data: null
        __init__:
            mimeData:
                application/x-qwidget-ref: null
                utf-8: null
            Preprocessors: null
            Drag items from the list on the left: null
            autocommit: null
        load:
            '""Load a preprocessor list from a dict.""': null
            preprocessors: null
            dropMimeData:
                application/x-qwidget-ref: null
        save:
            '""Save the preprocessor list to a dict.""': null
            name: null
            preprocessors: null
        set_data:
            '""Set the input dataset.""': null
        storeSpecificSettings:
            '""Reimplemented.""': null
        saveSettings:
            '""Reimplemented.""': null
        migrate_settings:
            storedsettings: null
            preprocessors: null
            orange.preprocess.scale: null
            center: null
            scale: null
            Mean: null
            NoScaling: null
            NoCentering: null
            Std: null
            Span: null
            method: null
        send_report:
            Settings: null
    __main__: null
    brown-selected: null
Orange/widgets/data/owpythonscript.py:
    OWPythonScript:
        Python Script: null
        Write a Python script and run it on input data or models.: null
        Transform: null
        icons/PythonScript.svg: null
        program: null
        function: null
        Inputs:
            Data: null
            in_data: null
            Learner: null
            in_learner: null
            Classifier: null
            in_classifier: null
            Object: null
            in_object: null
        Outputs:
            Data: null
            out_data: null
            Learner: null
            out_learner: null
            Classifier: null
            out_classifier: null
            Object: null
            out_object: null
        data: null
        learner: null
        classifier: null
        object: null
        List[_ScriptData]: null
        name: null
        Table from numpy: null
        script: null
        filename: null
        __init__:
            Menlo: null
            darwin: null
            Courier: null
            win32: null
            cygwin: null
            DejaVu Sans Mono: null
            Editor: null
            darkMode: null
            Dark: null
            Light: null
            '0000': null
            Preferences: null
            vimModeEnabled: null
            Vim mode: null
            Only for the coolest.: null
            Library: null
            +: null
            Add a new script to the library: null
            MINUS SIGN: null
            Remove script from library: null
            Update: null
            Save changes in the editor to library: null
            More: null
            More actions: null
            Import Script from File: null
            Save Selected Script to File: null
            Undo Changes to Selected Script: null
            Run: null
            Run script: null
            '&Save': null
            Save script to file: null
            Console: null
        set_data:
            data: null
        insert_data:
            data: null
        remove_data:
            data: null
        set_learner:
            learner: null
        insert_learner:
            learner: null
        remove_learner:
            learner: null
        set_classifier:
            classifier: null
        insert_classifier:
            classifier: null
        remove_classifier:
            classifier: null
        set_object:
            object: null
        insert_object:
            object: null
        remove_object:
            object: null
        onAddScript:
            New script: null
        onAddScriptFromFile:
            Open Python Script: null
            ~/: null
            Python files (*.py)\nAll files(*.*): null
        saveScript:
            ~/: null
            Save Python Script: null
            Python files (*.py)\nAll files(*.*): null
            .py: null
            w: null
        initial_locals_state:
            in_: null
            s: null
        commit:
            _script: null
            \nRunning script:\n: null
            exec(_script): null
            out_: null
            '''{}'' has to be an instance of ''{}''.': null
        migrate_settings:
            libraryListSource: null
            scriptLibrary: null
    ? "\"\"import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable,\
        \ DiscreteVariable\n\ndomain = Domain([ContinuousVariable(\"age\"),\n    \
        \             ContinuousVariable(\"height\"),\n                 DiscreteVariable(\"\
        gender\", values=(\"M\", \"F\"))])\narr = np.array([\n  [25, 186, 0],\n  [30,\
        \ 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n\"\""
    : null
    read_file_content:
        utf-8: null
        strict: null
    ? '""

        Adapted from jupyter notebook, which was adapted from GitHub.


        Highlighting styles are applied with pygments.


        pygments does not support partial highlighting; on every character

        typed, it performs a full pass of the code. If performance is ever

        an issue, revert to prior commit, which uses Qutepart''s syntax

        highlighting implementation.

        ""'
    : null
    Light: null
    '#000': null
    '#f00': null
    'bold #008000': null
    '#212121': null
    '#00f': null
    '#05a': null
    '#aa22ff': null
    '#008000': null
    '#ba2121': null
    '#080': null
    'bold #aa22ff': null
    'italic #408080': null
    Dark: null
    '#fff': null
    'bold #4caf50': null
    '#e0e0e0': null
    '#1e88e5': null
    '#42a5f5': null
    '#43a047': null
    '#ff7070': null
    '#66bb6a': null
    make_pygments_style:
        ? "\"\"\n    Dynamically create a PygmentsStyle class,\n    given the name\
            \ of one of the above highlighting schemes.\n    \"\""
        : null
        PygmentsStyle: null
        styles: null
    FakeSignatureMixin:
        __init__:
            '4444': null
    FunctionSignature:
        __init__:
            python_script: null
            in_: null
            '<b style="color: ': null
            ' ': null
            ;">def </b>: null
            '<span style="color: ': null
            ;">: null
            </span>: null
            ;">(</span>: null
            ;">):</span>: null
        update_signal_text:
            ', ': null
            's, ': null
    ReturnStatement:
        __init__:
            '<b style="color: ': null
            ' ': null
            ;">return </b>: null
            out_: null
        make_signal_labels:
            <b></b>: null
            ', ': null
            '.QLabel { color: ': null
            ' ': null
            ; }: null
        update_signal_text:
            <b></b>: null
            <b>: null
            </b>: null
    VimIndicator:
        __init__:
            '#33cc33': null
            normal: null
    PythonConsole:
        interact:
            '>>> ': null
            '... ': null
            'Type "help", "copyright", "credits" or "license" ': null
            for more information.: null
            Python %s on %s\n%s\n(%s)\n: null
            '%s\n': null
            \n: null
            \nKeyboardInterrupt\n: null
        push:
            sys.excepthook: null
            sys.stdout: null
            sys.stderr: null
        keyPressEvent:
            \n: null
        _moveCursorToInputLine:
            ? "\"\"\n        Move the cursor to the input line if not already there.\
                \ If the cursor\n        if already in the input line (at position\
                \ greater or equal to\n        `newPromptPos`) it is left unchanged,\
                \ otherwise it is moved at the\n        end.\n\n        \"\""
            : null
        pasteCode:
            ? "\"\"\n        Paste source code into the console.\n        \"\""
            : null
            \n: null
        insertFromMimeData:
            ? "\"\"\n        Reimplemented from QPlainTextEdit.insertFromMimeData.\n\
                \        \"\""
            : null
    Script:
        asdict:
            _ScriptData: null
        fromdict:
            _ScriptData: null
            Script: null
            name: null
            script: null
            filename: null
    ScriptItemDelegate:
        displayText:
            '*': null
    select_row:
        ? "\"\"\n    Select a `row` in an item view\n    \"\""
        : null
    _ScriptData: null
    name: null
    script: null
    filename: null
    OWPythonScriptDropHandler:
        canDropFile:
            text/x-python: null
        parametersFromFile:
            rt: null
            _ScriptData: null
            name: null
            script: null
            filename: null
            __version__: null
            scriptLibrary: null
            scriptText: null
    __main__: null
Orange/widgets/data/owoutliers.py:
    run:
        Initializing...: null
    SVMEditor:
        __init__:
            'An upper bound on the fraction of training errors and a ': null
            lower bound of the fraction of support vectors: null
            'Nu:': null
            nu: null
            '%d %%': null
            gamma: null
            'Kernel coefficient:': null
        get_parameters:
            nu: null
            gamma: null
    CovarianceEditor:
        __init__:
            'Contamination:': null
            cont: null
            '%d %%': null
            empirical_covariance: null
            'Support fraction:': null
            support_fraction: null
        get_parameters:
            contamination: null
            support_fraction: null
    LocalOutlierFactorEditor:
        euclidean: null
        manhattan: null
        cosine: null
        jaccard: null
        hamming: null
        minkowski: null
        __init__:
            'Contamination:': null
            cont: null
            '%d %%': null
            n_neighbors: null
            'Neighbors:': null
            metric_index: null
            'Metric:': null
        get_parameters:
            n_neighbors: null
            contamination: null
            algorithm: null
            brute: null
            metric: null
    IsolationForestEditor:
        __init__:
            'Contamination:': null
            cont: null
            '%d %%': null
            replicable: null
            Replicable training: null
        get_parameters:
            contamination: null
            random_state: null
    OWOutliers:
        Outliers: null
        Detect outliers.: null
        icons/Outliers.svg: null
        Unsupervised: null
        inlier: null
        Inputs:
            Data: null
        Outputs:
            Inliers: null
            Outliers: null
            Data: null
        Warning:
            Too many features for covariance estimation.: null
        Error:
            Singular covariance matrix.: null
            Not enough memory: null
        init_gui:
            Method: null
            outlier_method: null
            auto_commit: null
        _init_editors:
            Parameters: null
        send_report:
            Data: null
            Input instances: null
            Inliers: null
            Outliers: null
            Detection: null
            Detection method: null
            One class SVM with non-linear kernel (RBF): null
            Regularization (nu): null
            nu: null
            Kernel coefficient: null
            gamma: null
            Covariance estimator: null
            Contamination: null
            contamination: null
            Support fraction: null
            support_fraction: null
            Local Outlier Factor: null
            Number of neighbors: null
            n_neighbors: null
            Metric: null
            metric: null
            Isolation Forest: null
        migrate_settings:
            svm_editor: null
            nu: null
            gamma: null
            empirical_covariance: null
            support_fraction: null
            cov_editor: null
            cont: null
    __main__: null
    iris: null
Orange/widgets/data/owrank.py:
    score_meta: null
    name: null
    shortname: null
    scorer: null
    problem_type: null
    is_default: null
    Information Gain: null
    Info. gain: null
    Information Gain Ratio: null
    Gain ratio: null
    Gini Decrease: null
    Gini: null
    ANOVA: null
    χ²: null
    ReliefF: null
    FCBF: null
    Univariate Regression: null
    Univar. reg.: null
    RReliefF: null
    TableModel:
        setExtremesFrom:
            '""Set extremes for columnn''s ratio bars from values""': null
            ignore: null
            .*All-NaN slice encountered.*: null
        resetSorting:
            ? "\"\"We don't want to invalidate our sort proxy model everytime we\n\
                \        wrap a new list. Our proxymodel only invalidates explicitly\n\
                \        (i.e. when new data is set)\"\""
            : null
        _argsortData:
            mergesort: null
    get_method_scores:
        ignore: null
        '%s doesn''t work on this data': null
        '%s had to be computed separately for each ': null
        variable: null
    get_scorer_scores:
        '%s doesn''t work on this data': null
        _: null
    OWRank:
        Rank: null
        Rank and filter data features by their relevance.: null
        icons/Rank.svg: null
        Inputs:
            Data: null
            Scorer: null
        Outputs:
            Reduced Data: null
            Scores: null
            Features: null
        Information:
            Data does not have a (single) target variable.: null
            Missing values will be imputed as needed.: null
        Error:
            Cannot handle target variable type {}: null
            'Scorer {} inadequate: {}': null
            Data does not have a single attribute.: null
        Warning:
            Variables with duplicated names have been renamed.: null
        __init__:
            Scoring Methods: null
            Select Attributes: null
            None: null
            All: null
            Manual: null
            'Best ranked:': null
            nSelected: null
            auto_apply: null
        switchProblemType:
            ? "\"\"\n        Switch between discrete/continuous/no_class mode\n  \
                \      \"\""
            : null
        handleNewSignals:
            Running: null
        on_done:
            '#': null
        send_report:
            Input: null
            Ranks: null
            '{:.3f}': null
            Output: null
        create_scores_table:
            Feature: null
            ', ': null
            Feature Scores: null
        migrate_settings:
            headerState: null
            sorting: null
    __main__: null
    heart_disease.tab: null
    Learner: null
    ? "\"\"\n    WidgetPreview(OWRank).run(\n        set_learner=(RandomForestLearner(),\
        \ (3, 'Learner', None)),\n        set_data=Table(\"heart_disease.tab\"))\n\
        \    \"\""
    : null
Orange/widgets/data/owcreateinstance.py:
    ContinuousVariableEditor:
        __init__:
            Min/Max cannot be NaN.: null
    TimeVariableEditor:
        yyyy-MM-dd: null
        hh:mm:ss: null
        __init__:
            '{TimeVariableEditor.DATE_FORMAT} ': null
            '{TimeVariableEditor.TIME_FORMAT}': null
    OWCreateInstance:
        Create Instance: null
        Interactively create a data instance from sample dataset.: null
        icons/CreateInstance.svg: null
        Transform: null
        simulator: null
        Inputs:
            Data: null
            Reference: null
        Outputs:
            Data: null
        Information:
            'Variables with only missing values were ': null
            removed from the list.: null
        median: null
        mean: null
        random: null
        input: null
        name: null
        Variable: null
        variable: null
        Value: null
        header: null
        __init__:
            Filter...: null
            buttonBox: null
            append_to_data: null
            Append this instance to input data: null
            auto_commit: null
        _initialize_values:
            median: null
            mean: null
            random: null
            input: null
        _create_data_from_values:
            created: null
        _append_to_data:
            Source ID: null
        send_report:
            Input: null
            Output: null
            '{var.name}:': null
            Values: null
    __main__: null
    housing: null
Orange/widgets/data/owdatasets.py:
    format_exception:
        \n: null
    UniformHeightDelegate:
        ? "\"\"\n    Item delegate that always includes the icon size in the size\
            \ hint.\n    \"\""
        : null
    OWDataSets:
        Datasets: null
        Load a dataset from an online repository: null
        icons/DataSets.svg: null
        orangecontrib.prototypes.widgets.owdatasets.OWDataSets: null
        online: null
        data sets: null
        https://datasets.biolab.si/: null
        datasets: null
        islocal: null
        label: null
        title: null
        Title: null
        size: null
        Size: null
        instances: null
        Instances: null
        variables: null
        Variables: null
        target: null
        Target: null
        tags: null
        Tags: null
        Error:
            Could not fetch dataset list: null
        Warning:
            'Could not fetch datasets list, only local ': null
            cached datasets are shown: null
        Outputs:
            Data: null
        '''': null
        __init__:
            label: null
            _header_index: null
            Search for data set ...: null
            Press Return or double-click to send: null
            Description: null
            splitter_state: null
            Initializing: null
        _parse_info:
            version: null
        create_model:
            ' ': null
            ', ': null
        __set_index:
            Error while fetching updated index: null
            X: null
            '888 bytes ': null
            '9999.9 MB ': null
            '100000000': null
            '1000000': null
        __update_cached_state:
            ' ': null
        selected_dataset:
            ? "\"\"\n        Return the current selected dataset info or None if not\
                \ selected\n\n        Returns\n        -------\n        info : Optional[Namespace]\n\
                \        \"\""
            : null
        commit:
            ? "\"\"\n        Commit a dataset to the output immediately (if available\
                \ locally) or\n        schedule download background and an eventual\
                \ send.\n\n        During the download the widget is in blocking state\n\
                \        (OWWidget.isBlocking)\n        \"\""
            : null
            Fetching...: null
        __commit_complete:
            'Error:': null
    variable_icon:
        categorical: null
        x: null
        numeric: null
    make_html_list:
        '"margin: 5px; text-indent: -40px; margin-left: 40px;"': null
        format_item:
            <p style={}><small>{}</small></p>: null
        \n: null
    description_html:
        ? "\"\"\n    Summarize a data info as a html fragment.\n    \"\""
        : null
        ' ({})': null
        ', from {}': null
        <b>{}</b>{}{}: null
        <p>{}</p>: null
        <small><b>See Also</b>\n: null
        </small>: null
        <small><b>References</b>\n: null
        \n: null
    __main__: null
Orange/widgets/data/owdatainfo.py:
    OWDataInfo:
        Data Info: null
        orange.widgets.data.info: null
        ? "\"\"Display basic information about the dataset, such\n    as the number\
            \ and type of variables in the columns and the number of rows.\"\""
        : null
        icons/DataInfo.svg: null
        Data: null
        information: null
        inspect: null
        Inputs:
            Data: null
        __init__:
            Data Set Name: null
            Data Set Size: null
            Features: null
            Targets: null
            Meta Attributes: null
            Location: null
            Data Attributes: null
            ' ': null
            _: null
            '%%(%s)s': null
            Categorical outcome with 123 values: null
        _set_fields:
            n_or_none:
                '-': null
            pack_table:
                <table>\n: null
                \n: null
                <tr><td align="right" width="90">{}:</td>\n: null
                <td width="40">{}</td></tr>\n: null
                '...': null
                </table>\n: null
            pack_counts:
                None: null
                Categorical: null
                Numeric: null
                Text: null
            features: null
            meta attributes: null
            targets: null
            '<p>Sparse representation: {}</p>': null
            ', ': null
            Rows: null
            ~{}: null
            Columns: null
            update_size:
                Rows: null
                Columns: null
            name: null
            N/A: null
            Numeric target variable: null
            Categorical outcome with {} values: null
            Multi-target data,\n{} categorical targets: null
            Multi-target data,\n{} numeric targets: null
            <p>Multi-target data</p>\n: null
            None: null
        _set_report:
            Name: null
            ' ': null
            '{}={}': null
            password: null
            Table '{}', using connection:\n{}: null
            Rows: null
            Data is stored in memory: null
            join_if:
                ', ': null
            Features: null
            '{} categorical': null
            '{} numeric': null
            Target: null
            categorical outcome '{}': null
            numeric target '{}': null
            '{number} categorical outcome{s}': null
            '{number} numeric target{s}': null
            Meta attributes: null
            '{} text': null
    __main__: null
    iris: null
Orange/widgets/data/owtranspose.py:
    OWTranspose:
        Transpose: null
        Transpose data table.: null
        Transform: null
        icons/Transpose.svg: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        Feature: null
        Warning:
            'Values are not unique.\nTo avoid multiple ': null
            'features with the same name, values \nof ': null
            '''{}'' have been augmented with indices.': null
            Categorical features have been encoded as numbers.: null
        Error:
            '{}': null
        __init__:
            feature_type: null
            Feature names: null
            Generic: null
            feature_name: null
            Type a prefix ...: null
            Custom feature name: null
            'From variable:': null
            feature_names_column: null
            remove_redundant_inst: null
            Remove redundant instance: null
        send_report:
            from variable: null
            '  ''{}''': null
            Feature names: null
            Data: null
    __main__: null
    iris: null
Orange/widgets/data/owsave.py:
    ~{os.sep}: null
    OWSave:
        Save Data: null
        Save data to an output file.: null
        icons/Save.svg: null
        Data: null
        export: null
        Inputs:
            Data: null
        Error:
            Use Pickle format for sparse data.: null
        __init__:
            add_type_annotations: null
            Add type annotations to header: null
            Some formats (Tab-delimited, Comma-separated) can include \n: null
            additional information about variables types in header rows.: null
        get_filters:
            write_file: null
            EXTENSIONS: null
            '{w.DESCRIPTION} (*{w.EXTENSIONS[0]})': null
            Compressed {w.DESCRIPTION} (*{w.EXTENSIONS[0]}.gz): null
        send_report:
            'No': null
            'Yes': null
            File name: null
            not set: null
            Format: null
            Type annotations: null
        migrate_settings:
            migrate_to_version_2:
                compression: null
                filter: null
                filetype: null
                compress: null
                .gz: null
            add_type_annotations: null
            stored_name: null
            .xlsx: null
        initial_start_dir:
            name: null
    __main__: null
    iris: null
Orange/widgets/data/owfeatureconstructor.py:
    ? '""

        Feature Constructor


        A widget for defining (constructing) new features from values

        of other variables.


        ""'
    : null
    FeatureDescriptor: null
    name: null
    expression: null
    ContinuousDescriptor: null
    number_of_decimals: null
    DateTimeDescriptor: null
    DiscreteDescriptor: null
    values: null
    ordered: null
    StringDescriptor: null
    selected_row:
        ? "\"\"\n    Return the index of selected row in a `view` (:class:`QListView`)\n\
            \n    The view's selection mode must be a QAbstractItemView.SingleSelction\n\
            \    \"\""
        : null
        invalid 'selectionMode': null
    FeatureEditor:
        ? '""

            Use variable names as values in expression.

            Categorical features are passed as strings

            (note the change in behaviour from Orange 3.30).


            ""'
        : null
        _: null
        str: null
        float: null
        int: null
        len: null
        abs: null
        max: null
        min: null
        __init__:
            Name...: null
            Expression...: null
            Select Feature: null
            Select Function: null
        setEditorData:
            Select Feature: null
        on_funcs_changed:
            atan2: null
            fmod: null
            ldexp: null
            log: null
            pow: null
            copysign: null
            hypot: null
            (,): null
            e: null
            pi: null
            (): null
    ContinuousFeatureEditor:
        A numeric expression\n\n: null
    DateTimeFeatureEditor:
        'Result must be a string in ISO-8601 format ': null
        (e.g. 2019-07-30T15:37:27 or a part thereof),\n: null
        or a number of seconds since Jan 1, 1970.: null
    DiscreteFeatureEditor:
        Result must be a string, if values are not explicitly given\n: null
        or a zero-based integer indices into a list of values given below.: null
        __init__:
            'If values are given, above expression must return zero-based ': null
            integer indices into that list.: null
            A, B ...: null
            Values (optional): null
        setEditorData:
            ', ': null
            ',': null
            '"\,': null
        editorData:
            '"(?<!\\),': null
            '"\,': null
            ',': null
    StringFeatureEditor:
        A string expression\n\n: null
    d: null
    c: null
    t: null
    s: null
    FeatureItemDelegate:
        displayText:
            ' := ': null
    freevars:
        ? "\"\"\n    Return names of all free variables in a parsed (expression) AST.\n\
            \n    Parameters\n    ----------\n    exp : ast.AST\n        An expression\
            \ ast (ast.parse(..., mode=\"single\"))\n    env : List[str]\n       \
            \ Environment\n\n    Returns\n    -------\n    freevars : List[str]\n\n\
            \    See also\n    --------\n    ast\n\n    \"\""
        : null
    FeatureConstructorHandler:
        '""Context handler that filters descriptors""': null
        is_valid_item:
            ? "\"\"Check if descriptor `item` can be used with given domain.\n\n \
                \       Return True if descriptor's expression contains only\n   \
                \     available variables and descriptors name does not clash with\n\
                \        existing variables.\n        \"\""
            : null
            eval: null
            __GLOBALS: null
    OWFeatureConstructor:
        Feature Constructor: null
        'Construct new features (data columns) from a set of ': null
        existing features in the input dataset.: null
        Transform: null
        icons/FeatureConstructor.svg: null
        function: null
        lambda: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        Error:
            Categorical feature {} needs more values.: null
            'Invalid expressions: {}.': null
        Warning:
            'Recently added variable has been renamed, ': null
            to avoid duplicates.\n: null
        __init__:
            Variable Definitions: null
            New: null
            Create a new variable: null
            Numeric: null
            X{}: null
            Categorical: null
            D{}: null
            Text: null
            S{}: null
            Date/Time: null
            T{}: null
            Duplicate Selected Variable: null
            Remove: null
            Remove selected variable: null
            Upgrade Expressions: null
            Send: null
        setDescriptors:
            ? "\"\"\n        Set a list of variable descriptors to edit.\n       \
                \ \"\""
            : null
        setData:
            '""Set the input dataset.""': null
        _validate_descriptors:
            validate:
                eval: null
            ', ': null
        send_report:
            categorical: null
            ' with values ': null
            ', ': null
            '''{val}''': null
            ; ordered: null
            numeric: null
            date/time: null
            text: null
            '{feature.expression} ({desc})': null
            Constructed feature{s}: null
        fix_expressions:
            Fix Expressions: null
            'This widget''s behaviour has changed. Values of categorical ': null
            'variables are now inserted as their textual representations ': null
            '(strings); previously they appeared as integer numbers, with an ': null
            attribute '.value' that contained the text.\n\n: null
            'The widget currently runs in compatibility mode. After ': null
            expressions are updated, manually check for their correctness.: null
            Update: null
            Cancel: null
            fixer:
                .value: null
                '{': null
                ', ': null
                '''{val}'': {i}': null
                '}}[{var.name}]': null
            '|': null
            '{var.name}': null
            '"(^|\W)(': null
            '")(\.value)?(\W|$)': null
        migrate_context:
            eval: null
            descriptors: null
            expressions_with_values: null
    validate_exp:
        ? "\"\"\n    Validate an `ast.AST` expression.\n\n    Only expressions with\
            \ no list,set,dict,generator comprehensions\n    are accepted.\n\n   \
            \ Parameters\n    ----------\n    exp : ast.AST\n        A parsed abstract\
            \ syntax tree\n\n    \"\""
        : null
        exp is not a 'ast.AST' instance: null
    sanitized_name:
        '"\W': null
        _: null
    bind_variable:
        ? "\"\"\n    (descriptor, env) ->\n        (descriptor, (instance -> value)\
            \ | (table -> value list))\n    \"\""
        : null
        nan: null
        eval: null
        NFKC: null
        _: null
    make_lambda:
        ? "\"\"\n    Create an lambda function from a expression AST.\n\n    Parameters\n\
            \    ----------\n    expression : ast.Expression\n        The body of\
            \ the lambda.\n    args : List[str]\n        A list of positional argument\
            \ names\n    env : Optional[Dict[str, Any]]\n        Extra environment\
            \ to capture in the lambda's closure.\n\n    Returns\n    -------\n  \
            \  func : types.FunctionType\n    \"\""
        : null
        __builtins__: null
        <lambda>: null
        eval: null
    Ellipsis: null
    'False': null
    None: null
    'True': null
    abs: null
    all: null
    any: null
    acsii: null
    bin: null
    bool: null
    bytearray: null
    bytes: null
    chr: null
    complex: null
    dict: null
    divmod: null
    enumerate: null
    filter: null
    float: null
    format: null
    frozenset: null
    getattr: null
    hasattr: null
    hash: null
    hex: null
    id: null
    int: null
    iter: null
    len: null
    list: null
    map: null
    memoryview: null
    next: null
    object: null
    oct: null
    ord: null
    pow: null
    range: null
    repr: null
    reversed: null
    round: null
    set: null
    slice: null
    sorted: null
    str: null
    tuple: null
    type: null
    zip: null
    _: null
    normalvariate: null
    gauss: null
    expovariate: null
    gammavariate: null
    betavariate: null
    lognormvariate: null
    paretovariate: null
    vonmisesvariate: null
    weibullvariate: null
    triangular: null
    uniform: null
    nanmean: null
    nanmin: null
    nanmax: null
    nansum: null
    nanstd: null
    nanmedian: null
    nancumsum: null
    nancumprod: null
    nanargmax: null
    nanargmin: null
    nanvar: null
    mean: null
    min: null
    max: null
    sum: null
    std: null
    median: null
    cumsum: null
    cumprod: null
    argmax: null
    argmin: null
    var: null
    FeatureFunc:
        ? "\"\"\n    Parameters\n    ----------\n    expression : str\n        An\
            \ expression string\n    args : List[Tuple[str, Orange.data.Variable]]\n\
            \        A list of (`name`, `variable`) tuples where `name` is the name\
            \ of\n        a variable as used in `expression`, and `variable` is the\
            \ variable\n        instance used to extract the corresponding column/value\
            \ from a\n        Table/Instance.\n    extra_env : Optional[Dict[str,\
            \ Any]]\n        Extra environment specifying constant values to be made\
            \ available\n        in expression. It must not shadow names in `args`\n\
            \    cast: Optional[Callable]\n        A function for casting the expressions\
            \ result to the appropriate\n        type (e.g. string representation\
            \ of date/time variables to floats)\n    \"\""
        : null
        __init__:
            eval: null
        __repr__:
            '{0.__name__}{1!r}': null
    __main__: null
    iris: null
Orange/widgets/data/owselectcolumns.py:
    source_model:
        ? "\"\" Return the source model for the Qt Item View if it uses\n    the QSortFilterProxyModel.\n\
            \    \"\""
        : null
    source_indexes:
        ? "\"\" Map model indexes through a views QSortFilterProxyModel\n    \"\""
        : null
    VariablesListItemModel:
        ? "\"\"\n    An Variable list item model specialized for Drag and Drop.\n\
            \    \"\""
        : null
        application/x-Orange-VariableListModelData: null
        mimeData:
            ? "\"\"\n        Reimplemented.\n\n        For efficiency reasons only\
                \ the variable instances are set on the\n        mime data (under\
                \ `'_items'` property)\n        \"\""
            : null
            '''': null
            _items: null
        dropMimeData:
            ? "\"\"\n        Reimplemented.\n        \"\""
            : null
            _items: null
    SelectAttributesDomainContextHandler:
        encode_setting:
            domain_role_hints: null
        decode_setting:
            domain_role_hints: null
        match:
            domain_role_hints: null
            available: null
        filter_value:
            domain_role_hints: null
    OWSelectAttributes:
        Select Columns: null
        'Select columns from the data table and assign them to ': null
        data features, classes or meta variables.: null
        Transform: null
        icons/SelectColumns.svg: null
        filter: null
        attributes: null
        target: null
        variable: null
        Inputs:
            Data: null
            Features: null
        Outputs:
            Data: null
            Features: null
        Warning:
            Features and data domain do not match: null
            Most widgets do not support multiple targets: null
        __init__:
            Ignored: null
            Features: null
            use_input_features: null
            Use input features: null
            Always use input features: null
            Target: null
            Metas: null
            '>': null
            Reset: null
            ignore_new_features: null
            Ignore new variables by default: null
            'When the widget receives data with additional columns ': null
            'they are added to the available attributes column if ': null
            <i>Ignore new variables by default</i> is checked.: null
            auto_commit: null
        __use_features_changed:
            use_features_box: null
        set_data:
            attribute: null
            class: null
            meta: null
            available: null
        restore_hints:
            ? "\"\"\n        Define hints for selected/unselected features.\n    \
                \    Rules:\n        - if context available, restore new features\
                \ based on checked/unchecked\n          ignore_new_features, context\
                \ hint should be took into account\n        - in no context, restore\
                \ features based on the domain (as selected)\n\n        Parameters\n\
                \        ----------\n        domain\n            Data domain\n\n \
                \       Returns\n        -------\n        Dictionary with hints about\
                \ order and model in which each feature\n        should appear\n \
                \       \"\""
            : null
            attribute: null
            meta: null
            class: null
            available: null
        update_domain_role_hints:
            ? "\"\" Update the domain hints to be stored in the widgets settings.\n\
                \        \"\""
            : null
            available: null
            attribute: null
            class: null
            meta: null
        selected_rows:
            ? "\"\" Return the selected rows in the view.\n        \"\""
            : null
        update_interface_state:
            '>': null
            <: null
        send_report:
            Input data: null
            Output data: null
            No changes.: null
            '%i (%s)': null
            ', ': null
            Removed: null
    __main__: null
    brown-selected: null
Orange/widgets/data/owaggregatecolumns.py:
    OWAggregateColumns:
        Aggregate Columns: null
        Compute a sum, max, min ... of selected columns.: null
        Transform: null
        icons/AggregateColumns.svg: null
        aggregate: null
        sum: null
        product: null
        max: null
        min: null
        mean: null
        median: null
        variance: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        Sum: null
        agg: null
        Product: null
        Min: null
        Max: null
        Mean: null
        Variance: null
        Median: null
        __init__:
            variables: null
            operation: null
            'Operator: ': null
            var_name: null
            'Variable name: ': null
        send_report:
            ', ': null
            '''{var.name}''': null
            ' and {len(self.variables) - 30} others': null
            ' and ''{self.variables[-1].name}''': null
            'Output:': null
            '''{self._new_var_name()}'' as {self.operation.lower()} of {var_list}': null
    __main__: null
    brown-selected: null
Orange/widgets/data/owcsvimport.py:
    ? '""

        CSV File Import Widget

        ----------------------


        ""'
    : null
    T: null
    K: null
    E: null
    OWCSVFileImport:
        CSV File Import: null
        Import a data table from a CSV formatted file.: null
        icons/CSVFile.svg: null
        Data: null
        file: null
        load: null
        read: null
        open: null
        csv: null
        Outputs:
            Data: null
            Loaded data set.: null
            Data Frame: null
        Error:
            Unexpected error: null
            Encoding error\n: null
            'The file might be encoded in an unsupported encoding or it ': null
            might be binary: null
        directory: null
        filter: null
        __init__:
            'File:': null
            recent-combo: null
            Recent files.: null
            Recent files…: null
            …: null
            Browse filesystem: null
            Import any file…: null
            Import relative to workflow file…: null
            Import a file within the workflow file directory: null
            basedir: null
            Info: null
            Load: null
            Import Options…: null
            'button-layout: {:d};': null
        workflowEnvChanged:
            basedir: null
        activate_recent:
            ? "\"\"\n        Activate an item from the recent list.\n        \"\""
            : null
        _browse_for_missing:
            accepted:
                text/plain: null
        _browse_dialog:
            Open Data File: null
            directory: null
            filter: null
            store_state:
                directory: null
                filter: null
        _might_be_binary_mb:
            The '{basename}' may be a binary file.\n: null
            Are you sure you want to continue?: null
        _path_must_be_relative_mb:
            Invalid path: null
            Selected path is not within '{prefix}': null
        browse:
            ? "\"\"\n        Open a file dialog and select a user specified file.\n\
                \        \"\""
            : null
            text/plain: null
            Import Options: null
        current_item:
            ? "\"\"\n        Return the current selected item (file) or None if there\
                \ is no\n        current item.\n        \"\""
            : null
        _activate_import_dialog:
            '""Activate the Import Options dialog for the  current item.""': null
            Import Options: null
            size: null
            store_size:
                size: null
        set_selected_file:
            ? "\"\"\n        Set the current selected filename path.\n        \"\""
            : null
        path: null
        options: null
        _local_settings:
            '""Return a QSettings instance with local persistent settings.""': null
            '{}.ini': null
        _add_recent:
            ? "\"\"\n        Add filename to the list of recent files.\n        \"\
                \""
            : null
        _note_recent:
            recent: null
            path: null
            options: null
        commit:
            ? "\"\"\n        Commit the current state and submit the load task for\
                \ execution.\n\n        Note\n        ----\n        Any existing pending\
                \ task is canceled.\n        \"\""
            : null
        __set_read_progress:
            qint64: null
        cancel:
            ? "\"\"\n        Cancel current pending or executing task.\n        \"\
                \""
            : null
            Cancelled: null
            <div>Cancelled<br/><small>Press 'Reload' to try again</small></div>: null
        __set_running_state:
            Running: null
            Restart: null
            '<div>Loading: <i>{}</i><br/>': null
        __clear_running_state:
            Reload: null
        __set_error_state:
            '<div><i>{basename}</i> was not loaded due to a text encoding ': null
            'error. The file might be saved in an unknown or invalid ': null
            encoding, or it might be a binary file.</div>: null
            '<div><i>{basename}</i> was not loaded due to an error:': null
            '<p style=''white-space: pre;''>{err}</p>': null
        onDeleteWidget:
            '""Reimplemented.""': null
        _update_status_messages:
            pluralize:
                s: null
            '{n_instances} row{plural_1}, ': null
            '{n_features} feature{plural_2}, ': null
            '{n_meta} meta{plural_3}': null
        itemsFromSettings:
            ? "\"\"\n        Return items from local history.\n        \"\""
            : null
            recent: null
            path: null
            options: null
            Could not reconstruct options for '%s': null
        _replacements:
            basedir: null
        _restoreState:
            Failed to restore '%s': null
        migrate_settings:
            compatibility_mode: null
            _session_items: null
            _session_items_v2: null
    dialect_eq:
        '""Compare 2 `csv.Dialect` instances for equality.""': null
    Options:
        ? "\"\"\n    Stored options for loading CSV-like file.\n\n    Arguments\n\
            \    ---------\n    encoding : str\n        A encoding to use for reading.\n\
            \    dialect : csv.Dialect\n        A csv.Dialect instance.\n    columntypes:\
            \ Iterable[Tuple[range, ColumnType]]\n        A list of column type ranges\
            \ specifying the types for columns.\n        Need not list all columns.\
            \ Columns not listed are assumed to have auto\n        type inference.\n\
            \    rowspec : Iterable[Tuple[range, RowSpec]]\n         A list of row\
            \ spec ranges.\n    decimal_separator : str\n        Decimal separator\
            \ - a single character string; default: `\".\"`\n    group_separator :\
            \ str\n        Thousands group separator - empty or a single character\
            \ string;\n        default: empty string\n    \"\""
        : null
        __init__:
            utf-8: null
            ColumnType: null
            .: null
        __eq__:
            ? "\"\"\n        Compare this instance to `other` for equality.\n    \
                \    \"\""
            : null
        __repr__:
            '{}{!r}': null
        as_dict:
            ? "\"\"\n        Return return Option parameters as plain types suitable\
                \ for\n        serialization (e.g JSON serializable).\n        \"\""
            : null
            encoding: null
            delimiter: null
            quotechar: null
            doublequote: null
            skipinitialspace: null
            quoting: null
            columntypes: null
            rowspec: null
            decimal_separator: null
            group_separator: null
        from_dict:
            ? "\"\"\n        Reconstruct a `Options` from a plain dictionary (see\
                \ :func:`as_dict`).\n        \"\""
            : null
            encoding: null
            delimiter: null
            quotechar: null
            doublequote: null
            quoting: null
            skipinitialspace: null
            columntypes: null
            rowspec: null
            decimal_separator: null
            .: null
            group_separator: null
        spec_as_encodable:
            start: null
            stop: null
            value: null
        spec_from_encodable:
            start: null
            stop: null
            value: null
    CSVImportDialog:
        ? "\"\"\n    A dialog for selecting CSV file import options.\n    \"\""
        : null
        __init__:
            dialog-button-box: null
        options:
            decimal: null
            group: null
        setPath:
            ? "\"\"\n        Set the preview path.\n        \"\""
            : null
        path:
            '""Return the preview path""': null
        reset:
            ? "\"\"\n        Reset the options to the state previously set with `setOptions`\n\
                \        effectively undoing any user modifications since then.\n\
                \        \"\""
            : null
        restoreDefaults:
            ? "\"\"\n        Restore the options to default state.\n        \"\""
            : null
            utf-8: null
        __update_preview:
            rb: null
    dialog_button_box_set_enabled:
        ? "\"\"\n    Disable/enable buttons in a QDialogButtonBox based on their role.\n\
            \n    All buttons except the ones with RejectRole or HelpRole are disabled.\n\
            \    \"\""
        : null
        __p_dialog_button_box_set_enabled: null
    VarPathItem:
        path:
            '""Return the resolved path or '''' if unresolved or missing""': null
        setPath:
            '""Set absolute path.""': null
        setVarPath:
            '""Set variable path item.""': null
        resolve:
            ? "\"\"\n        Resolve `vpath` item. This implementation dispatches\
                \ to parent model's\n        (:func:`VarPathItemModel.resolve`)\n\
                \        \"\""
            : null
        data:
            ${{{vpath.name}}}/{vpath.relpath}: null
            ' (missing)': null
    ImportItem:
        ? "\"\"\n    An item representing a file path and associated load options\n\
            \    \"\""
        : null
        fromPath:
            ImportItem: null
            ? "\"\"\n        Create a `ImportItem` from a local file system path.\n\
                \        \"\""
            : null
            ${{{path.name}}}/{path.relpath}: null
    text/csv: null
    Text - comma separated: null
    '*.csv': null
    '*': null
    text/tab-separated-values: null
    Text - tab separated: null
    '*.tsv': null
    text/plain: null
    Text - all files: null
    '*.txt': null
    FileDialog:
        filterStr:
            '{f.name} ({'', ''.join(f.globs)})': null
    default_options_for_mime_type:
        text/csv: null
        text/tab-separated-values: null
        utf-8: null
        utf-16: null
        iso8859-1: null
    sniff_csv_with_path:
        utf-8: null
        rt: null
    _open:
        ? "\"\"\n    Open a local file `path` for reading. The file may be gzip, bz2\
            \ or zip\n    compressed.\n\n    If a zip archive then a single archive\
            \ member is expected.\n\n    Parameters\n    ----------\n    path : str\n\
            \        File system path\n    mode : str\n        'r', 'rb' or 'rt'\n\
            \    encoding : Optional[str]\n        Optional text encoding, for opening\
            \ in text mode.\n\n    Returns\n    -------\n    stream: io.BaseIO\n \
            \       A stream opened for reading.\n    \"\""
        : null
        r: null
        rb: null
        rt: null
        .gz: null
        .bz2: null
        .xz: null
        .zip: null
        t: null
        Expected a single file in the archive.: null
    application/gzip: null
    application/zip: null
    application/x-xz: null
    application/x-bzip: null
    _mime_type_for_path:
        ? "\"\"\n    Return the mime type of the file on a local filesystem.\n\n \
            \   In case the path is a compressed file return the mime type of its\
            \ contents\n\n    Parameters\n    ----------\n    path : str\n       \
            \ Local filesystem path\n\n    Returns\n    -------\n    mimetype: QMimeType\n\
            \    \"\""
        : null
        rb: null
        '''': null
    '?': null
    .: null
    '~': null
    nan: null
    NAN: null
    NaN: null
    N/A: null
    n/a: null
    NA: null
    NaT: null
    NAT: null
    load_csv:
        dtype:
            float: null
            category: null
            object: null
        X.: null
        .: null
        decimal: null
        thousands: null
        float_precision: null
        high: null
        round_trip: null
        rb: null
        read: null
    guess_types:
        ? "\"\"\n    Guess data type for variables according to values.\n\n    Parameters\n\
            \    ----------\n    df\n        Data frame\n    dtypes\n        The dictionary\
            \ with data types set by user. We will guess values only\n        for\
            \ columns that does not have data type defined.\n    columns_ignored\n\
            \        List with indices of ignored columns. Ignored columns are skipped.\n\
            \n    Returns\n    -------\n    A data frame with changed dtypes according\
            \ to the strategy.\n    \"\""
        : null
    guess_data_type:
        ? "\"\"\n    Guess column types. Logic is same than in guess_data_type from\
            \ io_utils\n    module. This function only change the dtype of the column\
            \ such that later\n    correct Orange.data.variable is used.\n    Logic:\n\
            \    - if can converted to date-time (ISO) -> TimeVariable\n    - if numeric\
            \ (only numbers)\n        - only values {0, 1} or {1, 2} -> DiscreteVariable\n\
            \        - else -> ContinuousVariable\n    - if not numbers:\n       \
            \ - num_unique_values < len(data) ** 0.7 and < 100 -> DiscreteVariable\n\
            \        - else -> StringVariable\n\n    Parameters\n    ----------\n\
            \    col\n        Data column\n\n    Returns\n    -------\n    Data column\
            \ with correct dtype\n    \"\""
        : null
        parse_dates:
            ? "\"\"\n        This is an extremely fast approach to datetime parsing.\n\
                \        For large data, the same dates are often repeated. Rather\
                \ than\n        re-parse these, we store all unique dates, parse them,\
                \ and\n        use a lookup to convert all dates.\n        \"\""
            : null
        category: null
    clear_stack_on_cancel:
        ? "\"\"\n    A decorator that catches the TaskState.UserCancelException exception\n\
            \    and clears the exception's traceback to remove local references.\n\
            \n    Parameters\n    ----------\n    f : callable\n\n    Returns\n  \
            \  -------\n    wrapped : callable\n    \"\""
        : null
    TaskState:
        UserCancelException:
            '""User interrupt exception.""': null
        qint64: null
        emitProgressChangedOrCancel:
            ? "\"\"\n        Emit the progressChanged signal with `current` and `total`.\n\
                \        \"\""
            : null
    TextReadWrapper:
        ? "\"\"\n    TextIOWrapper reporting the read progress.\n\n    Assuming a\
            \ single forward read pass.\n    \"\""
        : null
    index_where:
        ? "\"\"\n    Return the (first) index of el in `iterable` where `pred(el)`\
            \ returns True.\n\n    If no element matches return `None`.\n    \"\""
        : null
    pandas_to_table:
        ? "\"\"\n    Convert a pandas.DataFrame to a Orange.data.Table instance.\n\
            \    \"\""
        : null
        str: null
        M8[ns]: null
        'Column ''{}'' with dtype: {} skipped.': null
    __main__: null
Orange/widgets/data/owtransform.py:
    OWTransform:
        Apply Domain: null
        Applies template domain on data table.: null
        Transform: null
        icons/Transform.svg: null
        transform: null
        Inputs:
            Data: null
            Template Data: null
        Outputs:
            Transformed Data: null
        Error:
            An error occurred while transforming data.\n{}: null
        __init__:
            Info: null
        set_input_label_text:
            No data on input.: null
            Input data with {:,} instances and {:,} features.: null
        set_template_label_text:
            No template data on input.: null
            Template domain applied.: null
            Template data includes {:,} features.: null
        set_output_label_text:
            Output data includes {:,} features.: null
        send_report:
            Data: null
            Template data: null
            Transformed data: null
    __main__: null
    iris: null
Orange/widgets/data/owselectrows.py:
    SelectRowsContextHandler:
        '""Context handler that filters conditions""': null
        is_valid_item:
            '""Return True if condition applies to a variable in given domain.""': null
        encode_setting:
            conditions: null
            x: null
        decode_setting:
            conditions: null
            x: null
            f: null
        match:
            conditions: null
        filter_value:
            conditions: null
    FilterDiscreteType:
        Equal: null
        NotEqual: null
        In: null
        IsDefined: null
    _plural:
        'is ': null
        'are ': null
        equals: null
        contains: null
        begins: null
        ends: null
    OWSelectRows:
        Select Rows: null
        Select rows from the data based on values of variables.: null
        icons/SelectRows.svg: null
        Transform: null
        filter: null
        Inputs:
            Data: null
        Outputs:
            Matching Data: null
            Unmatched Data: null
        equals: null
        is not: null
        is below: null
        is at most: null
        is greater than: null
        is at least: null
        is between: null
        is outside: null
        is defined: null
        is: null
        is one of: null
        is before: null
        is equal or before: null
        is after: null
        is equal or after: null
        contains: null
        begins with: null
        ends with: null
        All variables: null
        are defined: null
        All numeric variables: null
        All string variables: null
        Error:
            '{}': null
        __init__:
            Conditions: null
            Add Condition: null
            Add All Variables: null
            Remove All: null
            purge_attributes: null
            Remove unused features: null
            purge_classes: null
            Remove unused classes: null
            auto_commit: null
        add_row:
            ×: null
            '* {font-size: 16pt; color: palette(button-text) }': null
            '*:hover {color: palette(bright-text)}': null
        add_all:
            Remove existing filters: null
            'This will replace the existing filters with ': null
            filters for all variables.: null
        _get_lineedit_contents:
            controls: null
        _get_value_contents:
            controls: null
            ', ': null
            Type %s not supported.: null
        set_new_values:
            ' defined': null
            ' one of': null
            ' and ': null
        _values_to_floats:
            Some values could not be parsed as floats: null
            'in the current locale: {}': null
        commit:
            invalid operand: null
        send_report:
            No data.: null
            Data instances: null
            '{} {}': null
            is one of: null
            '{'', ''.join(valnames[:-1])} or {valnames[-1]}': null
            '{attr} is {valstr}': null
            '{attr} {name} {attr.values[value]}': null
            '{attr} {name} {'' and ''.join(map(repr, values))}': null
            '{attr} {name} {'' and ''.join(values)}': null
            Instances: null
            Condition: null
            ' AND ': null
            no conditions: null
            Data: null
            Matching data: null
            Non-matching data: null
            Output: null
            '{} instances': null
            None: null
        migrate_context:
            conditions: null
    CheckBoxPopup:
        __init__:
            ', ': null
    DateTimeWidget:
        set_format:
            yyyy-MM-dd hh:mm:ss: null
            '%Y-%m-%d %H:%M:%S': null
            yyyy-MM-dd: null
            '%Y-%m-%d': null
            hh:mm:ss: null
            '%H:%M:%S': null
    __main__: null
    heart_disease: null
Orange/widgets/data/owcolor.py:
    AttrDesc:
        ? "\"\"\n    Describes modifications that will be applied to variable.\n\n\
            \    Provides methods that return either the modified value or the original\n\
            \n    Attributes:\n        var (Variable): an instance of variable\n \
            \       new_name (str or `None`): a changed name or `None`\n    \"\""
        : null
        to_dict:
            rename: null
        from_dict:
            rename: null
    DiscAttrDesc:
        ? "\"\"\n    Describes modifications that will be applied to variable.\n\n\
            \    Provides methods that return either the modified value or the original\n\
            \n    Attributes:\n        var (DiscreteVariable): an instance of variable\n\
            \        name (str or `None`): a changed name or `None`\n        new_colors\
            \ (list of tuple or None): new colors as tuples (R, G, B)\n        new_values\
            \ (list of str or None): new names for values, if changed\n    \"\""
        : null
        to_dict:
            renamed_values: null
            colors: null
        from_dict:
            renamed_values: null
            '{var.name}: ': null
            renaming of values ignored due to duplicate names: null
            colors: null
    ContAttrDesc:
        ? "\"\"\n    Describes modifications that will be applied to variable.\n\n\
            \    Provides methods that return either the modified value or the original\n\
            \n    Attributes:\n        var (ContinuousVariable): an instance of variable\n\
            \        name (str or `None`): a changed name or `None`\n        palette_name\
            \ (str or None): name of palette or None if unmodified\n    \"\""
        : null
        create_variable:
            palette: null
        to_dict:
            colors: null
        from_dict:
            colors: null
    ColorTableModel:
        ? "\"\"\n    Base color model for discrete and continuous variables. The model\
            \ handles:\n    - the first column - variable name (including setData)\n\
            \    - flags\n    - row count, computed as len(attrdescs)\n\n    Attribute:\n\
            \        attrdescs (list of AttrDesc): attrdescs with user-defined changes\n\
            \    \"\""
        : null
    DiscColorTableModel:
        ? "\"\"\n    A model that stores the colors corresponding to values of discrete\n\
            \    variables. Colors are shown as decorations.\n    \"\""
        : null
    ContColorTableModel:
        ? "\"\"A model that stores the colors corresponding to values of discrete\n\
            \    variables. Colors are shown as decorations.\n\n    Attributes:\n\
            \        mouse_row (int): the row over which the mouse is hovering\n \
            \   \"\""
        : null
        data:
            _column2:
                Copy to all: null
    ColorTable:
        ? "\"\"\n    The base table view for discrete and continuous attributes.\n\
            \n    Sets the basic properties of the table and implementes mouseRelease\
            \ that\n    calls handle_click with appropriate index. It also prepares\
            \ a grid_deleagte\n    that is used in derived classes.\n    \"\""
        : null
    DiscreteTable:
        '""Table view for discrete variables""': null
        handle_click:
            ? "\"\"\n        Handle click events for the first column (call the edit\
                \ method)\n        and the second (call method for changing the palette)\n\
                \        \"\""
            : null
        change_color:
            '""Invoke palette editor and set the color""': null
    ContinuousTable:
        '""Table view for continuous variables""': null
        mouseMoveEvent:
            '""Store the hovered row index in the model, trigger viewport update""': null
        leaveEvent:
            '""Remove the stored the hovered row index, trigger viewport update""': null
        handle_click:
            '""Call the specific methods for handling clicks for each column""': null
    OWColor:
        Color: null
        Set color legend for variables.: null
        icons/Colors.svg: null
        Inputs:
            Data: null
        Outputs:
            Data: null
        __init__:
            Discrete Variables: null
            Numeric Variables: null
            Save: null
            Load: null
            Reset: null
            auto_apply: null
        save:
            File name: null
            Variable definitions (*.colors): null
            colorwidget/last-location: null
        _save_var_defs:
            w: null
            categorical: null
            numeric: null
        load:
            File name: null
            Variable definitions (*.colors): null
            File error: null
            File cannot be opened.: null
            Invalid file format.: null
        _parse_var_defs:
            categorical: null
            numeric: null
            rename: null
            Duplicated variable names: null
            Variables will not be renamed due to duplicated names.: null
            '''{name}''': null
            'Definition for variable {names[0]}, which does not ': null
            appear in the data, was ignored.\n: null
            'Definitions for variables ': null
            '{", ".join(names[:-1])} and {names[-1]}': null
            'Definitions for {", ".join(names[:4])} ': null
            and {len(names) - 4} other variables: null
            ', which do not appear in the data, were ignored.\n': null
            Invalid definitions: null
            \n: null
        _start_dir:
            basedir: null
            colorwidget/last-location: null
            ~{os.sep}: null
        send_report:
            '""Send report""': null
            _report_variables:
                was:
                    '{n} (was: {o})': null
                '    \n': null
                <td>{square(*color)} {was(value, old_value)}</td>: null
                <td colspan="{max_values}">: null
                '{pal.friendly_name}</td>': null
                '<tr style="height: 2em">\n': null
                '  <th style="text-align: right">{names}</th>': null
                '  {value_cols}\n': null
                </tr>\n: null
            Features: null
            Outcome: null
            s: null
            Meta attributes: null
            <tr><th>{name}</th></tr>{rows}: null
            <table>{table}</table>: null
    __main__: null
    heart_disease.tab: null
Orange/widgets/data/owdatasampler.py:
    OWDataSampler:
        Data Sampler: null
        'Randomly draw a subset of data points ': null
        from the input dataset.: null
        icons/DataSampler.svg: null
        Transform: null
        random: null
        Inputs:
            Data: null
        Outputs:
            Data Sample: null
            Remaining Data: null
        Information:
            Compatibility mode\n: null
            New versions of widget have swapped outputs for cross validation: null
        Warning:
            Stratification failed\n{}: null
            Sample is bigger than input: null
        Error:
            Number of subsets exceeds data size: null
            Sample can't be larger than data: null
            Data is too small to stratify: null
            Dataset is empty: null
        __init__:
            Sampling Type: null
            sampling_type: null
            'Fixed proportion of data:': null
            sampleSizePercentage: null
            '%d %%': null
            Fixed sample size: null
            sampleSizeNumber: null
            'Instances: ': null
            replacement: null
            Sample with replacement: null
            Cross validation: null
            'Number of subsets:': null
            number_of_folds: null
            selectedFold: null
            'Unused subset:': null
            'Selected subset:': null
            Bootstrap: null
            'Time:': null
            sampleSizeSqlTime: null
            ' sec': null
            Percentage: null
            sampleSizeSqlPercentage: null
            ' %': null
            Options: null
            use_seed: null
            Replicable (deterministic) sampling: null
            stratify: null
            Stratify sample (when possible): null
            sql_dl: null
            Download data to local memory: null
            Sample Data: null
        _update_sample_max_size:
            '""Limit number of instances to input size unless using replacement.""': null
        send_report:
            Random sample with {} % of data: null
            Random data instance: null
            Random sample with {} data instances: null
            ', with replacement': null
            '{self.number_of_folds}-fold cross-validation ': null
            'without subset #{self.selectedFold}': null
            Bootstrap: null
            Undefined: null
            ', stratified (if possible)': null
            ', deterministic': null
            Sampling type: null
            Input: null
            '{} instances': null
            Sample: null
            Remaining: null
        migrate_settings:
            sampling_type: null
            compatibility_mode: null
    SampleFoldIndices:
        __init__:
            ? "\"\"Samples data based on a number of folds.\n\n        Args:\n   \
                \         folds (int): Number of folds\n            stratified (bool):\
                \ Return stratified indices (if applicable).\n            random_state\
                \ (Random): An initial state for replicable random\n            behavior\n\
                \n        Returns:\n            tuple-of-arrays: A tuple of array\
                \ indices one for each fold.\n\n        \"\""
            : null
    SampleBootstrap:
        __call__:
            ? "\"\"Bootstrap indices\n\n        Args:\n            table: Not used\
                \ (but part of the signature)\n        Returns:\n            tuple\
                \ (out_of_sample, sample) indices\n        \"\""
            : null
    __main__: null
    iris: null
Orange/widgets/data/owfeaturestatistics.py:
    ? "\"\"\n\nTODO:\n  - Sorting by standard deviation: Use coefficient of variation\
        \ (std/mean)\n    or quartile coefficient of dispersion (Q3 - Q1) / (Q3 +\
        \ Q1)\n  - Standard deviation for nominal: try out Variation ratio (1 - n_mode/N)\n\
        \"\""
    : null
    _categorical_entropy:
        ? "\"\"Compute the entropy of a dense/sparse matrix, column-wise. Assuming\n\
            \    categorical values.\"\""
        : null
    format_time_diff:
        ? "\"\"Return an approximate human readable time difference between two dates.\n\
            \n    Parameters\n    ----------\n    start : int\n        Unix timestamp\n\
            \    end : int\n        Unix timestamp\n    round_up_after : int\n   \
            \     The number of time units before we round up to the next, larger\
            \ time\n        unit e.g. setting to 2 will allow up to 2 days worth of\
            \ hours to be\n        shown, after that the difference is shown in days.\
            \ Or put another way\n        we will show from 1-48 hours before switching\
            \ to days.\n\n    Returns\n    -------\n    str\n\n    \"\""
        : null
        ~%d years: null
        ~%d months: null
        ~%d weeks: null
        ~%d days: null
        ~%d hours: null
        ~%d minutes: null
        '%d seconds': null
    FeatureStatisticsTableModel:
        Columns:
            name:
                Name: null
                Distribution: null
                Mean: null
                Median: null
                Dispersion: null
                Min.: null
                Max.: null
                Missing: null
        __init__:
            ? "\"\"\n\n        Parameters\n        ----------\n        data : Optional[Table]\n\
                \        parent : Optional[QWidget]\n\n        \"\""
            : null
        _attr_indices:
            '""Get the indices of different attribute types eg. discrete.""': null
        __filter_attributes:
            '""Filter out variables which shouldn''t be visualized.""': null
        __compute_statistics:
            __mode:
                C: null
        get_statistics_matrix:
            ? "\"\"Get the numeric computed statistics in a single matrix. Optionally,\n\
                \        we can specify for which variables we want the stats. Also,\
                \ we can get\n        the string column names as labels if desired.\n\
                \n        Parameters\n        ----------\n        variables : Iterable[Union[Variable,\
                \ int, str]]\n            Return statistics for only the variables\
                \ specified. Accepts all\n            formats supported by `domain.index`\n\
                \        return_labels : bool\n            In addition to the statistics\
                \ matrix, also return string labels for\n            the columns of\
                \ the matrix e.g. 'Mean' or 'Dispersion', as specified\n         \
                \   in `Columns`.\n\n        Returns\n        -------\n        Union[Tuple[List[str],\
                \ np.ndarray], np.ndarray]\n\n        \"\""
            : null
        __compute_stat:
            ? "\"\"Apply functions to appropriate variable types. The default value\
                \ is\n        returned if there is no function defined for specific\
                \ variable types.\n        \"\""
            : null
        sortColumnData:
            ? "\"\"Prepare the arrays with which we will sort the rows. If we want\
                \ to\n        sort based on a single value e.g. the name, return a\
                \ 1d array.\n        Sometimes we may want to sort by multiple criteria,\
                \ comparing\n        continuous variances with discrete entropies\
                \ makes no sense, so we want\n        to group those variable types\
                \ together.\n        \"\""
            : null
        _sortColumnData:
            '""Allow sorting with 2d arrays.""': null
            Data should be at most 2-dimensional: null
        _argsortData:
            stable: null
            'We do not deal with non numeric values in sorting by ': null
            multiple values: null
            Add an empty column of zeros at index -2 to accomodate NaNs: null
        data:
            display:
                format_zeros:
                    '""Zeros should be handled separately as they cannot be negative.""': null
                    '{0:.{num_decimals}f}': null
                render_value:
                    ∞: null
                '#ccc': null
                '%.3g': null
                '%d (%d%%)': null
    FeatureStatisticsTableView:
        bind_histogram_aspect_ratio:
            ? "\"\"Force the horizontal and vertical header to maintain the defined\n\
                \        aspect ratio specified for the histogram.\"\""
            : null
        keep_row_centered:
            ? "\"\"When resizing the widget when scrolled further down, the\n    \
                \    positions of rows changes. Obviously, the user resized in order\
                \ to\n        better see the row of interest. This keeps that row\
                \ centered.\"\""
            : null
    NoFocusRectDelegate:
        '""Removes the light blue background and border on a focused item.""': null
    OWFeatureStatistics:
        Feature Statistics: null
        Show basic statistics for data features.: null
        icons/FeatureStatistics.svg: null
        Inputs:
            Data: null
        Outputs:
            Reduced Data: null
            Statistics: null
        __init__:
            None: null
            color_var: null
            'Color:': null
            auto_commit: null
        __restore_selection:
            '""Restore the selection on the table view from saved settings.""': null
        __restore_sorting:
            '""Restore the sort column and order from saved settings.""': null
        commit:
            Feature: null
            '%s (Feature Statistics)': null
        migrate_context:
            selected_rows: null
            selected_vars: null
    __main__: null
    iris: null
Orange/widgets/data/owselectbydataindex.py:
    OWSelectByDataIndex:
        Select by Data Index: null
        Match instances by index from data subset.: null
        Transform: null
        icons/SelectByDataIndex.svg: null
        Inputs:
            Data: null
            Data Subset: null
        Outputs:
            Matching Data: null
            Data: null
            Unmatched Data: null
            Annotated Data: null
        Warning:
            Input tables do not share any instances.: null
        __init__:
            Data: null
            Data Subset: null
        data_info_text:
            No data.: null
            '{}\n{} instances\n{} variables': null
        send_report:
            \n: null
            ', ': null
            Data: null
            Data Subset: null
    __main__: null
    iris.tab: null
Orange/widgets/data/utils/preprocess.py:
    BaseEditor:
        ? "\"\"\n    Base widget for editing preprocessor's parameters.\n    \"\""
        : null
        setParameters:
            ? "\"\"\n        Set parameters.\n\n        Parameters\n        ----------\n\
                \        params : dict\n            Parameters as a dictionary. It\
                \ is up to subclasses to\n            properly parse the contents.\n\
                \n        \"\""
            : null
        parameters:
            ? "\"\"Return the parameters as a dictionary.\n        \"\""
            : null
        createinstance:
            ? "\"\"\n        Create the Preprocessor instance given the stored parameters\
                \ dict.\n\n        Parameters\n        ----------\n        params\
                \ : dict\n            Parameters as returned by `parameters`.\n  \
                \      \"\""
            : null
    StandardItemModel:
        ? "\"\"\n    A QStandardItemModel improving support for internal row moves.\n\
            \n    The QStandardItemModel is missing support for explicitly moving\n\
            \    rows internally. Therefore to move a row it is first removed\n  \
            \  reinserted as an empty row and it's data repopulated.\n    This triggers\
            \ rowsRemoved/rowsInserted and dataChanged signals.\n    If an observer\
            \ is monitoring the model state it would see all the model\n    changes.\
            \ By using moveRow[s] only one `rowsMoved` signal is emitted\n    coalescing\
            \ all the updates.\n\n    .. note:: The semantics follow Qt5's QAbstractItemModel.moveRow[s]\n\
            \n    \"\""
        : null
        moveRow:
            ? "\"\"\n        Move sourceRow from sourceParent to destinationRow under\
                \ destParent.\n\n        Returns True if the row was successfully\
                \ moved; otherwise\n        returns false.\n\n        .. note:: Only\
                \ moves within the same parent are currently supported\n\n       \
                \ \"\""
            : null
            '`moveRow` did not succeed! Data model might be ': null
            in an inconsistent state.: null
        moveRows:
            ? "\"\"\n        Move count rows starting with the given sourceRow under\
                \ parent\n        sourceParent to row destRow under parent destParent.\n\
                \n        Return true if the rows were successfully moved; otherwise\n\
                \        returns false.\n\n        .. note:: Only moves within the\
                \ same parent are currently supported\n\n        \"\""
            : null
            '`moveRows` did not succeed! Data model might be ': null
            in an inconsistent state.: null
    Controller:
        ? "\"\"\n    Controller for displaying/editing QAbstractItemModel using SequenceFlow.\n\
            \n    It creates/deletes updates the widgets in the view when the model\n\
            \    changes, as well as interprets drop events (with appropriate mime\
            \ data)\n    onto the view, modifying the model appropriately.\n\n   \
            \ Parameters\n    ----------\n    view : SeqeunceFlow\n        The view\
            \ to control (required).\n    model : QAbstarctItemModel\n        A list\
            \ model\n    parent : QObject\n        The controller's parent.\n    \"\
            \""
        : null
        application/x-qwidget-ref: null
        setModel:
            ? "\"\"Set the model for the view.\n\n        :type model: QAbstarctItemModel.\n\
                \        \"\""
            : null
        model:
            ? "\"\"Return the model.\n        \"\""
            : null
        createWidgetFor:
            ? "\"\"\n        Create a QWidget instance for the index (:class:`QModelIndex`)\n\
                \        \"\""
            : null
        setWidgetData:
            ? "\"\"\n        Set/update the widget state from the model at index.\n\
                \        \"\""
            : null
        setModelData:
            ? "\"\"\n        Get the data from the widget state and set/update the\
                \ model at index.\n        \"\""
            : null
    SequenceFlow:
        ? "\"\"\n    A re-orderable list of widgets.\n    \"\""
        : null
        Frame:
            ? "\"\"\n        Widget frame with a handle.\n        \"\""
            : null
            __init__:
                Remove: null
        sizeHint:
            '""Reimplemented.""': null
        addWidget:
            ? "\"\"Add `widget` with `title` to list of widgets (in the last position).\n\
                \n        Parameters\n        ----------\n        widget : QWidget\n\
                \            Widget instance.\n        title : str\n            Widget\
                \ title.\n        \"\""
            : null
        insertWidget:
            ? "\"\"Insert `widget` with `title` at `index`.\n\n        Parameters\n\
                \        ----------\n        index : int\n            Position at\
                \ which the widget should be inserted.\n        widget : QWidget\n\
                \            Widget instance.\n        title : str\n            Widget\
                \ title.\n        \"\""
            : null
        removeWidget:
            ? "\"\"Remove widget from the list.\n\n        Parameters\n        ----------\n\
                \        widget : QWidget\n            Widget instance to remove.\n\
                \        \"\""
            : null
        clear:
            ? "\"\"Clear the list (remove all widgets).\n        \"\""
            : null
        widgets:
            ? "\"\"Return a list of all `widgets`.\n        \"\""
            : null
        indexOf:
            ? "\"\"Return the index (logical position) of `widget`\n        \"\""
            : null
        setTitle:
            ? "\"\"Set title for `widget` at `index`.\n        \"\""
            : null
        dropEvent:
            '""Reimplemented.""': null
            application/x-internal-move: null
        dragEnterEvent:
            '""Reimplemented.""': null
            application/x-internal-move: null
        dragMoveEvent:
            '""Reimplemented.""': null
        dragLeaveEvent:
            '""Reimplemented.""': null
        eventFilter:
            '""Reimplemented.""': null
        __startInternalDrag:
            application/x-internal-move: null
            '"': null
Orange/widgets/data/utils/histogram.py:
    BarItem:
        '""A single bar in a histogram representing one single target value.""': null
    ProportionalBarItem:
        ? "\"\"A bar that fills draws ``'BarItem'`` objects given some proportions.\n\
            \n    Parameters\n    ----------\n    distribution : np.ndarray\n    \
            \    Contains the counts of individual target values that belong to the\n\
            \        particular bin. This can have length 1 if there is no target\
            \ class.\n    colors : Optional[Iterable[QColor]]\n        If colors are\
            \ passed, they must match the shape of the distribution.\n        The\
            \ bars will be colored according to these values, where the indices\n\
            \        in the distribution must match the color indices.\n    bar_size\
            \ : Union[int, float]\n        The width of the bar.\n    height : Union[int,\
            \ float]\n        The height of the bar.\n\n    \"\""
        : null
        __init__:
            If colors are provided, they must match the shape of distribution: null
        _draw_bars:
            '#ccc': null
    Histogram:
        ? "\"\"A basic histogram widget.\n\n    Parameters\n    ----------\n     \
            \   data : Table\n        variable : Union[int, str, Variable]\n     \
            \   parent : QObject\n        height : Union[int, float]\n        width\
            \ : Union[int, float]\n        side_padding : Union[int, float]\n    \
            \        Specify the padding between the edges of the histogram and the\n\
            \            first and last bars.\n        top_padding : Union[int, float]\n\
            \            Specify the padding between the top of the histogram and\
            \ the\n            highest bar.\n        bar_spacing : Union[int, float]\n\
            \            Specify the amount of spacing to place between individual\
            \ bars.\n        border : Union[Tuple[Union[int, float]], int, float]\n\
            \            Can be anything that can go into the ``'QColor'`` constructor.\n\
            \            Draws a border around the entire histogram in a given color.\n\
            \        border_color : Union[QColor, str]\n        class_index : int\n\
            \            The index of the target variable in ``'data'``.\n       \
            \ n_bins : int\n\n    \"\""
        : null
        __init__:
            '#000': null
            Border tuple must be of size 4.: null
        _get_histogram_edges:
            ? "\"\"Get the edges in the histogram based on the attribute type.\n\n\
                \        In case of a continuous variable, we split the variable range\
                \ into\n        n bins. In case of a discrete variable, bins don't\
                \ make sense, so we\n        just return the attribute values.\n\n\
                \        This will return the staring and ending edge, not just the\
                \ edges in\n        between (in the case of a continuous variable).\n\
                \n        Returns\n        -------\n        np.ndarray\n\n       \
                \ \"\""
            : null
        _get_bin_distributions:
            ? "\"\"Compute the distribution of instances within bins.\n\n        Parameters\n\
                \        ----------\n        bin_indices : np.ndarray\n          \
                \  An array with same shape as `x` but containing the bin index of\
                \ the\n            instance.\n\n        Returns\n        -------\n\
                \        np.ndarray\n            A 2d array; the first dimension represents\
                \ different bins, the\n            second - the counts of different\
                \ target values.\n\n        \"\""
            : null
        _histogram:
            Cannot calculate histogram on empty array: null
        _get_colors:
            '""Compute colors for different kinds of histograms.""': null
            '#ccc': null
    __main__: null
    iris: null
    '#000': null
Orange/widgets/data/utils/pythoneditor/rectangularselection.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
    RectangularSelection:
        ? "\"\"This class does not replresent any object, but is part of Qutepart\n\
            \    It just groups together Qutepart rectangular selection methods and\
            \ fields\n    \"\""
        : null
        text/rectangular-selection: null
        _reset:
            ? "\"\"Cursor moved while Alt is not pressed, or text modified.\n    \
                \    Reset rectangular selection\"\""
            : null
        isDeleteKeyEvent:
            '""Check if key event should be handled as Delete command""': null
        delete:
            '""Del or Backspace pressed. Delete selection""': null
        isExpandKeyEvent:
            '""Check if key event should expand rectangular selection""': null
        onExpandKeyEvent:
            '""One of expand selection key events""': null
        _visibleCharPositionGenerator:
            \t: null
        _realToVisibleColumn:
            ? "\"\"If \\t is used, real position of symbol in block and visible position\
                \ differs\n        This function converts real to visible\n      \
                \  \"\""
            : null
        _visibleToRealColumn:
            ? "\"\"If \\t is used, real position of symbol in block and visible position\
                \ differs\n        This function converts visible to real.\n     \
                \   Bigger value is returned, if visiblePos is in the middle of \\\
                t, None if text is too short\n        \"\""
            : null
            \t: null
        cursors:
            ? "\"\"Cursors for rectangular selection.\n        1 cursor for every\
                \ line\n        \"\""
            : null
            Rectangular selection area is too big: null
        selections:
            '""Build list of extra selections for rectangular selection""': null
        isActive:
            '""Some rectangle is selected""': null
        copy:
            '""Copy to the clipboard""': null
            \n: null
            utf8: null
        cut:
            ? "\"\"Cut action. Copy and delete\n        \"\""
            : null
        _indentUpTo:
            ? "\"\"Add space to text, so text width will be at least width.\n    \
                \    Return text, which must be added\n        \"\""
            : null
            \t: null
            ' ': null
        paste:
            ? "\"\"Paste recrangular selection.\n        Add space at the beginning\
                \ of line, if necessary\n        \"\""
            : null
            utf8: null
Orange/widgets/data/utils/pythoneditor/completer.py:
    module: null
    class: null
    instance: null
    function: null
    param: null
    path: null
    keyword: null
    property: null
    statement: null
    HTMLDelegate:
        ? "\"\"With this delegate, a QListWidgetItem or a QTableItem can render HTML.\n\
            \n    Taken from https://stackoverflow.com/a/5443112/2399799\n    \"\""
        : null
    CompletionWidget:
        ? "\"\"\n    Modelled after spyder-ide's ComlpetionWidget.\n    Copyright\
            \ © Spyder Project Contributors\n    Licensed under the terms of the MIT\
            \ License\n    (see spyder/__init__.py in spyder-ide/spyder for details)\n\
            \    \"\""
        : null
        __init__:
            QListWidget::item:selected {: null
            'background-color: lightgray;': null
            '}': null
        setup_appearance:
            '""Setup size and font of the completion widget.""': null
        is_empty:
            '""Check if widget is empty.""': null
        show_list:
            '""Show list corresponding to position.""': null
            point: null
        set_language:
            '""Set the completion language.""': null
        update_list:
            ? "\"\"\n        Update the displayed list by filtering self.completion_list\
                \ based on\n        the current_word under the cursor (see check_can_complete).\n\
                \n        If we're not updating the list with new completions, we\
                \ filter out\n        textEdit completions, since it's difficult to\
                \ apply them correctly\n        after the user makes edits.\n\n  \
                \      If no items are left on the list the autocompletion should\
                \ stop\n        \"\""
            : null
            end: null
            start: null
            text: null
        _get_cached_icon:
            '%s is not a valid jedi type': null
            ..: null
            icons: null
            pythonscript: null
            .svg: null
        set_item_display:
            '""Set item text & icons using the info available.""': null
            text: null
            type: null
        get_html_item_representation:
            '""Get HTML representation of and item.""': null
            <table width=": null
            '" height="': null
            '">': null
            <tr>: null
            '<td valign="middle" style="color: black;" style="margin-left:22px;">': null
            ' ': null
            '&nbsp;': null
            </td>: null
            '<td valign="middle" align="right" float="right" ': null
            'style="color: black;">': null
            </tr>: null
            </table>: null
        hide:
            '""Override Qt method.""': null
            tooltip_widget: null
        keyPressEvent:
            '""Override Qt method to process keypress.""': null
            .: null
            ':': null
        is_up_to_date:
            ? "\"\"\n        Check if the selection is up to date.\n        \"\""
            : null
            text: null
        check_can_complete:
            '""Check if current_word matches filter_text.""': null
        is_position_correct:
            '""Check if the position is correct.""': null
        update_current:
            ? "\"\"\n        Update the displayed list.\n        \"\""
            : null
        focusOutEvent:
            '""Override Qt method.""': null
            darwin: null
        item_selected:
            '""Perform the item selected action.""': null
        trigger_completion_hint:
            point: null
            textEdit: null
            newText: null
            insertText: null
            $: null
            python: null
            (: null
            documentation: null
    Completer:
        ? "\"\"\n    Uses qtconsole's kernel to generate jedi completions, showing\
            \ a list.\n    \"\""
        : null
        terminate:
            ? "\"\"Object deleted. Cancel timer\n        \"\""
            : null
        invokeCompletion:
            '""Invoke completion manually""': null
        _complete:
            ? "\"\" Performs completion at the current cursor location.\n        \"\
                \""
            : null
        _send_completion_request:
            complete: null
        _CompletionRequest: null
        id: null
        code: null
        pos: null
        _handle_complete_reply:
            ? "\"\"Support Jupyter's improved completion machinery.\n        \"\""
            : null
            complete: null
            parent_header: null
            msg_id: null
            content: null
            metadata: null
            _jupyter_types_experimental: null
            Jupyter API has changed, completions are unavailable.: null
            cursor_start: null
            type: null
            <unknown>: null
        _handle_kernel_info_reply:
            ? "\"\" Called when the KernelManager channels have started listening\
                \ or\n            when the frontend is assigned an already listening\
                \ KernelManager.\n        \"\""
            : null
Orange/widgets/data/utils/pythoneditor/lines.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
    _atomicModification:
        ? "\"\"Decorator\n    Make document modification atomic\n    \"\""
        : null
    Lines:
        ? "\"\"list-like object for access text document lines\n    \"\""
        : null
        _toList:
            ? "\"\"Convert to Python list\n        \"\""
            : null
        __str__:
            ? "\"\"Serialize\n        \"\""
            : null
        __len__:
            ? "\"\"Get lines count\n        \"\""
            : null
        _checkAndConvertIndex:
            ? "\"\"Check integer index, convert from less than zero notation\n   \
                \     \"\""
            : null
            Invalid block index: null
        __getitem__:
            ? "\"\"Get item by index\n        \"\""
            : null
        __setitem__:
            ? "\"\"Set item by index\n        \"\""
            : null
            Attempt to replace %d lines with %d lines: null
        __delitem__:
            ? "\"\"Delete item by index\n        \"\""
            : null
        _Iterator:
            ? "\"\"Blocks iterator. Returns text\n        \"\""
            : null
        __iter__:
            ? "\"\"Return iterator object\n        \"\""
            : null
        append:
            ? "\"\"Append line to the end\n        \"\""
            : null
        insert:
            ? "\"\"Insert line to the document\n        \"\""
            : null
            Invalid block index: null
Orange/widgets/data/utils/pythoneditor/indenter.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
    Indenter:
        ? "\"\"Qutepart functionality, related to indentation\n\n    Public attributes:\n\
            \        width           Indent width\n        useTabs         Indent\
            \ uses Tabs (instead of spaces)\n    \"\""
        : null
        text:
            ? "\"\"Get indent text as \\t or string of spaces\n        \"\""
            : null
            \t: null
            ' ': null
        triggerCharacters:
            '""Trigger characters for smart indentation""': null
        autoIndentBlock:
            \n: null
            ? "\"\"Indent block after Enter pressed or trigger character typed\n \
                \       \"\""
            : null
        onChangeSelectedBlocksIndent:
            ? "\"\"Tab or Space pressed and few blocks are selected, or Shift+Tab\
                \ pressed\n        Insert or remove text from the beginning of blocks\n\
                \        \"\""
            : null
            indentBlock:
                ' ': null
            spacesCount:
                ' ': null
            unIndentBlock:
                \t: null
        onShortcutIndentAfterCursor:
            ? "\"\"Tab pressed and no selection. Insert text after cursor\n      \
                \  \"\""
            : null
            insertIndent:
                \t: null
                ' ': null
        onShortcutUnindentWithBackspace:
            ? "\"\"Backspace pressed, unindent\n        \"\""
            : null
        onAutoIndentTriggered:
            ? "\"\"Indent current line or selected lines\n        \"\""
            : null
    IndentAlgBase:
        ? "\"\"Base class for indenters\n    \"\""
        : null
        indentBlock:
            ? "\"\"Indent the block\n        \"\""
            : null
        computeIndent:
            ? "\"\"Compute indent for the block.\n        Basic alorightm, which knows\
                \ nothing about programming languages\n        May be used by child\
                \ classes\n        \"\""
            : null
            \n: null
        computeSmartIndent:
            ? "\"\"Compute smart indent.\n        Block is current block.\n      \
                \  Char is typed character. \\n or one of trigger chars\n        Return\
                \ indentation text, or None, if indentation shall not be modified\n\
                \n        Implementation might return self._prevNonEmptyBlockIndent(),\
                \ if doesn't have\n        any ideas, how to indent text better\n\
                \        \"\""
            : null
        _qpartIndent:
            ? "\"\"Return text previous block, which is non empty (contains something,\
                \ except spaces)\n        Return '', if not found\n        \"\""
            : null
        _increaseIndent:
            ? "\"\"Add 1 indentation level\n        \"\""
            : null
        _decreaseIndent:
            ? "\"\"Remove 1 indentation level\n        \"\""
            : null
        _makeIndentFromWidth:
            ? "\"\"Make indent text with specified with.\n        Contains width count\
                \ of spaces, or tabs and spaces\n        \"\""
            : null
            \t: null
            ' ': null
        _makeIndentAsColumn:
            ? "\"\" Make indent equal to column indent.\n        Shiftted by offset\n\
                \        \"\""
            : null
            \t: null
        _setBlockIndent:
            ? "\"\"Set blocks indent. Modify text in qpart\n        \"\""
            : null
        iterateBlocksFrom:
            ? "\"\"Generator, which iterates QTextBlocks from block until the End\
                \ of a document\n        But, yields not more than MAX_SEARCH_OFFSET_LINES\n\
                \        \"\""
            : null
        iterateBlocksBackFrom:
            ? "\"\"Generator, which iterates QTextBlocks from block until the Start\
                \ of a document\n        But, yields not more than MAX_SEARCH_OFFSET_LINES\n\
                \        \"\""
            : null
        findBracketBackward:
            ? "\"\"Search for a needle and return (block, column)\n        Raise ValueError,\
                \ if not found\n        \"\""
            : null
            (: null
            ): null
            '[': null
            ']': null
            '{': null
            '}': null
            Invalid bracket "%s": null
            Not found: null
        findAnyBracketBackward:
            ? "\"\"Search for a needle and return (block, column)\n        Raise ValueError,\
                \ if not found\n\n        NOTE this methods ignores strings and comments\n\
                \        \"\""
            : null
            (): null
            '[]': null
            '{}': null
            Not found: null
        _nextNonSpaceColumn:
            ? "\"\"Returns the column with a non-whitespace characters\n        starting\
                \ at the given cursor position and searching forwards.\n        \"\
                \""
            : null
    IndentAlgPython:
        ? "\"\"Indenter for Python language.\n    \"\""
        : null
        _computeSmartIndent:
            ? "\"\"Compute smart indent for case when cursor is on (block, column)\n\
                \        \"\""
            : null
            ? "\"\"Move initial search position to bracket start, if bracket was closed\n\
                \        l = [1,\n             2]|\n        \"\""
            : null
            )]}: null
            ? "\"\"Unindent if hanging indentation finished\n        func(a,\n   \
                \          another_func(a,\n                          b),|\n     \
                \   \"\""
            : null
            ',': null
            ? "\"\"Check hanging indentation\n        call_func(x,\n             \
                \     y,\n                  z\n        But\n        call_func(x,\n\
                \            y,\n            z\n        \"\""
            : null
            continue: null
            break: null
            pass: null
            raise: null
            return: null
            'raise ': null
            'return ': null
            ? "\"\"\n        for:\n\n        func(a,\n             b):\n        \"\
                \""
            : null
            ':': null
            ? "\"\" Generally, when a brace is on its own at the end of a regular\
                \ line\n        (i.e a data structure is being started), indent is\
                \ wanted.\n        For example:\n        dictionary = {\n        \
                \    'foo': 'bar',\n        }\n        \"\""
            : null
            '{[': null
Orange/widgets/data/utils/pythoneditor/vim.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
    a: null
    z: null
    Key_: null
    _: null
    isChar:
        ? "\"\" Check if an event may be a typed character\n    \"\""
        : null
        ' ': null
    normal: null
    insert: null
    replace character: null
    '#33cc33': null
    '#ff9900': null
    '#ff3300': null
    Vim:
        ? "\"\"Vim mode implementation.\n    Listens events and does actions\n   \
            \ \"\""
        : null
        keyPressEvent:
            ? "\"\"Check the event. Return True if processed and False otherwise\n\
                \        \"\""
            : null
        extraSelections:
            ? "\"\" In normal mode - QTextEdit.ExtraSelection which highlightes the\
                \ cursor\n        \"\""
            : null
            '#ffcc22': null
            '#000000': null
    Insert:
        '#ff9900': null
        text:
            insert: null
    ReplaceChar:
        '#ee7777': null
        text:
            replace char: null
    Replace:
        '#ee7777': null
        text:
            replace: null
    BaseCommandMode:
        ? "\"\" Base class for Normal and Visual modes\n    \"\""
        : null
        gg: null
        _moveCursor:
            ? "\"\" Move cursor.\n        Used by Normal and Visual mode\n       \
                \ \"\""
            : null
            gg: null
            'Not expected motion ': null
        _iterateDocumentCharsForward:
            ? "\"\"Traverse document forward. Yield (block, columnIndex, char)\n \
                \       Raise _TimeoutException if time is over\n        \"\""
            : null
        _iterateDocumentCharsBackward:
            ? "\"\"Traverse document forward. Yield (block, columnIndex, char)\n \
                \       Raise _TimeoutException if time is over\n        \"\""
            : null
        _resetSelection:
            ? "\"\" Reset selection.\n        If moveToTop is True - move cursor to\
                \ the top position\n        \"\""
            : null
    BaseVisual:
        '#6699ff': null
        _processChar:
            gg: null
            \n: null
        _selectedLinesRange:
            ? "\"\" Selected lines range for line manipulation methods\n        \"\
                \""
            : null
        cmdJoinLines:
            ' ': null
        cmdInternalPaste:
            \n: null
    Visual:
        visual: null
    VisualLines:
        visual lines: null
    Normal:
        '#33cc33': null
        normal: null
        _processChar:
            gg: null
        _repeat:
            ? "\"\" Repeat action 1 or more times.\n        If more than one - do\
                \ it as 1 undoble action\n        \"\""
            : null
        cmdJoinLines:
            ' ': null
        cmdInternalPaste:
            \n: null
        cmdSubstitute:
            ? "\"\" s\n        \"\""
            : null
        cmdSubstituteLines:
            ? "\"\" S\n        \"\""
            : null
        cmdDelete:
            ? "\"\" x\n        \"\""
            : null
        cmdDeleteUntilEndOfBlock:
            ? "\"\" C and D\n        \"\""
            : null
        cmdCompositeDelete:
            gg: null
Orange/widgets/data/utils/pythoneditor/editor.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
    iterateBlocksFrom:
        ? "\"\"Generator, which iterates QTextBlocks from block until the End of a\
            \ document\n    \"\""
        : null
    iterateBlocksBackFrom:
        ? "\"\"Generator, which iterates QTextBlocks from block until the Start of\
            \ a document\n    \"\""
        : null
    PythonEditor:
        e: null
        w: null
        n: null
        \n: null
        __init__:
            ? "\"\"Sometimes color themes will be supported.\n        Now black on\
                \ white is hardcoded in the highlighters.\n        Hardcode same palette\
                \ for not highlighted text\n        \"\""
            : null
            darkMode: null
            '#111111': null
            '#ffffff': null
            '#444444': null
            '#000000': null
            '#ffee00': null
        _initActions:
            ? "\"\"Init shortcuts for text editing\n        \"\""
            : null
            createAction:
                ? "\"\"Create QAction with given parameters and add to the widget\n\
                    \            \"\""
                : null
            Toggle comment line: null
            Ctrl+/: null
            Scroll up: null
            Ctrl+Up: null
            go-up: null
            Scroll down: null
            Ctrl+Down: null
            go-down: null
            Select and scroll Up: null
            Ctrl+Shift+Up: null
            Select and scroll Down: null
            Ctrl+Shift+Down: null
            Increase indentation: null
            Tab: null
            format-indent-more: null
            Decrease indentation: null
            Shift+Tab: null
            format-indent-less: null
            Autoindent line: null
            Ctrl+I: null
            Indent with 1 space: null
            Ctrl+Shift+Space: null
            Unindent with 1 space: null
            Ctrl+Shift+Backspace: null
            Undo: null
            edit-undo: null
            Redo: null
            edit-redo: null
            Move line up: null
            Alt+Up: null
            Move line down: null
            Alt+Down: null
            Delete line: null
            Alt+Del: null
            edit-delete: null
            Cut line: null
            Alt+X: null
            edit-cut: null
            Copy line: null
            Alt+C: null
            edit-copy: null
            Paste line: null
            Alt+V: null
            edit-paste: null
            Duplicate line: null
            Alt+D: null
        _onToggleCommentLine:
            isHashCommentSelected:
                '#': null
            '# ': null
        _onShortcutScroll:
            ? "\"\"Ctrl+Up/Down pressed, scroll viewport\n        \"\""
            : null
        _onShortcutSelectAndScroll:
            ? "\"\"Ctrl+Shift+Up/Down pressed.\n        Select line and scroll viewport\n\
                \        \"\""
            : null
        _onShortcutHome:
            ? "\"\"Home pressed. Run a state machine:\n\n            1. Not at the\
                \ line beginning. Move to the beginning of the line or\n         \
                \      the beginning of the indent, whichever is closest to the current\n\
                \               cursor position.\n            2. At the line beginning.\
                \ Move to the beginning of the indent.\n            3. At the beginning\
                \ of the indent. Go to the beginning of the block.\n            4.\
                \ At the beginning of the block. Go to the beginning of the indent.\n\
                \        \"\""
            : null
        _selectLines:
            ? "\"\"Select whole lines\n        \"\""
            : null
        _selectedBlocks:
            ? "\"\"Return selected blocks and tuple (startBlock, endBlock)\n     \
                \   \"\""
            : null
        _selectedBlockNumbers:
            ? "\"\"Return selected block numbers and tuple (startBlockNumber, endBlockNumber)\n\
                \        \"\""
            : null
        _onShortcutMoveLine:
            ? "\"\"Move line up or down\n        Actually, not a selected text, but\
                \ next or previous block is moved\n        TODO keep bookmarks when\
                \ moving\n        \"\""
            : null
        _selectedLinesSlice:
            ? "\"\"Get slice of selected lines\n        \"\""
            : null
        _onShortcutDeleteLine:
            ? "\"\"Delete line(s) under cursor\n        \"\""
            : null
        _onShortcutCopyLine:
            ? "\"\"Copy selected lines to the clipboard\n        \"\""
            : null
        _onShortcutPasteLine:
            ? "\"\"Paste lines from the clipboard\n        \"\""
            : null
        _onShortcutCutLine:
            ? "\"\"Cut selected lines to the clipboard\n        \"\""
            : null
        _onShortcutDuplicateLine:
            ? "\"\"Duplicate selected text or current line\n        \"\""
            : null
        _onCompletion:
            ? "\"\"Ctrl+Space handler.\n        Invoke completer if so configured\n\
                \        \"\""
            : null
        selectedText:
            \u2029: null
            \n: null
        resetSelection:
            ? "\"\"Reset selection. Nothing will be selected.\n        \"\""
            : null
        eol:
            \r: null
            \n: null
            \r\n: null
            Invalid EOL value: null
        replaceText:
            ? "\"\"Replace length symbols from ``pos`` with new text.\n\n        If\
                \ ``pos`` is an integer, it is interpreted as absolute position,\n\
                \        if a tuple - as ``(line, column)``\n        \"\""
            : null
            Invalid start position %d: null
            Invalid end position %d: null
        insertText:
            ? "\"\"Insert text at position\n\n        If ``pos`` is an integer, it\
                \ is interpreted as absolute position,\n        if a tuple - as ``(line,\
                \ column)``\n        \"\""
            : null
        updateViewport:
            ? "\"\"Recalculates geometry for all the margins and the editor viewport\n\
                \        \"\""
            : null
        updateViewportMargins:
            '""Sets the viewport margins and the solid edge geometry""': null
        _updateExtraSelections:
            ? "\"\"Highlight current line\n        \"\""
            : null
        _setSolidEdgeGeometry:
            '""Sets the solid edge line geometry if needed""': null
            '9': null
        setViewportMargins:
            ? "\"\"\n        Override to align function signature with first character.\n\
                \        \"\""
            : null
        textBeforeCursor:
            ? "\"\"Text in current block from start to cursor position\n        \"\
                \""
            : null
        keyPressEvent:
            ? "\"\"QPlainTextEdit.keyPressEvent() implementation.\n        Catch events,\
                \ which may not be catched with QShortcut and call slots\n       \
                \ \"\""
            : null
            backspaceOverwrite:
                ' ': null
            typeOverwrite:
                ? "\"\"QPlainTextEdit records text input in replace mode as 2 actions:\n\
                    \            delete char, and type char. Actions are undone separately.\
                    \ This is\n            workaround for the Qt bug\"\""
                : null
            darwin: null
        terminate:
            ? "\"\" Terminate Qutepart instance.\n        This method MUST be called\
                \ before application stop to avoid crashes and\n        some other\
                \ interesting effects\n        Call it on close to free memory and\
                \ stop background highlighting\n        \"\""
            : null
        __enter__:
            ? "\"\"Context management method.\n        Begin atomic modification\n\
                \        \"\""
            : null
        __exit__:
            ? "\"\"Context management method.\n        End atomic modification\n \
                \       \"\""
            : null
        setFont:
            ? "\"\"Set font and update tab stop width\n        \"\""
            : null
        showEvent:
            ? "\"\" Qt 5.big automatically changes font when adding document to workspace.\n\
                \        Workaround this bug \"\""
            : null
        _updateTabStopWidth:
            ? "\"\"Update tabstop width after font or indentation changed\n      \
                \  \"\""
            : null
            ' ': null
        lines:
            Invalid new value of "lines" attribute: null
            \n: null
        _resetCachedText:
            ? "\"\"Reset toPlainText() result cache\n        \"\""
            : null
        textForSaving:
            ? "\"\"Get text with correct EOL symbols. Use this method for saving a\
                \ file to storage\n        \"\""
            : null
            \n: null
        _get_token_at:
            tokens: null
            syntax_stack: null
        isComment:
            ? "\"\"Check if character at column is a comment\n        \"\""
            : null
        isCode:
            ? "\"\"Check if text at given position is a code.\n\n        If language\
                \ is not known, or text is not parsed yet, ``True`` is returned\n\
                \        \"\""
            : null
        setExtraSelections:
            ? "\"\"Set list of extra selections.\n        Selections are list of tuples\
                \ ``(startAbsolutePosition, length)``.\n        Extra selections are\
                \ reset on any text modification.\n\n        This is reimplemented\
                \ method of QPlainTextEdit, it has different signature.\n        Do\
                \ not use QPlainTextEdit method\n        \"\""
            : null
        mapToAbsPosition:
            ? "\"\"Convert line and column number to absolute position\n        \"\
                \""
            : null
            Invalid line index %d: null
            Invalid column index %d: null
        mapToLineCol:
            ? "\"\"Convert absolute position to ``(line, column)``\n        \"\""
            : null
            Invalid absolute position %d: null
        resizeEvent:
            ? "\"\"QWidget.resizeEvent() implementation.\n        Adjust line number\
                \ area\n        \"\""
            : null
        _insertNewBlock:
            ? "\"\"Enter pressed.\n        Insert properly indented block\n      \
                \  \"\""
            : null
        insert_completion:
            ? "\"\"Insert a completion into the editor.\n\n        completion_position\
                \ is where the completion was generated.\n\n        The replacement\
                \ range is computed using the (LSP) completion's\n        textEdit\
                \ field if it exists. Otherwise, we replace from the\n        start\
                \ of the word under the cursor.\n        \"\""
            : null
            start: null
            end: null
            text: null
        keyReleaseEvent:
            _: null
            .: null
            'from ': null
            'import ': null
        _chooseVisibleWhitespace:
            \t: null
            ' ': null
        _drawIndentMarkersAndEdge:
            ? "\"\"Draw indentation markers\n        \"\""
            : null
            drawWhiteSpace:
                ' ': null
            effectiveEdgePos:
                ? "\"\"Position of edge in a block.\n            Defined by self._lineLengthEdge,\
                    \ but visible width of \\t is more than 1,\n            therefore\
                    \ effective position depends on count and position of \\t symbols\n\
                    \            Return -1 if line is too short to have edge\n   \
                    \         \"\""
                : null
                \t: null
        paintEvent:
            ? "\"\"Paint event\n        Draw indentation markers after main contents\
                \ is drawn\n        \"\""
            : null
        _currentLineExtraSelections:
            ? "\"\"QTextEdit.ExtraSelection, which highlightes current line\n    \
                \    \"\""
            : null
        insertFromMimeData:
            ', ': null
            '''': null
            '''\"''\"''': null
        get_current_word_and_position:
            ? "\"\"\n        Return current word, i.e. word at cursor position, and\
                \ the start\n        position.\n        \"\""
            : null
            is_special_character:
                '""Check if a character is a non-letter including numbers.""': null
                '''([^\d\W]\w*)': null
            '''([^\d\W]\w*)': null
        get_current_word:
            '""Return current word, i.e. word at cursor position.""': null
    LineNumberArea:
        __init__:
            ? "\"\"qpart: reference to the editor\n           name: margin identifier\n\
                \           bit_count: number of bits to be used by the margin\n \
                \       \"\""
            : null
            line_numbers: null
        paintEvent:
            ? "\"\"QWidget.paintEvent() implementation\n        \"\""
            : null
        __calculateWidth:
            '9': null
        width:
            ? "\"\"Desired width. Includes text and margins\n        \"\""
            : null
        __allocateBits:
            ? "\"\"Allocates the bit range depending on the required bit count\n \
                \       \"\""
            : null
            A margin cannot request negative number of bits: null
        __updateRequest:
            ? "\"\"Repaint line number area if necessary\n        \"\""
            : null
        getName:
            ? "\"\"Provides the margin identifier\n        \"\""
            : null
        getBitRange:
            ? "\"\"None or inclusive bits used pair,\n           e.g. (2,4) => 3 bits\
                \ used 2nd, 3rd and 4th\n        \"\""
            : null
        setBlockValue:
            ? "\"\"Sets the required value to the block without damaging the other\
                \ bits\n        \"\""
            : null
            The margin ': null
            ''' did not allocate any bits for the values': null
            ''' must be a positive integer': null
            ''' value exceeds the allocated bit range': null
        getBlockValue:
            ? "\"\"Provides the previously set block value respecting the bits range.\n\
                \           0 value and not marked block are treated the same way\
                \ and 0 is\n           provided.\n        \"\""
            : null
            The margin ': null
            ''' did not allocate any bits for the values': null
        hide:
            ? "\"\"Override the QWidget::hide() method to properly recalculate the\n\
                \           editor viewport.\n        \"\""
            : null
        show:
            ? "\"\"Override the QWidget::show() method to properly recalculate the\n\
                \           editor viewport.\n        \"\""
            : null
        setVisible:
            ? "\"\"Override the QWidget::setVisible(bool) method to properly\n   \
                \        recalculate the editor viewport.\n        \"\""
            : null
        clear:
            ? "\"\"Convenience method to reset all the block values to 0\n       \
                \ \"\""
            : null
Orange/widgets/data/utils/pythoneditor/brackethighlighter.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
    _TimeoutException:
        ? "\"\"Operation timeout happened\n    \"\""
        : null
    BracketHighlighter:
        ? "\"\"Bracket highliter.\n    Calculates list of QTextEdit.ExtraSelection\n\
            \n    Currently, this class might be just a set of functions.\n    Probably,\
            \ it will contain instance specific selection colors later\n    \"\""
        : null
        '#0b0': null
        '#a22': null
        ({[: null
        )}]: null
        _iterateDocumentCharsForward:
            ? "\"\"Traverse document forward. Yield (block, columnIndex, char)\n \
                \       Raise _TimeoutException if time is over\n        \"\""
            : null
            Time is over: null
        _iterateDocumentCharsBackward:
            ? "\"\"Traverse document forward. Yield (block, columnIndex, char)\n \
                \       Raise _TimeoutException if time is over\n        \"\""
            : null
            Time is over: null
        _findMatchingBracket:
            ? "\"\"Find matching bracket for the bracket.\n        Return (block,\
                \ columnIndex) or (None, None)\n        Raise _TimeoutException, if\
                \ time is over\n        \"\""
            : null
        _makeMatchSelection:
            ? "\"\"Make matched or unmatched QTextEdit.ExtraSelection\n        \"\""
            : null
            darkMode: null
            '#111111': null
        _highlightBracket:
            ? "\"\"Highlight bracket and matching bracket\n        Return tuple of\
                \ QTextEdit.ExtraSelection's\n        \"\""
            : null
        extraSelections:
            ? "\"\"List of QTextEdit.ExtraSelection's, which highlighte brackets\n\
                \        \"\""
            : null
Orange/widgets/data/utils/pythoneditor/tests/run_all.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
    __main__: null
    .: null
    test_*: null
    Suite created: null
    Run done: null
    OK: null
    Failed: null
Orange/widgets/data/utils/pythoneditor/tests/base.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
    _processPendingEvents:
        ? "\"\"Process pending application events.\n    Timeout is used, because on\
            \ Windows hasPendingEvents() always returns True\n    \"\""
        : null
    in_main_loop:
        ? "\"\"Decorator executes test method in the QApplication main loop.\n   \
            \ QAction shortcuts doesn't work, if main loop is not running.\n    Do\
            \ not use for tests, which doesn't use main loop, because it slows down\
            \ execution.\n    \"\""
        : null
    SimpleWidget:
        Simple widget: null
    keySequenceClicks:
        '""Use QTest.keyClick to send a QKeySequence to a widget.""': null
Orange/widgets/data/utils/pythoneditor/tests/test_indenter/__init__.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
Orange/widgets/data/utils/pythoneditor/tests/test_indenter/indenttest.py:
    ? '""

        Adapted from a code editor component created

        for Enki editor as replacement for QScintilla.

        Copyright (C) 2020  Andrei Kopats


        Originally licensed under the terms of GNU Lesser General Public License

        as published by the Free Software Foundation, version 2.1 of the license.

        This is compatible with Orange3''s GPL-3.0 license.

        ""'
    : null
    ..: null
    tests: null
    IndentTest:
        ? "\"\"Base class for tests\n    \"\""
        : null
        setUp:
            INDENT_WIDTH: null
        setOrigin:
            \n: null
        verifyExpected:
            \n: null
        writeCursorPosition:
            (%d,%d): null
        writeln:
            \n: null
